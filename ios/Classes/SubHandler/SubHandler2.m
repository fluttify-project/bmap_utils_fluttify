//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "SubHandler2.h"
#import "FluttifyMessageCodec.h"
#import <BaiduMapAPI_Utils/BMKUtilsComponent.h>
#import <BaiduMapAPI_Base/BMKBaseComponent.h>

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSString*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation BmapUtilsFluttifyPlugin (SubHandler2)
- (NSDictionary<NSString*, Handler>*) getSubHandler2 {
    __weak __typeof(self)weakSelf = self;
    return @{
        @"ObjectFactory::create_batchBMKAddressComponent": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                BMKAddressComponent* __this__;
                if ([init boolValue]) {
                    __this__ = [[BMKAddressComponent alloc] init];
                } else {
                    __this__ = [BMKAddressComponent alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKOpenTransitRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                BMKOpenTransitRouteOption* __this__;
                if ([init boolValue]) {
                    __this__ = [[BMKOpenTransitRouteOption alloc] init];
                } else {
                    __this__ = [BMKOpenTransitRouteOption alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKPlanNode": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                BMKPlanNode* __this__;
                if ([init boolValue]) {
                    __this__ = [[BMKPlanNode alloc] init];
                } else {
                    __this__ = [BMKPlanNode alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"BMKCoordinateSpanMake::BMKCoordinateSpanMake": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKCoordinateSpanMake::BMKCoordinateSpanMake(%@)", args);
            }
        
            // args
            // jsonable arg
            CLLocationDegrees latitudeDelta = [args[@"latitudeDelta"] doubleValue];
            // jsonable arg
            CLLocationDegrees longitudeDelta = [args[@"longitudeDelta"] doubleValue];
        
            // ref
        
        
            // invoke native method
            BMKCoordinateSpan result = BMKCoordinateSpanMake(latitudeDelta, longitudeDelta);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKCoordinateSpan)];
        
            methodResult(__result__);
        },
        @"BMKCoordinateRegionMake::BMKCoordinateRegionMake": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKCoordinateRegionMake::BMKCoordinateRegionMake(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* centerCoordinateValue = (NSValue*) args[@"centerCoordinate"];
            CLLocationCoordinate2D centerCoordinate;
            if (centerCoordinateValue != nil && (NSNull*) centerCoordinateValue != [NSNull null]) {
              [centerCoordinateValue getValue:&centerCoordinate];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"centerCoordinate不能为null"]);
              return;
            }
        
            // struct arg
            NSValue* spanValue = (NSValue*) args[@"span"];
            BMKCoordinateSpan span;
            if (spanValue != nil && (NSNull*) spanValue != [NSNull null]) {
              [spanValue getValue:&span];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"span不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            BMKCoordinateRegion result = BMKCoordinateRegionMake(centerCoordinate, span);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKCoordinateRegion)];
        
            methodResult(__result__);
        },
        @"BMKMapPointMake::BMKMapPointMake": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapPointMake::BMKMapPointMake(%@)", args);
            }
        
            // args
            // jsonable arg
            double x = [args[@"x"] doubleValue];
            // jsonable arg
            double y = [args[@"y"] doubleValue];
        
            // ref
        
        
            // invoke native method
            BMKMapPoint result = BMKMapPointMake(x, y);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKMapPoint)];
        
            methodResult(__result__);
        },
        @"BMKMapSizeMake::BMKMapSizeMake": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapSizeMake::BMKMapSizeMake(%@)", args);
            }
        
            // args
            // jsonable arg
            double width = [args[@"width"] doubleValue];
            // jsonable arg
            double height = [args[@"height"] doubleValue];
        
            // ref
        
        
            // invoke native method
            BMKMapSize result = BMKMapSizeMake(width, height);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKMapSize)];
        
            methodResult(__result__);
        },
        @"BMKMapRectMake::BMKMapRectMake": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectMake::BMKMapRectMake(%@)", args);
            }
        
            // args
            // jsonable arg
            double x = [args[@"x"] doubleValue];
            // jsonable arg
            double y = [args[@"y"] doubleValue];
            // jsonable arg
            double width = [args[@"width"] doubleValue];
            // jsonable arg
            double height = [args[@"height"] doubleValue];
        
            // ref
        
        
            // invoke native method
            BMKMapRect result = BMKMapRectMake(x, y, width, height);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKMapRect)];
        
            methodResult(__result__);
        },
        @"BMKMapRectIsNull::BMKMapRectIsNull": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectIsNull::BMKMapRectIsNull(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            BMKMapRect rect;
            if (rectValue != nil && (NSNull*) rectValue != [NSNull null]) {
              [rectValue getValue:&rect];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"rect不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            BOOL result = BMKMapRectIsNull(rect);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKMapRectGetMinX::BMKMapRectGetMinX": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectGetMinX::BMKMapRectGetMinX(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            BMKMapRect rect;
            if (rectValue != nil && (NSNull*) rectValue != [NSNull null]) {
              [rectValue getValue:&rect];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"rect不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            double result = BMKMapRectGetMinX(rect);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKMapRectGetMinY::BMKMapRectGetMinY": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectGetMinY::BMKMapRectGetMinY(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            BMKMapRect rect;
            if (rectValue != nil && (NSNull*) rectValue != [NSNull null]) {
              [rectValue getValue:&rect];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"rect不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            double result = BMKMapRectGetMinY(rect);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKMapRectGetMidX::BMKMapRectGetMidX": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectGetMidX::BMKMapRectGetMidX(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            BMKMapRect rect;
            if (rectValue != nil && (NSNull*) rectValue != [NSNull null]) {
              [rectValue getValue:&rect];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"rect不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            double result = BMKMapRectGetMidX(rect);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKMapRectGetMidY::BMKMapRectGetMidY": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectGetMidY::BMKMapRectGetMidY(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            BMKMapRect rect;
            if (rectValue != nil && (NSNull*) rectValue != [NSNull null]) {
              [rectValue getValue:&rect];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"rect不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            double result = BMKMapRectGetMidY(rect);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKMapRectGetMaxX::BMKMapRectGetMaxX": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectGetMaxX::BMKMapRectGetMaxX(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            BMKMapRect rect;
            if (rectValue != nil && (NSNull*) rectValue != [NSNull null]) {
              [rectValue getValue:&rect];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"rect不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            double result = BMKMapRectGetMaxX(rect);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKMapRectGetMaxY::BMKMapRectGetMaxY": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectGetMaxY::BMKMapRectGetMaxY(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            BMKMapRect rect;
            if (rectValue != nil && (NSNull*) rectValue != [NSNull null]) {
              [rectValue getValue:&rect];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"rect不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            double result = BMKMapRectGetMaxY(rect);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKMapPointForCoordinate::BMKMapPointForCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapPointForCoordinate::BMKMapPointForCoordinate(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
            CLLocationCoordinate2D coordinate;
            if (coordinateValue != nil && (NSNull*) coordinateValue != [NSNull null]) {
              [coordinateValue getValue:&coordinate];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"coordinate不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            BMKMapPoint result = BMKMapPointForCoordinate(coordinate);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKMapPoint)];
        
            methodResult(__result__);
        },
        @"BMKCoordinateForMapPoint::BMKCoordinateForMapPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKCoordinateForMapPoint::BMKCoordinateForMapPoint(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* mapPointValue = (NSValue*) args[@"mapPoint"];
            BMKMapPoint mapPoint;
            if (mapPointValue != nil && (NSNull*) mapPointValue != [NSNull null]) {
              [mapPointValue getValue:&mapPoint];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"mapPoint不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            CLLocationCoordinate2D result = BMKCoordinateForMapPoint(mapPoint);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
            methodResult(__result__);
        },
        @"BMKConvertToBaiduMercatorFromBD09LL::BMKConvertToBaiduMercatorFromBD09LL": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKConvertToBaiduMercatorFromBD09LL::BMKConvertToBaiduMercatorFromBD09LL(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* bd09llCoordinateValue = (NSValue*) args[@"bd09llCoordinate"];
            CLLocationCoordinate2D bd09llCoordinate;
            if (bd09llCoordinateValue != nil && (NSNull*) bd09llCoordinateValue != [NSNull null]) {
              [bd09llCoordinateValue getValue:&bd09llCoordinate];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"bd09llCoordinate不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            CGPoint result = BMKConvertToBaiduMercatorFromBD09LL(bd09llCoordinate);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGPoint)];
        
            methodResult(__result__);
        },
        @"BMKConvertToBD09LLFromBaiduMercator::BMKConvertToBD09LLFromBaiduMercator": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKConvertToBD09LLFromBaiduMercator::BMKConvertToBD09LLFromBaiduMercator(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* bdMCTCoordinateValue = (NSValue*) args[@"bdMCTCoordinate"];
            CGPoint bdMCTCoordinate;
            if (bdMCTCoordinateValue != nil && (NSNull*) bdMCTCoordinateValue != [NSNull null]) {
              [bdMCTCoordinateValue getValue:&bdMCTCoordinate];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"bdMCTCoordinate不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            CLLocationCoordinate2D result = BMKConvertToBD09LLFromBaiduMercator(bdMCTCoordinate);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
            methodResult(__result__);
        },
        @"BMKCoordTrans::BMKCoordTrans": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKCoordTrans::BMKCoordTrans(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
            CLLocationCoordinate2D coordinate;
            if (coordinateValue != nil && (NSNull*) coordinateValue != [NSNull null]) {
              [coordinateValue getValue:&coordinate];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"coordinate不能为null"]);
              return;
            }
        
            // enum arg
            BMK_COORD_TYPE fromType = (BMK_COORD_TYPE) [args[@"fromType"] integerValue];
            // enum arg
            BMK_COORD_TYPE toType = (BMK_COORD_TYPE) [args[@"toType"] integerValue];
        
            // ref
        
        
            // invoke native method
            CLLocationCoordinate2D result = BMKCoordTrans(coordinate, fromType, toType);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
            methodResult(__result__);
        },
        @"BMKConvertBaiduCoorFrom::BMKConvertBaiduCoorFrom": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKConvertBaiduCoorFrom::BMKConvertBaiduCoorFrom(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
            CLLocationCoordinate2D coordinate;
            if (coordinateValue != nil && (NSNull*) coordinateValue != [NSNull null]) {
              [coordinateValue getValue:&coordinate];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"coordinate不能为null"]);
              return;
            }
        
            // enum arg
            BMK_COORD_TYPE type = (BMK_COORD_TYPE) [args[@"type"] integerValue];
        
            // ref
        
        
            // invoke native method
            NSDictionary* result = BMKConvertBaiduCoorFrom(coordinate, type);
        
            // result
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKMetersPerMapPointAtLatitude::BMKMetersPerMapPointAtLatitude": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMetersPerMapPointAtLatitude::BMKMetersPerMapPointAtLatitude(%@)", args);
            }
        
            // args
            // jsonable arg
            CLLocationDegrees latitude = [args[@"latitude"] doubleValue];
        
            // ref
        
        
            // invoke native method
            CLLocationDistance result = BMKMetersPerMapPointAtLatitude(latitude);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKMapPointsPerMeterAtLatitude::BMKMapPointsPerMeterAtLatitude": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapPointsPerMeterAtLatitude::BMKMapPointsPerMeterAtLatitude(%@)", args);
            }
        
            // args
            // jsonable arg
            CLLocationDegrees latitude = [args[@"latitude"] doubleValue];
        
            // ref
        
        
            // invoke native method
            double result = BMKMapPointsPerMeterAtLatitude(latitude);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKMetersBetweenMapPoints::BMKMetersBetweenMapPoints": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMetersBetweenMapPoints::BMKMetersBetweenMapPoints(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* aValue = (NSValue*) args[@"a"];
            BMKMapPoint a;
            if (aValue != nil && (NSNull*) aValue != [NSNull null]) {
              [aValue getValue:&a];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"a不能为null"]);
              return;
            }
        
            // struct arg
            NSValue* bValue = (NSValue*) args[@"b"];
            BMKMapPoint b;
            if (bValue != nil && (NSNull*) bValue != [NSNull null]) {
              [bValue getValue:&b];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"b不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            CLLocationDistance result = BMKMetersBetweenMapPoints(a, b);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKMetersBetweenCoordinates::BMKMetersBetweenCoordinates": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMetersBetweenCoordinates::BMKMetersBetweenCoordinates(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* aValue = (NSValue*) args[@"a"];
            CLLocationCoordinate2D a;
            if (aValue != nil && (NSNull*) aValue != [NSNull null]) {
              [aValue getValue:&a];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"a不能为null"]);
              return;
            }
        
            // struct arg
            NSValue* bValue = (NSValue*) args[@"b"];
            CLLocationCoordinate2D b;
            if (bValue != nil && (NSNull*) bValue != [NSNull null]) {
              [bValue getValue:&b];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"b不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            CLLocationDistance result = BMKMetersBetweenCoordinates(a, b);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKMapRectGetWidth::BMKMapRectGetWidth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectGetWidth::BMKMapRectGetWidth(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            BMKMapRect rect;
            if (rectValue != nil && (NSNull*) rectValue != [NSNull null]) {
              [rectValue getValue:&rect];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"rect不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            double result = BMKMapRectGetWidth(rect);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKMapRectGetHeight::BMKMapRectGetHeight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectGetHeight::BMKMapRectGetHeight(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            BMKMapRect rect;
            if (rectValue != nil && (NSNull*) rectValue != [NSNull null]) {
              [rectValue getValue:&rect];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"rect不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            double result = BMKMapRectGetHeight(rect);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKMapPointEqualToPoint::BMKMapPointEqualToPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapPointEqualToPoint::BMKMapPointEqualToPoint(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* point1Value = (NSValue*) args[@"point1"];
            BMKMapPoint point1;
            if (point1Value != nil && (NSNull*) point1Value != [NSNull null]) {
              [point1Value getValue:&point1];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"point1不能为null"]);
              return;
            }
        
            // struct arg
            NSValue* point2Value = (NSValue*) args[@"point2"];
            BMKMapPoint point2;
            if (point2Value != nil && (NSNull*) point2Value != [NSNull null]) {
              [point2Value getValue:&point2];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"point2不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            BOOL result = BMKMapPointEqualToPoint(point1, point2);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKGetNearestMapPointFromPolyline::BMKGetNearestMapPointFromPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKGetNearestMapPointFromPolyline::BMKGetNearestMapPointFromPolyline(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* pointValue = (NSValue*) args[@"point"];
            BMKMapPoint point;
            if (pointValue != nil && (NSNull*) pointValue != [NSNull null]) {
              [pointValue getValue:&point];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"point不能为null"]);
              return;
            }
        
            // list arg struct
            NSArray<NSValue*>* polylineValueList = (NSArray<NSValue*>*) args[@"polyline"];
            BMKMapPoint polyline[polylineValueList.count];
            for (NSUInteger __i__ = 0; __i__ < polylineValueList.count; __i__++) {
                NSValue* polylineValue = (NSValue*) [polylineValueList objectAtIndex:__i__];
                BMKMapPoint polylineItem;
                [polylineValue getValue:&polylineItem];
                polyline[__i__] = polylineItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
            // ref
        
        
            // invoke native method
            BMKMapPoint result = BMKGetNearestMapPointFromPolyline(point, polyline, count);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKMapPoint)];
        
            methodResult(__result__);
        },
        @"BMKGetPointToTheVerticalFootOfLine::BMKGetPointToTheVerticalFootOfLine": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKGetPointToTheVerticalFootOfLine::BMKGetPointToTheVerticalFootOfLine(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* pointValue = (NSValue*) args[@"point"];
            BMKMapPoint point;
            if (pointValue != nil && (NSNull*) pointValue != [NSNull null]) {
              [pointValue getValue:&point];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"point不能为null"]);
              return;
            }
        
            // struct arg
            NSValue* lineStartPtValue = (NSValue*) args[@"lineStartPt"];
            BMKMapPoint lineStartPt;
            if (lineStartPtValue != nil && (NSNull*) lineStartPtValue != [NSNull null]) {
              [lineStartPtValue getValue:&lineStartPt];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"lineStartPt不能为null"]);
              return;
            }
        
            // struct arg
            NSValue* lineEndPtValue = (NSValue*) args[@"lineEndPt"];
            BMKMapPoint lineEndPt;
            if (lineEndPtValue != nil && (NSNull*) lineEndPtValue != [NSNull null]) {
              [lineEndPtValue getValue:&lineEndPt];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"lineEndPt不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            BMKMapPoint result = BMKGetPointToTheVerticalFootOfLine(point, lineStartPt, lineEndPt);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKMapPoint)];
        
            methodResult(__result__);
        },
        @"BMKGetDistanceFromPointToLine::BMKGetDistanceFromPointToLine": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKGetDistanceFromPointToLine::BMKGetDistanceFromPointToLine(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* pointValue = (NSValue*) args[@"point"];
            BMKMapPoint point;
            if (pointValue != nil && (NSNull*) pointValue != [NSNull null]) {
              [pointValue getValue:&point];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"point不能为null"]);
              return;
            }
        
            // struct arg
            NSValue* lineStartPtValue = (NSValue*) args[@"lineStartPt"];
            BMKMapPoint lineStartPt;
            if (lineStartPtValue != nil && (NSNull*) lineStartPtValue != [NSNull null]) {
              [lineStartPtValue getValue:&lineStartPt];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"lineStartPt不能为null"]);
              return;
            }
        
            // struct arg
            NSValue* lineEndPtValue = (NSValue*) args[@"lineEndPt"];
            BMKMapPoint lineEndPt;
            if (lineEndPtValue != nil && (NSNull*) lineEndPtValue != [NSNull null]) {
              [lineEndPtValue getValue:&lineEndPt];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"lineEndPt不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            CLLocationDistance result = BMKGetDistanceFromPointToLine(point, lineStartPt, lineEndPt);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKCoordinateRegionMakeWithDistance::BMKCoordinateRegionMakeWithDistance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKCoordinateRegionMakeWithDistance::BMKCoordinateRegionMakeWithDistance(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* centerCoordinateValue = (NSValue*) args[@"centerCoordinate"];
            CLLocationCoordinate2D centerCoordinate;
            if (centerCoordinateValue != nil && (NSNull*) centerCoordinateValue != [NSNull null]) {
              [centerCoordinateValue getValue:&centerCoordinate];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"centerCoordinate不能为null"]);
              return;
            }
        
            // jsonable arg
            CLLocationDistance latitudinalMeters = [args[@"latitudinalMeters"] doubleValue];
            // jsonable arg
            CLLocationDistance longitudinalMeters = [args[@"longitudinalMeters"] doubleValue];
        
            // ref
        
        
            // invoke native method
            BMKCoordinateRegion result = BMKCoordinateRegionMakeWithDistance(centerCoordinate, latitudinalMeters, longitudinalMeters);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKCoordinateRegion)];
        
            methodResult(__result__);
        },
        @"BMKMapSizeEqualToSize::BMKMapSizeEqualToSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapSizeEqualToSize::BMKMapSizeEqualToSize(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* size1Value = (NSValue*) args[@"size1"];
            BMKMapSize size1;
            if (size1Value != nil && (NSNull*) size1Value != [NSNull null]) {
              [size1Value getValue:&size1];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"size1不能为null"]);
              return;
            }
        
            // struct arg
            NSValue* size2Value = (NSValue*) args[@"size2"];
            BMKMapSize size2;
            if (size2Value != nil && (NSNull*) size2Value != [NSNull null]) {
              [size2Value getValue:&size2];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"size2不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            BOOL result = BMKMapSizeEqualToSize(size1, size2);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKMapRectEqualToRect::BMKMapRectEqualToRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectEqualToRect::BMKMapRectEqualToRect(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* rect1Value = (NSValue*) args[@"rect1"];
            BMKMapRect rect1;
            if (rect1Value != nil && (NSNull*) rect1Value != [NSNull null]) {
              [rect1Value getValue:&rect1];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"rect1不能为null"]);
              return;
            }
        
            // struct arg
            NSValue* rect2Value = (NSValue*) args[@"rect2"];
            BMKMapRect rect2;
            if (rect2Value != nil && (NSNull*) rect2Value != [NSNull null]) {
              [rect2Value getValue:&rect2];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"rect2不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            BOOL result = BMKMapRectEqualToRect(rect1, rect2);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKMapRectIsEmpty::BMKMapRectIsEmpty": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectIsEmpty::BMKMapRectIsEmpty(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            BMKMapRect rect;
            if (rectValue != nil && (NSNull*) rectValue != [NSNull null]) {
              [rectValue getValue:&rect];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"rect不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            BOOL result = BMKMapRectIsEmpty(rect);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKMapRectUnion::BMKMapRectUnion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectUnion::BMKMapRectUnion(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* rect1Value = (NSValue*) args[@"rect1"];
            BMKMapRect rect1;
            if (rect1Value != nil && (NSNull*) rect1Value != [NSNull null]) {
              [rect1Value getValue:&rect1];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"rect1不能为null"]);
              return;
            }
        
            // struct arg
            NSValue* rect2Value = (NSValue*) args[@"rect2"];
            BMKMapRect rect2;
            if (rect2Value != nil && (NSNull*) rect2Value != [NSNull null]) {
              [rect2Value getValue:&rect2];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"rect2不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            BMKMapRect result = BMKMapRectUnion(rect1, rect2);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKMapRect)];
        
            methodResult(__result__);
        },
        @"BMKMapRectIntersection::BMKMapRectIntersection": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectIntersection::BMKMapRectIntersection(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* rect1Value = (NSValue*) args[@"rect1"];
            BMKMapRect rect1;
            if (rect1Value != nil && (NSNull*) rect1Value != [NSNull null]) {
              [rect1Value getValue:&rect1];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"rect1不能为null"]);
              return;
            }
        
            // struct arg
            NSValue* rect2Value = (NSValue*) args[@"rect2"];
            BMKMapRect rect2;
            if (rect2Value != nil && (NSNull*) rect2Value != [NSNull null]) {
              [rect2Value getValue:&rect2];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"rect2不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            BMKMapRect result = BMKMapRectIntersection(rect1, rect2);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKMapRect)];
        
            methodResult(__result__);
        },
        @"BMKMapRectInset::BMKMapRectInset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectInset::BMKMapRectInset(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            BMKMapRect rect;
            if (rectValue != nil && (NSNull*) rectValue != [NSNull null]) {
              [rectValue getValue:&rect];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"rect不能为null"]);
              return;
            }
        
            // jsonable arg
            double dx = [args[@"dx"] doubleValue];
            // jsonable arg
            double dy = [args[@"dy"] doubleValue];
        
            // ref
        
        
            // invoke native method
            BMKMapRect result = BMKMapRectInset(rect, dx, dy);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKMapRect)];
        
            methodResult(__result__);
        },
        @"BMKMapRectOffset::BMKMapRectOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectOffset::BMKMapRectOffset(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            BMKMapRect rect;
            if (rectValue != nil && (NSNull*) rectValue != [NSNull null]) {
              [rectValue getValue:&rect];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"rect不能为null"]);
              return;
            }
        
            // jsonable arg
            double dx = [args[@"dx"] doubleValue];
            // jsonable arg
            double dy = [args[@"dy"] doubleValue];
        
            // ref
        
        
            // invoke native method
            BMKMapRect result = BMKMapRectOffset(rect, dx, dy);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKMapRect)];
        
            methodResult(__result__);
        },
        @"BMKMapRectContainsPoint::BMKMapRectContainsPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectContainsPoint::BMKMapRectContainsPoint(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            BMKMapRect rect;
            if (rectValue != nil && (NSNull*) rectValue != [NSNull null]) {
              [rectValue getValue:&rect];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"rect不能为null"]);
              return;
            }
        
            // struct arg
            NSValue* pointValue = (NSValue*) args[@"point"];
            BMKMapPoint point;
            if (pointValue != nil && (NSNull*) pointValue != [NSNull null]) {
              [pointValue getValue:&point];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"point不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            BOOL result = BMKMapRectContainsPoint(rect, point);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKMapRectContainsRect::BMKMapRectContainsRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectContainsRect::BMKMapRectContainsRect(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* rect1Value = (NSValue*) args[@"rect1"];
            BMKMapRect rect1;
            if (rect1Value != nil && (NSNull*) rect1Value != [NSNull null]) {
              [rect1Value getValue:&rect1];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"rect1不能为null"]);
              return;
            }
        
            // struct arg
            NSValue* rect2Value = (NSValue*) args[@"rect2"];
            BMKMapRect rect2;
            if (rect2Value != nil && (NSNull*) rect2Value != [NSNull null]) {
              [rect2Value getValue:&rect2];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"rect2不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            BOOL result = BMKMapRectContainsRect(rect1, rect2);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKMapRectIntersectsRect::BMKMapRectIntersectsRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectIntersectsRect::BMKMapRectIntersectsRect(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* rect1Value = (NSValue*) args[@"rect1"];
            BMKMapRect rect1;
            if (rect1Value != nil && (NSNull*) rect1Value != [NSNull null]) {
              [rect1Value getValue:&rect1];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"rect1不能为null"]);
              return;
            }
        
            // struct arg
            NSValue* rect2Value = (NSValue*) args[@"rect2"];
            BMKMapRect rect2;
            if (rect2Value != nil && (NSNull*) rect2Value != [NSNull null]) {
              [rect2Value getValue:&rect2];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"rect2不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            BOOL result = BMKMapRectIntersectsRect(rect1, rect2);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKCoordinateRegionForMapRect::BMKCoordinateRegionForMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKCoordinateRegionForMapRect::BMKCoordinateRegionForMapRect(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            BMKMapRect rect;
            if (rectValue != nil && (NSNull*) rectValue != [NSNull null]) {
              [rectValue getValue:&rect];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"rect不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            BMKCoordinateRegion result = BMKCoordinateRegionForMapRect(rect);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKCoordinateRegion)];
        
            methodResult(__result__);
        },
        @"BMKMapRectSpans180thMeridian::BMKMapRectSpans180thMeridian": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectSpans180thMeridian::BMKMapRectSpans180thMeridian(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            BMKMapRect rect;
            if (rectValue != nil && (NSNull*) rectValue != [NSNull null]) {
              [rectValue getValue:&rect];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"rect不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            BOOL result = BMKMapRectSpans180thMeridian(rect);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKMapRectRemainder::BMKMapRectRemainder": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectRemainder::BMKMapRectRemainder(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            BMKMapRect rect;
            if (rectValue != nil && (NSNull*) rectValue != [NSNull null]) {
              [rectValue getValue:&rect];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"rect不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            BMKMapRect result = BMKMapRectRemainder(rect);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKMapRect)];
        
            methodResult(__result__);
        },
        @"BMKCircleContainsPoint::BMKCircleContainsPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKCircleContainsPoint::BMKCircleContainsPoint(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* pointValue = (NSValue*) args[@"point"];
            BMKMapPoint point;
            if (pointValue != nil && (NSNull*) pointValue != [NSNull null]) {
              [pointValue getValue:&point];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"point不能为null"]);
              return;
            }
        
            // struct arg
            NSValue* centerValue = (NSValue*) args[@"center"];
            BMKMapPoint center;
            if (centerValue != nil && (NSNull*) centerValue != [NSNull null]) {
              [centerValue getValue:&center];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"center不能为null"]);
              return;
            }
        
            // jsonable arg
            double radius = [args[@"radius"] doubleValue];
        
            // ref
        
        
            // invoke native method
            BOOL result = BMKCircleContainsPoint(point, center, radius);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKCircleContainsCoordinate::BMKCircleContainsCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKCircleContainsCoordinate::BMKCircleContainsCoordinate(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* pointValue = (NSValue*) args[@"point"];
            CLLocationCoordinate2D point;
            if (pointValue != nil && (NSNull*) pointValue != [NSNull null]) {
              [pointValue getValue:&point];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"point不能为null"]);
              return;
            }
        
            // struct arg
            NSValue* centerValue = (NSValue*) args[@"center"];
            CLLocationCoordinate2D center;
            if (centerValue != nil && (NSNull*) centerValue != [NSNull null]) {
              [centerValue getValue:&center];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"center不能为null"]);
              return;
            }
        
            // jsonable arg
            double radius = [args[@"radius"] doubleValue];
        
            // ref
        
        
            // invoke native method
            BOOL result = BMKCircleContainsCoordinate(point, center, radius);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKPolygonContainsPoint::BMKPolygonContainsPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKPolygonContainsPoint::BMKPolygonContainsPoint(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* pointValue = (NSValue*) args[@"point"];
            BMKMapPoint point;
            if (pointValue != nil && (NSNull*) pointValue != [NSNull null]) {
              [pointValue getValue:&point];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"point不能为null"]);
              return;
            }
        
            // list arg struct
            NSArray<NSValue*>* polygonValueList = (NSArray<NSValue*>*) args[@"polygon"];
            BMKMapPoint polygon[polygonValueList.count];
            for (NSUInteger __i__ = 0; __i__ < polygonValueList.count; __i__++) {
                NSValue* polygonValue = (NSValue*) [polygonValueList objectAtIndex:__i__];
                BMKMapPoint polygonItem;
                [polygonValue getValue:&polygonItem];
                polygon[__i__] = polygonItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
            // ref
        
        
            // invoke native method
            BOOL result = BMKPolygonContainsPoint(point, polygon, count);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKPolygonContainsCoordinate::BMKPolygonContainsCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKPolygonContainsCoordinate::BMKPolygonContainsCoordinate(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* pointValue = (NSValue*) args[@"point"];
            CLLocationCoordinate2D point;
            if (pointValue != nil && (NSNull*) pointValue != [NSNull null]) {
              [pointValue getValue:&point];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"point不能为null"]);
              return;
            }
        
            // list arg struct
            NSArray<NSValue*>* polygonValueList = (NSArray<NSValue*>*) args[@"polygon"];
            CLLocationCoordinate2D polygon[polygonValueList.count];
            for (NSUInteger __i__ = 0; __i__ < polygonValueList.count; __i__++) {
                NSValue* polygonValue = (NSValue*) [polygonValueList objectAtIndex:__i__];
                CLLocationCoordinate2D polygonItem;
                [polygonValue getValue:&polygonItem];
                polygon[__i__] = polygonItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
            // ref
        
        
            // invoke native method
            BOOL result = BMKPolygonContainsCoordinate(point, polygon, count);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKAreaBetweenCoordinates::BMKAreaBetweenCoordinates": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKAreaBetweenCoordinates::BMKAreaBetweenCoordinates(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* leftTopValue = (NSValue*) args[@"leftTop"];
            CLLocationCoordinate2D leftTop;
            if (leftTopValue != nil && (NSNull*) leftTopValue != [NSNull null]) {
              [leftTopValue getValue:&leftTop];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"leftTop不能为null"]);
              return;
            }
        
            // struct arg
            NSValue* rightBottomValue = (NSValue*) args[@"rightBottom"];
            CLLocationCoordinate2D rightBottom;
            if (rightBottomValue != nil && (NSNull*) rightBottomValue != [NSNull null]) {
              [rightBottomValue getValue:&rightBottom];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"rightBottom不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            double result = BMKAreaBetweenCoordinates(leftTop, rightBottom);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKAreaForPolygon::BMKAreaForPolygon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKAreaForPolygon::BMKAreaForPolygon(%@)", args);
            }
        
            // args
            // list arg struct
            NSArray<NSValue*>* coordinatesValueList = (NSArray<NSValue*>*) args[@"coordinates"];
            CLLocationCoordinate2D coordinates[coordinatesValueList.count];
            for (NSUInteger __i__ = 0; __i__ < coordinatesValueList.count; __i__++) {
                NSValue* coordinatesValue = (NSValue*) [coordinatesValueList objectAtIndex:__i__];
                CLLocationCoordinate2D coordinatesItem;
                [coordinatesValue getValue:&coordinatesItem];
                coordinates[__i__] = coordinatesItem;
            }
            // jsonable arg
            int count = [args[@"count"] intValue];
        
            // ref
        
        
            // invoke native method
            double result = BMKAreaForPolygon(coordinates, count);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKGetDirectionFromCoords::BMKGetDirectionFromCoords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKGetDirectionFromCoords::BMKGetDirectionFromCoords(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* startCoordValue = (NSValue*) args[@"startCoord"];
            CLLocationCoordinate2D startCoord;
            if (startCoordValue != nil && (NSNull*) startCoordValue != [NSNull null]) {
              [startCoordValue getValue:&startCoord];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"startCoord不能为null"]);
              return;
            }
        
            // struct arg
            NSValue* endCoordValue = (NSValue*) args[@"endCoord"];
            CLLocationCoordinate2D endCoord;
            if (endCoordValue != nil && (NSNull*) endCoordValue != [NSNull null]) {
              [endCoordValue getValue:&endCoord];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"endCoord不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            CLLocationDirection result = BMKGetDirectionFromCoords(startCoord, endCoord);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKGetDirectionFromPoints::BMKGetDirectionFromPoints": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKGetDirectionFromPoints::BMKGetDirectionFromPoints(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* startPtValue = (NSValue*) args[@"startPt"];
            BMKMapPoint startPt;
            if (startPtValue != nil && (NSNull*) startPtValue != [NSNull null]) {
              [startPtValue getValue:&startPt];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"startPt不能为null"]);
              return;
            }
        
            // struct arg
            NSValue* endPtValue = (NSValue*) args[@"endPt"];
            BMKMapPoint endPt;
            if (endPtValue != nil && (NSNull*) endPtValue != [NSNull null]) {
              [endPtValue getValue:&endPt];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"endPt不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            CLLocationDirection result = BMKGetDirectionFromPoints(startPt, endPt);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKStringFromMapPoint::BMKStringFromMapPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKStringFromMapPoint::BMKStringFromMapPoint(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* pointValue = (NSValue*) args[@"point"];
            BMKMapPoint point;
            if (pointValue != nil && (NSNull*) pointValue != [NSNull null]) {
              [pointValue getValue:&point];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"point不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            NSString* result = BMKStringFromMapPoint(point);
        
            // result
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKStringFromMapSize::BMKStringFromMapSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKStringFromMapSize::BMKStringFromMapSize(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* sizeValue = (NSValue*) args[@"size"];
            BMKMapSize size;
            if (sizeValue != nil && (NSNull*) sizeValue != [NSNull null]) {
              [sizeValue getValue:&size];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"size不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            NSString* result = BMKStringFromMapSize(size);
        
            // result
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKStringFromMapRect::BMKStringFromMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKStringFromMapRect::BMKStringFromMapRect(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            BMKMapRect rect;
            if (rectValue != nil && (NSNull*) rectValue != [NSNull null]) {
              [rectValue getValue:&rect];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"rect不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            NSString* result = BMKStringFromMapRect(rect);
        
            // result
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKCoorDictionaryDecode::BMKCoorDictionaryDecode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKCoorDictionaryDecode::BMKCoorDictionaryDecode(%@)", args);
            }
        
            // args
            // jsonable arg
            NSDictionary* dictionary = (NSDictionary*) args[@"dictionary"];
        
            // ref
        
        
            // invoke native method
            CLLocationCoordinate2D result = BMKCoorDictionaryDecode(dictionary);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
            methodResult(__result__);
        },
        @"BMKGetMapApiVersion::BMKGetMapApiVersion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKGetMapApiVersion::BMKGetMapApiVersion(%@)", args);
            }
        
            // args
        
        
            // ref
        
        
            // invoke native method
            NSString* result = BMKGetMapApiVersion();
        
            // result
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKGetMapApiBaseComponentVersion::BMKGetMapApiBaseComponentVersion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKGetMapApiBaseComponentVersion::BMKGetMapApiBaseComponentVersion(%@)", args);
            }
        
            // args
        
        
            // ref
        
        
            // invoke native method
            NSString* result = BMKGetMapApiBaseComponentVersion();
        
            // result
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKGetMapApiUtilsComponentVersion::BMKGetMapApiUtilsComponentVersion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKGetMapApiUtilsComponentVersion::BMKGetMapApiUtilsComponentVersion(%@)", args);
            }
        
            // args
        
        
            // ref
        
        
            // invoke native method
            NSString* result = BMKGetMapApiUtilsComponentVersion();
        
            // result
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKCheckUtilsComponentIsLegal::BMKCheckUtilsComponentIsLegal": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKCheckUtilsComponentIsLegal::BMKCheckUtilsComponentIsLegal(%@)", args);
            }
        
            // args
        
        
            // ref
        
        
            // invoke native method
            BOOL result = BMKCheckUtilsComponentIsLegal();
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
    };
}

@end
