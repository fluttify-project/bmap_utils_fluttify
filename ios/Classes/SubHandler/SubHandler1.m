//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "SubHandler1.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation BmapUtilsFluttifyPlugin (SubHandler1)
- (NSDictionary<NSString*, Handler>*) getSubHandler1 {
    return @{
        @"BMKMapRectInset::BMKMapRectInset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) HEAP[@([args[@"rect"] integerValue])];
            BMKMapRect rect;
            [rectValue getValue:&rect];
            // jsonable arg
            double dx = [args[@"dx"] doubleValue];
            // jsonable arg
            double dy = [args[@"dy"] doubleValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectInset::BMKMapRectInset(%@, %@, %@)", args[@"rect"], args[@"dx"], args[@"dy"]);
            }
        
            // invoke native method
            BMKMapRect result = BMKMapRectInset(rect, dx, dy);
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(BMKMapRect)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        @"BMKMapRectOffset::BMKMapRectOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) HEAP[@([args[@"rect"] integerValue])];
            BMKMapRect rect;
            [rectValue getValue:&rect];
            // jsonable arg
            double dx = [args[@"dx"] doubleValue];
            // jsonable arg
            double dy = [args[@"dy"] doubleValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectOffset::BMKMapRectOffset(%@, %@, %@)", args[@"rect"], args[@"dx"], args[@"dy"]);
            }
        
            // invoke native method
            BMKMapRect result = BMKMapRectOffset(rect, dx, dy);
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(BMKMapRect)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        @"BMKMapRectContainsPoint::BMKMapRectContainsPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) HEAP[@([args[@"rect"] integerValue])];
            BMKMapRect rect;
            [rectValue getValue:&rect];
            // struct arg
            NSValue* pointValue = (NSValue*) HEAP[@([args[@"point"] integerValue])];
            BMKMapPoint point;
            [pointValue getValue:&point];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectContainsPoint::BMKMapRectContainsPoint(%@, %@)", args[@"rect"], args[@"point"]);
            }
        
            // invoke native method
            BOOL result = BMKMapRectContainsPoint(rect, point);
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"BMKMapRectContainsRect::BMKMapRectContainsRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rect1Value = (NSValue*) HEAP[@([args[@"rect1"] integerValue])];
            BMKMapRect rect1;
            [rect1Value getValue:&rect1];
            // struct arg
            NSValue* rect2Value = (NSValue*) HEAP[@([args[@"rect2"] integerValue])];
            BMKMapRect rect2;
            [rect2Value getValue:&rect2];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectContainsRect::BMKMapRectContainsRect(%@, %@)", args[@"rect1"], args[@"rect2"]);
            }
        
            // invoke native method
            BOOL result = BMKMapRectContainsRect(rect1, rect2);
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"BMKMapRectIntersectsRect::BMKMapRectIntersectsRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rect1Value = (NSValue*) HEAP[@([args[@"rect1"] integerValue])];
            BMKMapRect rect1;
            [rect1Value getValue:&rect1];
            // struct arg
            NSValue* rect2Value = (NSValue*) HEAP[@([args[@"rect2"] integerValue])];
            BMKMapRect rect2;
            [rect2Value getValue:&rect2];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectIntersectsRect::BMKMapRectIntersectsRect(%@, %@)", args[@"rect1"], args[@"rect2"]);
            }
        
            // invoke native method
            BOOL result = BMKMapRectIntersectsRect(rect1, rect2);
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"BMKCoordinateRegionForMapRect::BMKCoordinateRegionForMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) HEAP[@([args[@"rect"] integerValue])];
            BMKMapRect rect;
            [rectValue getValue:&rect];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKCoordinateRegionForMapRect::BMKCoordinateRegionForMapRect(%@)", args[@"rect"]);
            }
        
            // invoke native method
            BMKCoordinateRegion result = BMKCoordinateRegionForMapRect(rect);
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(BMKCoordinateRegion)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        @"BMKMapRectSpans180thMeridian::BMKMapRectSpans180thMeridian": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) HEAP[@([args[@"rect"] integerValue])];
            BMKMapRect rect;
            [rectValue getValue:&rect];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectSpans180thMeridian::BMKMapRectSpans180thMeridian(%@)", args[@"rect"]);
            }
        
            // invoke native method
            BOOL result = BMKMapRectSpans180thMeridian(rect);
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"BMKMapRectRemainder::BMKMapRectRemainder": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) HEAP[@([args[@"rect"] integerValue])];
            BMKMapRect rect;
            [rectValue getValue:&rect];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectRemainder::BMKMapRectRemainder(%@)", args[@"rect"]);
            }
        
            // invoke native method
            BMKMapRect result = BMKMapRectRemainder(rect);
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(BMKMapRect)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        @"BMKCircleContainsPoint::BMKCircleContainsPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* pointValue = (NSValue*) HEAP[@([args[@"point"] integerValue])];
            BMKMapPoint point;
            [pointValue getValue:&point];
            // struct arg
            NSValue* centerValue = (NSValue*) HEAP[@([args[@"center"] integerValue])];
            BMKMapPoint center;
            [centerValue getValue:&center];
            // jsonable arg
            double radius = [args[@"radius"] doubleValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKCircleContainsPoint::BMKCircleContainsPoint(%@, %@, %@)", args[@"point"], args[@"center"], args[@"radius"]);
            }
        
            // invoke native method
            BOOL result = BMKCircleContainsPoint(point, center, radius);
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"BMKCircleContainsCoordinate::BMKCircleContainsCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* pointValue = (NSValue*) HEAP[@([args[@"point"] integerValue])];
            CLLocationCoordinate2D point;
            [pointValue getValue:&point];
            // struct arg
            NSValue* centerValue = (NSValue*) HEAP[@([args[@"center"] integerValue])];
            CLLocationCoordinate2D center;
            [centerValue getValue:&center];
            // jsonable arg
            double radius = [args[@"radius"] doubleValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKCircleContainsCoordinate::BMKCircleContainsCoordinate(%@, %@, %@)", args[@"point"], args[@"center"], args[@"radius"]);
            }
        
            // invoke native method
            BOOL result = BMKCircleContainsCoordinate(point, center, radius);
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"BMKPolygonContainsPoint::BMKPolygonContainsPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* pointValue = (NSValue*) HEAP[@([args[@"point"] integerValue])];
            BMKMapPoint point;
            [pointValue getValue:&point];
            // list arg struct
            NSArray* polygonRefIdArray = (NSArray*) args[@"polygon"];
            BMKMapPoint polygon[polygonRefIdArray.count];
        
            for (int __i__ = 0; __i__ < polygonRefIdArray.count; __i__++) {
                NSValue* polygonValue = (NSValue*) HEAP[[polygonRefIdArray objectAtIndex:__i__]];
                BMKMapPoint polygonItem;
                [polygonValue getValue:&polygonItem];
                polygon[__i__] = polygonItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKPolygonContainsPoint::BMKPolygonContainsPoint(%@, %@, %@)", args[@"point"], args[@"polygon"], args[@"count"]);
            }
        
            // invoke native method
            BOOL result = BMKPolygonContainsPoint(point, polygon, count);
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"BMKPolygonContainsCoordinate::BMKPolygonContainsCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* pointValue = (NSValue*) HEAP[@([args[@"point"] integerValue])];
            CLLocationCoordinate2D point;
            [pointValue getValue:&point];
            // list arg struct
            NSArray* polygonRefIdArray = (NSArray*) args[@"polygon"];
            CLLocationCoordinate2D polygon[polygonRefIdArray.count];
        
            for (int __i__ = 0; __i__ < polygonRefIdArray.count; __i__++) {
                NSValue* polygonValue = (NSValue*) HEAP[[polygonRefIdArray objectAtIndex:__i__]];
                CLLocationCoordinate2D polygonItem;
                [polygonValue getValue:&polygonItem];
                polygon[__i__] = polygonItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKPolygonContainsCoordinate::BMKPolygonContainsCoordinate(%@, %@, %@)", args[@"point"], args[@"polygon"], args[@"count"]);
            }
        
            // invoke native method
            BOOL result = BMKPolygonContainsCoordinate(point, polygon, count);
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"BMKAreaBetweenCoordinates::BMKAreaBetweenCoordinates": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* leftTopValue = (NSValue*) HEAP[@([args[@"leftTop"] integerValue])];
            CLLocationCoordinate2D leftTop;
            [leftTopValue getValue:&leftTop];
            // struct arg
            NSValue* rightBottomValue = (NSValue*) HEAP[@([args[@"rightBottom"] integerValue])];
            CLLocationCoordinate2D rightBottom;
            [rightBottomValue getValue:&rightBottom];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKAreaBetweenCoordinates::BMKAreaBetweenCoordinates(%@, %@)", args[@"leftTop"], args[@"rightBottom"]);
            }
        
            // invoke native method
            double result = BMKAreaBetweenCoordinates(leftTop, rightBottom);
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"BMKAreaForPolygon::BMKAreaForPolygon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // list arg struct
            NSArray* coordinatesRefIdArray = (NSArray*) args[@"coordinates"];
            CLLocationCoordinate2D coordinates[coordinatesRefIdArray.count];
        
            for (int __i__ = 0; __i__ < coordinatesRefIdArray.count; __i__++) {
                NSValue* coordinatesValue = (NSValue*) HEAP[[coordinatesRefIdArray objectAtIndex:__i__]];
                CLLocationCoordinate2D coordinatesItem;
                [coordinatesValue getValue:&coordinatesItem];
                coordinates[__i__] = coordinatesItem;
            }
            // jsonable arg
            int count = [args[@"count"] intValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKAreaForPolygon::BMKAreaForPolygon(%@, %@)", args[@"coordinates"], args[@"count"]);
            }
        
            // invoke native method
            double result = BMKAreaForPolygon(coordinates, count);
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"BMKGetDirectionFromCoords::BMKGetDirectionFromCoords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* startCoordValue = (NSValue*) HEAP[@([args[@"startCoord"] integerValue])];
            CLLocationCoordinate2D startCoord;
            [startCoordValue getValue:&startCoord];
            // struct arg
            NSValue* endCoordValue = (NSValue*) HEAP[@([args[@"endCoord"] integerValue])];
            CLLocationCoordinate2D endCoord;
            [endCoordValue getValue:&endCoord];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKGetDirectionFromCoords::BMKGetDirectionFromCoords(%@, %@)", args[@"startCoord"], args[@"endCoord"]);
            }
        
            // invoke native method
            CLLocationDirection result = BMKGetDirectionFromCoords(startCoord, endCoord);
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"BMKGetDirectionFromPoints::BMKGetDirectionFromPoints": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* startPtValue = (NSValue*) HEAP[@([args[@"startPt"] integerValue])];
            BMKMapPoint startPt;
            [startPtValue getValue:&startPt];
            // struct arg
            NSValue* endPtValue = (NSValue*) HEAP[@([args[@"endPt"] integerValue])];
            BMKMapPoint endPt;
            [endPtValue getValue:&endPt];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKGetDirectionFromPoints::BMKGetDirectionFromPoints(%@, %@)", args[@"startPt"], args[@"endPt"]);
            }
        
            // invoke native method
            CLLocationDirection result = BMKGetDirectionFromPoints(startPt, endPt);
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"BMKCoorDictionaryDecode::BMKCoorDictionaryDecode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSDictionary* dictionary = (NSDictionary*) args[@"dictionary"];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKCoorDictionaryDecode::BMKCoorDictionaryDecode(%@)", args[@"dictionary"]);
            }
        
            // invoke native method
            CLLocationCoordinate2D result = BMKCoorDictionaryDecode(dictionary);
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
    };
}

@end
