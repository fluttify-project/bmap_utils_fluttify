//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "SubHandler1.h"
#import "FluttifyMessageCodec.h"
#import <BaiduMapAPI_Utils/BMKUtilsComponent.h>
#import <BaiduMapAPI_Base/BMKBaseComponent.h>

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSString*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation BmapUtilsFluttifyPlugin (SubHandler1)
- (NSDictionary<NSString*, Handler>*) getSubHandler1 {
    __weak __typeof(self)weakSelf = self;
    return @{
        @"BMKFavPoiInfo::set_favId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKFavPoiInfo::set_favId");
            }
        
            // args
            // jsonable arg
            NSString* favId = (NSString*) args[@"favId"];
        
            // ref
            BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.favId = favId;
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_poiName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKFavPoiInfo::set_poiName");
            }
        
            // args
            // jsonable arg
            NSString* poiName = (NSString*) args[@"poiName"];
        
            // ref
            BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.poiName = poiName;
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_poiUid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKFavPoiInfo::set_poiUid");
            }
        
            // args
            // jsonable arg
            NSString* poiUid = (NSString*) args[@"poiUid"];
        
            // ref
            BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.poiUid = poiUid;
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_pt": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKFavPoiInfo::set_pt");
            }
        
            // args
            // struct arg
            NSValue* ptValue = (NSValue*) args[@"pt"];
            CLLocationCoordinate2D pt;
            if (ptValue != nil && (NSNull*) ptValue != [NSNull null]) {
              [ptValue getValue:&pt];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"pt不能为null"]);
              return;
            }
        
        
            // ref
            BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.pt = pt;
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_address": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKFavPoiInfo::set_address");
            }
        
            // args
            // jsonable arg
            NSString* address = (NSString*) args[@"address"];
        
            // ref
            BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.address = address;
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_cityName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKFavPoiInfo::set_cityName");
            }
        
            // args
            // jsonable arg
            NSString* cityName = (NSString*) args[@"cityName"];
        
            // ref
            BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.cityName = cityName;
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_timeStamp": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKFavPoiInfo::set_timeStamp");
            }
        
            // args
            // jsonable arg
            NSUInteger timeStamp = [args[@"timeStamp"] unsignedIntegerValue];
        
            // ref
            BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.timeStamp = timeStamp;
            methodResult(@"success");
        },
        
        @"BMKUserLocation::set_updating": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKUserLocation::set_updating");
            }
        
            // args
            // jsonable arg
            BOOL updating = [args[@"updating"] boolValue];
        
            // ref
            BMKUserLocation* ref = (BMKUserLocation*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.updating = updating;
            methodResult(@"success");
        },
        
        @"BMKUserLocation::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKUserLocation::set_location");
            }
        
            // args
            // ref arg
            CLLocation* location = (CLLocation*) (args[@"location"] == [NSNull null] ? nil : args[@"location"]);
        
            // ref
            BMKUserLocation* ref = (BMKUserLocation*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.location = location;
            methodResult(@"success");
        },
        
        @"BMKUserLocation::set_heading": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKUserLocation::set_heading");
            }
        
            // args
            // ref arg
            CLHeading* heading = (CLHeading*) (args[@"heading"] == [NSNull null] ? nil : args[@"heading"]);
        
            // ref
            BMKUserLocation* ref = (BMKUserLocation*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.heading = heading;
            methodResult(@"success");
        },
        
        @"BMKUserLocation::set_title": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKUserLocation::set_title");
            }
        
            // args
            // jsonable arg
            NSString* title = (NSString*) args[@"title"];
        
            // ref
            BMKUserLocation* ref = (BMKUserLocation*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.title = title;
            methodResult(@"success");
        },
        
        @"BMKUserLocation::set_subtitle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKUserLocation::set_subtitle");
            }
        
            // args
            // jsonable arg
            NSString* subtitle = (NSString*) args[@"subtitle"];
        
            // ref
            BMKUserLocation* ref = (BMKUserLocation*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.subtitle = subtitle;
            methodResult(@"success");
        },
        
        @"BMKOpenPanoramaOption::set_poiUid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenPanoramaOption::set_poiUid");
            }
        
            // args
            // jsonable arg
            NSString* poiUid = (NSString*) args[@"poiUid"];
        
            // ref
            BMKOpenPanoramaOption* ref = (BMKOpenPanoramaOption*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.poiUid = poiUid;
            methodResult(@"success");
        },
        
        @"BMKMapPoint::set_x": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapPoint::set_x");
            }
        
            // args
            // jsonable arg
            double x = [args[@"x"] doubleValue];
        
            // ref
            NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
            BMKMapPoint ref;
            [dataValue getValue:&ref];
        
            ref.x = x;
            methodResult(@"success");
        },
        
        @"BMKMapPoint::set_y": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapPoint::set_y");
            }
        
            // args
            // jsonable arg
            double y = [args[@"y"] doubleValue];
        
            // ref
            NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
            BMKMapPoint ref;
            [dataValue getValue:&ref];
        
            ref.y = y;
            methodResult(@"success");
        },
        
        @"BMKMapRect::set_origin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapRect::set_origin");
            }
        
            // args
            // struct arg
            NSValue* originValue = (NSValue*) args[@"origin"];
            BMKMapPoint origin;
            if (originValue != nil && (NSNull*) originValue != [NSNull null]) {
              [originValue getValue:&origin];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"origin不能为null"]);
              return;
            }
        
        
            // ref
            NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
            BMKMapRect ref;
            [dataValue getValue:&ref];
        
            ref.origin = origin;
            methodResult(@"success");
        },
        
        @"BMKMapRect::set_size": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapRect::set_size");
            }
        
            // args
            // struct arg
            NSValue* sizeValue = (NSValue*) args[@"size"];
            BMKMapSize size;
            if (sizeValue != nil && (NSNull*) sizeValue != [NSNull null]) {
              [sizeValue getValue:&size];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"size不能为null"]);
              return;
            }
        
        
            // ref
            NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
            BMKMapRect ref;
            [dataValue getValue:&ref];
        
            ref.size = size;
            methodResult(@"success");
        },
        
        @"BMKCoordinateSpan::set_latitudeDelta": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKCoordinateSpan::set_latitudeDelta");
            }
        
            // args
            // jsonable arg
            CLLocationDegrees latitudeDelta = [args[@"latitudeDelta"] doubleValue];
        
            // ref
            NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
            BMKCoordinateSpan ref;
            [dataValue getValue:&ref];
        
            ref.latitudeDelta = latitudeDelta;
            methodResult(@"success");
        },
        
        @"BMKCoordinateSpan::set_longitudeDelta": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKCoordinateSpan::set_longitudeDelta");
            }
        
            // args
            // jsonable arg
            CLLocationDegrees longitudeDelta = [args[@"longitudeDelta"] doubleValue];
        
            // ref
            NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
            BMKCoordinateSpan ref;
            [dataValue getValue:&ref];
        
            ref.longitudeDelta = longitudeDelta;
            methodResult(@"success");
        },
        
        @"BMKIndoorPlanNode::set_floor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKIndoorPlanNode::set_floor");
            }
        
            // args
            // jsonable arg
            NSString* floor = (NSString*) args[@"floor"];
        
            // ref
            BMKIndoorPlanNode* ref = (BMKIndoorPlanNode*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.floor = floor;
            methodResult(@"success");
        },
        
        @"BMKIndoorPlanNode::set_pt": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKIndoorPlanNode::set_pt");
            }
        
            // args
            // struct arg
            NSValue* ptValue = (NSValue*) args[@"pt"];
            CLLocationCoordinate2D pt;
            if (ptValue != nil && (NSNull*) ptValue != [NSNull null]) {
              [ptValue getValue:&pt];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"pt不能为null"]);
              return;
            }
        
        
            // ref
            BMKIndoorPlanNode* ref = (BMKIndoorPlanNode*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.pt = pt;
            methodResult(@"success");
        },
        
        @"BMKOpenRouteOption::set_startPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenRouteOption::set_startPoint");
            }
        
            // args
            // ref arg
            BMKPlanNode* startPoint = (BMKPlanNode*) (args[@"startPoint"] == [NSNull null] ? nil : args[@"startPoint"]);
        
            // ref
            BMKOpenRouteOption* ref = (BMKOpenRouteOption*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.startPoint = startPoint;
            methodResult(@"success");
        },
        
        @"BMKOpenRouteOption::set_endPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenRouteOption::set_endPoint");
            }
        
            // args
            // ref arg
            BMKPlanNode* endPoint = (BMKPlanNode*) (args[@"endPoint"] == [NSNull null] ? nil : args[@"endPoint"]);
        
            // ref
            BMKOpenRouteOption* ref = (BMKOpenRouteOption*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.endPoint = endPoint;
            methodResult(@"success");
        },
        
        @"BMKOpenPoiNearbyOption::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenPoiNearbyOption::set_location");
            }
        
            // args
            // struct arg
            NSValue* locationValue = (NSValue*) args[@"location"];
            CLLocationCoordinate2D location;
            if (locationValue != nil && (NSNull*) locationValue != [NSNull null]) {
              [locationValue getValue:&location];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"location不能为null"]);
              return;
            }
        
        
            // ref
            BMKOpenPoiNearbyOption* ref = (BMKOpenPoiNearbyOption*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.location = location;
            methodResult(@"success");
        },
        
        @"BMKOpenPoiNearbyOption::set_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenPoiNearbyOption::set_radius");
            }
        
            // args
            // jsonable arg
            NSUInteger radius = [args[@"radius"] unsignedIntegerValue];
        
            // ref
            BMKOpenPoiNearbyOption* ref = (BMKOpenPoiNearbyOption*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.radius = radius;
            methodResult(@"success");
        },
        
        @"BMKOpenPoiNearbyOption::set_keyword": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenPoiNearbyOption::set_keyword");
            }
        
            // args
            // jsonable arg
            NSString* keyword = (NSString*) args[@"keyword"];
        
            // ref
            BMKOpenPoiNearbyOption* ref = (BMKOpenPoiNearbyOption*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.keyword = keyword;
            methodResult(@"success");
        },
        
        @"BMKNaviPara::set_startPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKNaviPara::set_startPoint");
            }
        
            // args
            // ref arg
            BMKPlanNode* startPoint = (BMKPlanNode*) (args[@"startPoint"] == [NSNull null] ? nil : args[@"startPoint"]);
        
            // ref
            BMKNaviPara* ref = (BMKNaviPara*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.startPoint = startPoint;
            methodResult(@"success");
        },
        
        @"BMKNaviPara::set_endPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKNaviPara::set_endPoint");
            }
        
            // args
            // ref arg
            BMKPlanNode* endPoint = (BMKPlanNode*) (args[@"endPoint"] == [NSNull null] ? nil : args[@"endPoint"]);
        
            // ref
            BMKNaviPara* ref = (BMKNaviPara*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.endPoint = endPoint;
            methodResult(@"success");
        },
        
        @"BMKNaviPara::set_naviType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKNaviPara::set_naviType");
            }
        
            // args
            // enum arg
            BMK_NAVI_TYPE naviType = (BMK_NAVI_TYPE) [args[@"naviType"] integerValue];
        
            // ref
            BMKNaviPara* ref = (BMKNaviPara*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.naviType = naviType;
            methodResult(@"success");
        },
        
        @"BMKNaviPara::set_appScheme": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKNaviPara::set_appScheme");
            }
        
            // args
            // jsonable arg
            NSString* appScheme = (NSString*) args[@"appScheme"];
        
            // ref
            BMKNaviPara* ref = (BMKNaviPara*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.appScheme = appScheme;
            methodResult(@"success");
        },
        
        @"BMKNaviPara::set_appName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKNaviPara::set_appName");
            }
        
            // args
            // jsonable arg
            NSString* appName = (NSString*) args[@"appName"];
        
            // ref
            BMKNaviPara* ref = (BMKNaviPara*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.appName = appName;
            methodResult(@"success");
        },
        
        @"BMKNaviPara::set_isSupportWeb": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKNaviPara::set_isSupportWeb");
            }
        
            // args
            // jsonable arg
            BOOL isSupportWeb = [args[@"isSupportWeb"] boolValue];
        
            // ref
            BMKNaviPara* ref = (BMKNaviPara*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.isSupportWeb = isSupportWeb;
            methodResult(@"success");
        },
        
        @"BMKCoordinateBounds::set_northEast": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKCoordinateBounds::set_northEast");
            }
        
            // args
            // struct arg
            NSValue* northEastValue = (NSValue*) args[@"northEast"];
            CLLocationCoordinate2D northEast;
            if (northEastValue != nil && (NSNull*) northEastValue != [NSNull null]) {
              [northEastValue getValue:&northEast];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"northEast不能为null"]);
              return;
            }
        
        
            // ref
            NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
            BMKCoordinateBounds ref;
            [dataValue getValue:&ref];
        
            ref.northEast = northEast;
            methodResult(@"success");
        },
        
        @"BMKCoordinateBounds::set_southWest": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKCoordinateBounds::set_southWest");
            }
        
            // args
            // struct arg
            NSValue* southWestValue = (NSValue*) args[@"southWest"];
            CLLocationCoordinate2D southWest;
            if (southWestValue != nil && (NSNull*) southWestValue != [NSNull null]) {
              [southWestValue getValue:&southWest];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"southWest不能为null"]);
              return;
            }
        
        
            // ref
            NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
            BMKCoordinateBounds ref;
            [dataValue getValue:&ref];
        
            ref.southWest = southWest;
            methodResult(@"success");
        },
        
        @"BMKMapSize::set_width": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapSize::set_width");
            }
        
            // args
            // jsonable arg
            double width = [args[@"width"] doubleValue];
        
            // ref
            NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
            BMKMapSize ref;
            [dataValue getValue:&ref];
        
            ref.width = width;
            methodResult(@"success");
        },
        
        @"BMKMapSize::set_height": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKMapSize::set_height");
            }
        
            // args
            // jsonable arg
            double height = [args[@"height"] doubleValue];
        
            // ref
            NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
            BMKMapSize ref;
            [dataValue getValue:&ref];
        
            ref.height = height;
            methodResult(@"success");
        },
        
        @"BMKCoordinateRegion::set_center": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKCoordinateRegion::set_center");
            }
        
            // args
            // struct arg
            NSValue* centerValue = (NSValue*) args[@"center"];
            CLLocationCoordinate2D center;
            if (centerValue != nil && (NSNull*) centerValue != [NSNull null]) {
              [centerValue getValue:&center];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"center不能为null"]);
              return;
            }
        
        
            // ref
            NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
            BMKCoordinateRegion ref;
            [dataValue getValue:&ref];
        
            ref.center = center;
            methodResult(@"success");
        },
        
        @"BMKCoordinateRegion::set_span": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKCoordinateRegion::set_span");
            }
        
            // args
            // struct arg
            NSValue* spanValue = (NSValue*) args[@"span"];
            BMKCoordinateSpan span;
            if (spanValue != nil && (NSNull*) spanValue != [NSNull null]) {
              [spanValue getValue:&span];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"span不能为null"]);
              return;
            }
        
        
            // ref
            NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
            BMKCoordinateRegion ref;
            [dataValue getValue:&ref];
        
            ref.span = span;
            methodResult(@"success");
        },
        
        @"BMKGeoPoint::set_latitudeE6": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKGeoPoint::set_latitudeE6");
            }
        
            // args
            // jsonable arg
            int latitudeE6 = [args[@"latitudeE6"] intValue];
        
            // ref
            NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
            BMKGeoPoint ref;
            [dataValue getValue:&ref];
        
            ref.latitudeE6 = latitudeE6;
            methodResult(@"success");
        },
        
        @"BMKGeoPoint::set_longitudeE6": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKGeoPoint::set_longitudeE6");
            }
        
            // args
            // jsonable arg
            int longitudeE6 = [args[@"longitudeE6"] intValue];
        
            // ref
            NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
            BMKGeoPoint ref;
            [dataValue getValue:&ref];
        
            ref.longitudeE6 = longitudeE6;
            methodResult(@"success");
        },
        
        @"BMKAddressComponent::set_country": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAddressComponent::set_country");
            }
        
            // args
            // jsonable arg
            NSString* country = (NSString*) args[@"country"];
        
            // ref
            BMKAddressComponent* ref = (BMKAddressComponent*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.country = country;
            methodResult(@"success");
        },
        
        @"BMKAddressComponent::set_province": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAddressComponent::set_province");
            }
        
            // args
            // jsonable arg
            NSString* province = (NSString*) args[@"province"];
        
            // ref
            BMKAddressComponent* ref = (BMKAddressComponent*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.province = province;
            methodResult(@"success");
        },
        
        @"BMKAddressComponent::set_city": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAddressComponent::set_city");
            }
        
            // args
            // jsonable arg
            NSString* city = (NSString*) args[@"city"];
        
            // ref
            BMKAddressComponent* ref = (BMKAddressComponent*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.city = city;
            methodResult(@"success");
        },
        
        @"BMKAddressComponent::set_district": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAddressComponent::set_district");
            }
        
            // args
            // jsonable arg
            NSString* district = (NSString*) args[@"district"];
        
            // ref
            BMKAddressComponent* ref = (BMKAddressComponent*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.district = district;
            methodResult(@"success");
        },
        
        @"BMKAddressComponent::set_town": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAddressComponent::set_town");
            }
        
            // args
            // jsonable arg
            NSString* town = (NSString*) args[@"town"];
        
            // ref
            BMKAddressComponent* ref = (BMKAddressComponent*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.town = town;
            methodResult(@"success");
        },
        
        @"BMKAddressComponent::set_streetName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAddressComponent::set_streetName");
            }
        
            // args
            // jsonable arg
            NSString* streetName = (NSString*) args[@"streetName"];
        
            // ref
            BMKAddressComponent* ref = (BMKAddressComponent*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.streetName = streetName;
            methodResult(@"success");
        },
        
        @"BMKAddressComponent::set_streetNumber": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAddressComponent::set_streetNumber");
            }
        
            // args
            // jsonable arg
            NSString* streetNumber = (NSString*) args[@"streetNumber"];
        
            // ref
            BMKAddressComponent* ref = (BMKAddressComponent*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.streetNumber = streetNumber;
            methodResult(@"success");
        },
        
        @"BMKAddressComponent::set_adCode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAddressComponent::set_adCode");
            }
        
            // args
            // jsonable arg
            NSString* adCode = (NSString*) args[@"adCode"];
        
            // ref
            BMKAddressComponent* ref = (BMKAddressComponent*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.adCode = adCode;
            methodResult(@"success");
        },
        
        @"BMKAddressComponent::set_countryCode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAddressComponent::set_countryCode");
            }
        
            // args
            // jsonable arg
            NSString* countryCode = (NSString*) args[@"countryCode"];
        
            // ref
            BMKAddressComponent* ref = (BMKAddressComponent*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.countryCode = countryCode;
            methodResult(@"success");
        },
        
        @"BMKAddressComponent::set_countryCodeISO": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAddressComponent::set_countryCodeISO");
            }
        
            // args
            // jsonable arg
            NSString* countryCodeISO = (NSString*) args[@"countryCodeISO"];
        
            // ref
            BMKAddressComponent* ref = (BMKAddressComponent*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.countryCodeISO = countryCodeISO;
            methodResult(@"success");
        },
        
        @"BMKAddressComponent::set_countryCodeISO2": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAddressComponent::set_countryCodeISO2");
            }
        
            // args
            // jsonable arg
            NSString* countryCodeISO2 = (NSString*) args[@"countryCodeISO2"];
        
            // ref
            BMKAddressComponent* ref = (BMKAddressComponent*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.countryCodeISO2 = countryCodeISO2;
            methodResult(@"success");
        },
        
        @"BMKAddressComponent::set_townCode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAddressComponent::set_townCode");
            }
        
            // args
            // jsonable arg
            NSString* townCode = (NSString*) args[@"townCode"];
        
            // ref
            BMKAddressComponent* ref = (BMKAddressComponent*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.townCode = townCode;
            methodResult(@"success");
        },
        
        @"BMKAddressComponent::set_cityLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAddressComponent::set_cityLevel");
            }
        
            // args
            // jsonable arg
            NSString* cityLevel = (NSString*) args[@"cityLevel"];
        
            // ref
            BMKAddressComponent* ref = (BMKAddressComponent*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.cityLevel = cityLevel;
            methodResult(@"success");
        },
        
        @"BMKAddressComponent::set_direction": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAddressComponent::set_direction");
            }
        
            // args
            // jsonable arg
            NSString* direction = (NSString*) args[@"direction"];
        
            // ref
            BMKAddressComponent* ref = (BMKAddressComponent*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.direction = direction;
            methodResult(@"success");
        },
        
        @"BMKAddressComponent::set_distance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKAddressComponent::set_distance");
            }
        
            // args
            // jsonable arg
            NSString* distance = (NSString*) args[@"distance"];
        
            // ref
            BMKAddressComponent* ref = (BMKAddressComponent*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.distance = distance;
            methodResult(@"success");
        },
        
        @"BMKOpenTransitRouteOption::set_openTransitPolicy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenTransitRouteOption::set_openTransitPolicy");
            }
        
            // args
            // enum arg
            BMKOpenTransitPolicy openTransitPolicy = (BMKOpenTransitPolicy) [args[@"openTransitPolicy"] integerValue];
        
            // ref
            BMKOpenTransitRouteOption* ref = (BMKOpenTransitRouteOption*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.openTransitPolicy = openTransitPolicy;
            methodResult(@"success");
        },
        
        @"BMKPlanNode::set_cityName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKPlanNode::set_cityName");
            }
        
            // args
            // jsonable arg
            NSString* cityName = (NSString*) args[@"cityName"];
        
            // ref
            BMKPlanNode* ref = (BMKPlanNode*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.cityName = cityName;
            methodResult(@"success");
        },
        
        @"BMKPlanNode::set_cityID": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKPlanNode::set_cityID");
            }
        
            // args
            // jsonable arg
            NSInteger cityID = [args[@"cityID"] longValue];
        
            // ref
            BMKPlanNode* ref = (BMKPlanNode*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.cityID = cityID;
            methodResult(@"success");
        },
        
        @"BMKPlanNode::set_name": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKPlanNode::set_name");
            }
        
            // args
            // jsonable arg
            NSString* name = (NSString*) args[@"name"];
        
            // ref
            BMKPlanNode* ref = (BMKPlanNode*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.name = name;
            methodResult(@"success");
        },
        
        @"BMKPlanNode::set_pt": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKPlanNode::set_pt");
            }
        
            // args
            // struct arg
            NSValue* ptValue = (NSValue*) args[@"pt"];
            CLLocationCoordinate2D pt;
            if (ptValue != nil && (NSNull*) ptValue != [NSNull null]) {
              [ptValue getValue:&pt];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"pt不能为null"]);
              return;
            }
        
        
            // ref
            BMKPlanNode* ref = (BMKPlanNode*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.pt = pt;
            methodResult(@"success");
        },
        
        @"BMKOpenPoiDetailOption::set_poiUid_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* poiUid = (NSString*) args[@"poiUid"];
        
                // ref
                BMKOpenPoiDetailOption* ref = (BMKOpenPoiDetailOption*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.poiUid = poiUid;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOpenOption::set_appScheme_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* appScheme = (NSString*) args[@"appScheme"];
        
                // ref
                BMKOpenOption* ref = (BMKOpenOption*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.appScheme = appScheme;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOpenOption::set_isSupportWeb_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL isSupportWeb = [args[@"isSupportWeb"] boolValue];
        
                // ref
                BMKOpenOption* ref = (BMKOpenOption*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.isSupportWeb = isSupportWeb;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_favId_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* favId = (NSString*) args[@"favId"];
        
                // ref
                BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.favId = favId;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_poiName_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* poiName = (NSString*) args[@"poiName"];
        
                // ref
                BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.poiName = poiName;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_poiUid_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* poiUid = (NSString*) args[@"poiUid"];
        
                // ref
                BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.poiUid = poiUid;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_pt_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* ptValue = (NSValue*) args[@"pt"];
                CLLocationCoordinate2D pt;
                if (ptValue != nil && (NSNull*) ptValue != [NSNull null]) {
                  [ptValue getValue:&pt];
                } else {
                  methodResult([FlutterError errorWithCode:@"参数非法"
                                                   message:@"参数非法"
                                                   details:@"pt不能为null"]);
                  return;
                }
        
        
                // ref
                BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.pt = pt;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_address_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* address = (NSString*) args[@"address"];
        
                // ref
                BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.address = address;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_cityName_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* cityName = (NSString*) args[@"cityName"];
        
                // ref
                BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.cityName = cityName;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_timeStamp_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSUInteger timeStamp = [args[@"timeStamp"] unsignedIntegerValue];
        
                // ref
                BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.timeStamp = timeStamp;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKUserLocation::set_updating_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL updating = [args[@"updating"] boolValue];
        
                // ref
                BMKUserLocation* ref = (BMKUserLocation*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.updating = updating;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKUserLocation::set_location_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                CLLocation* location = (CLLocation*) (args[@"location"] == [NSNull null] ? nil : args[@"location"]);
        
                // ref
                BMKUserLocation* ref = (BMKUserLocation*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.location = location;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKUserLocation::set_heading_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                CLHeading* heading = (CLHeading*) (args[@"heading"] == [NSNull null] ? nil : args[@"heading"]);
        
                // ref
                BMKUserLocation* ref = (BMKUserLocation*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.heading = heading;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKUserLocation::set_title_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* title = (NSString*) args[@"title"];
        
                // ref
                BMKUserLocation* ref = (BMKUserLocation*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.title = title;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKUserLocation::set_subtitle_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* subtitle = (NSString*) args[@"subtitle"];
        
                // ref
                BMKUserLocation* ref = (BMKUserLocation*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.subtitle = subtitle;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOpenPanoramaOption::set_poiUid_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* poiUid = (NSString*) args[@"poiUid"];
        
                // ref
                BMKOpenPanoramaOption* ref = (BMKOpenPanoramaOption*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.poiUid = poiUid;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapPoint::set_x_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                double x = [args[@"x"] doubleValue];
        
                // ref
                NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
                BMKMapPoint ref;
                [dataValue getValue:&ref];
        
                ref.x = x;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapPoint::set_y_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                double y = [args[@"y"] doubleValue];
        
                // ref
                NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
                BMKMapPoint ref;
                [dataValue getValue:&ref];
        
                ref.y = y;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapRect::set_origin_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* originValue = (NSValue*) args[@"origin"];
                BMKMapPoint origin;
                if (originValue != nil && (NSNull*) originValue != [NSNull null]) {
                  [originValue getValue:&origin];
                } else {
                  methodResult([FlutterError errorWithCode:@"参数非法"
                                                   message:@"参数非法"
                                                   details:@"origin不能为null"]);
                  return;
                }
        
        
                // ref
                NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
                BMKMapRect ref;
                [dataValue getValue:&ref];
        
                ref.origin = origin;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapRect::set_size_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* sizeValue = (NSValue*) args[@"size"];
                BMKMapSize size;
                if (sizeValue != nil && (NSNull*) sizeValue != [NSNull null]) {
                  [sizeValue getValue:&size];
                } else {
                  methodResult([FlutterError errorWithCode:@"参数非法"
                                                   message:@"参数非法"
                                                   details:@"size不能为null"]);
                  return;
                }
        
        
                // ref
                NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
                BMKMapRect ref;
                [dataValue getValue:&ref];
        
                ref.size = size;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKCoordinateSpan::set_latitudeDelta_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CLLocationDegrees latitudeDelta = [args[@"latitudeDelta"] doubleValue];
        
                // ref
                NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
                BMKCoordinateSpan ref;
                [dataValue getValue:&ref];
        
                ref.latitudeDelta = latitudeDelta;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKCoordinateSpan::set_longitudeDelta_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                CLLocationDegrees longitudeDelta = [args[@"longitudeDelta"] doubleValue];
        
                // ref
                NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
                BMKCoordinateSpan ref;
                [dataValue getValue:&ref];
        
                ref.longitudeDelta = longitudeDelta;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKIndoorPlanNode::set_floor_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* floor = (NSString*) args[@"floor"];
        
                // ref
                BMKIndoorPlanNode* ref = (BMKIndoorPlanNode*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.floor = floor;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKIndoorPlanNode::set_pt_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* ptValue = (NSValue*) args[@"pt"];
                CLLocationCoordinate2D pt;
                if (ptValue != nil && (NSNull*) ptValue != [NSNull null]) {
                  [ptValue getValue:&pt];
                } else {
                  methodResult([FlutterError errorWithCode:@"参数非法"
                                                   message:@"参数非法"
                                                   details:@"pt不能为null"]);
                  return;
                }
        
        
                // ref
                BMKIndoorPlanNode* ref = (BMKIndoorPlanNode*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.pt = pt;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOpenRouteOption::set_startPoint_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKPlanNode* startPoint = (BMKPlanNode*) (args[@"startPoint"] == [NSNull null] ? nil : args[@"startPoint"]);
        
                // ref
                BMKOpenRouteOption* ref = (BMKOpenRouteOption*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.startPoint = startPoint;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOpenRouteOption::set_endPoint_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKPlanNode* endPoint = (BMKPlanNode*) (args[@"endPoint"] == [NSNull null] ? nil : args[@"endPoint"]);
        
                // ref
                BMKOpenRouteOption* ref = (BMKOpenRouteOption*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.endPoint = endPoint;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOpenPoiNearbyOption::set_location_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* locationValue = (NSValue*) args[@"location"];
                CLLocationCoordinate2D location;
                if (locationValue != nil && (NSNull*) locationValue != [NSNull null]) {
                  [locationValue getValue:&location];
                } else {
                  methodResult([FlutterError errorWithCode:@"参数非法"
                                                   message:@"参数非法"
                                                   details:@"location不能为null"]);
                  return;
                }
        
        
                // ref
                BMKOpenPoiNearbyOption* ref = (BMKOpenPoiNearbyOption*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.location = location;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOpenPoiNearbyOption::set_radius_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSUInteger radius = [args[@"radius"] unsignedIntegerValue];
        
                // ref
                BMKOpenPoiNearbyOption* ref = (BMKOpenPoiNearbyOption*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.radius = radius;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOpenPoiNearbyOption::set_keyword_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* keyword = (NSString*) args[@"keyword"];
        
                // ref
                BMKOpenPoiNearbyOption* ref = (BMKOpenPoiNearbyOption*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.keyword = keyword;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKNaviPara::set_startPoint_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKPlanNode* startPoint = (BMKPlanNode*) (args[@"startPoint"] == [NSNull null] ? nil : args[@"startPoint"]);
        
                // ref
                BMKNaviPara* ref = (BMKNaviPara*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.startPoint = startPoint;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKNaviPara::set_endPoint_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKPlanNode* endPoint = (BMKPlanNode*) (args[@"endPoint"] == [NSNull null] ? nil : args[@"endPoint"]);
        
                // ref
                BMKNaviPara* ref = (BMKNaviPara*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.endPoint = endPoint;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKNaviPara::set_naviType_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                BMK_NAVI_TYPE naviType = (BMK_NAVI_TYPE) [args[@"naviType"] integerValue];
        
                // ref
                BMKNaviPara* ref = (BMKNaviPara*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.naviType = naviType;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKNaviPara::set_appScheme_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* appScheme = (NSString*) args[@"appScheme"];
        
                // ref
                BMKNaviPara* ref = (BMKNaviPara*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.appScheme = appScheme;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKNaviPara::set_appName_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* appName = (NSString*) args[@"appName"];
        
                // ref
                BMKNaviPara* ref = (BMKNaviPara*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.appName = appName;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKNaviPara::set_isSupportWeb_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL isSupportWeb = [args[@"isSupportWeb"] boolValue];
        
                // ref
                BMKNaviPara* ref = (BMKNaviPara*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.isSupportWeb = isSupportWeb;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKCoordinateBounds::set_northEast_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* northEastValue = (NSValue*) args[@"northEast"];
                CLLocationCoordinate2D northEast;
                if (northEastValue != nil && (NSNull*) northEastValue != [NSNull null]) {
                  [northEastValue getValue:&northEast];
                } else {
                  methodResult([FlutterError errorWithCode:@"参数非法"
                                                   message:@"参数非法"
                                                   details:@"northEast不能为null"]);
                  return;
                }
        
        
                // ref
                NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
                BMKCoordinateBounds ref;
                [dataValue getValue:&ref];
        
                ref.northEast = northEast;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKCoordinateBounds::set_southWest_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* southWestValue = (NSValue*) args[@"southWest"];
                CLLocationCoordinate2D southWest;
                if (southWestValue != nil && (NSNull*) southWestValue != [NSNull null]) {
                  [southWestValue getValue:&southWest];
                } else {
                  methodResult([FlutterError errorWithCode:@"参数非法"
                                                   message:@"参数非法"
                                                   details:@"southWest不能为null"]);
                  return;
                }
        
        
                // ref
                NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
                BMKCoordinateBounds ref;
                [dataValue getValue:&ref];
        
                ref.southWest = southWest;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapSize::set_width_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                double width = [args[@"width"] doubleValue];
        
                // ref
                NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
                BMKMapSize ref;
                [dataValue getValue:&ref];
        
                ref.width = width;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKMapSize::set_height_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                double height = [args[@"height"] doubleValue];
        
                // ref
                NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
                BMKMapSize ref;
                [dataValue getValue:&ref];
        
                ref.height = height;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKCoordinateRegion::set_center_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* centerValue = (NSValue*) args[@"center"];
                CLLocationCoordinate2D center;
                if (centerValue != nil && (NSNull*) centerValue != [NSNull null]) {
                  [centerValue getValue:&center];
                } else {
                  methodResult([FlutterError errorWithCode:@"参数非法"
                                                   message:@"参数非法"
                                                   details:@"center不能为null"]);
                  return;
                }
        
        
                // ref
                NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
                BMKCoordinateRegion ref;
                [dataValue getValue:&ref];
        
                ref.center = center;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKCoordinateRegion::set_span_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* spanValue = (NSValue*) args[@"span"];
                BMKCoordinateSpan span;
                if (spanValue != nil && (NSNull*) spanValue != [NSNull null]) {
                  [spanValue getValue:&span];
                } else {
                  methodResult([FlutterError errorWithCode:@"参数非法"
                                                   message:@"参数非法"
                                                   details:@"span不能为null"]);
                  return;
                }
        
        
                // ref
                NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
                BMKCoordinateRegion ref;
                [dataValue getValue:&ref];
        
                ref.span = span;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKGeoPoint::set_latitudeE6_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int latitudeE6 = [args[@"latitudeE6"] intValue];
        
                // ref
                NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
                BMKGeoPoint ref;
                [dataValue getValue:&ref];
        
                ref.latitudeE6 = latitudeE6;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKGeoPoint::set_longitudeE6_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                int longitudeE6 = [args[@"longitudeE6"] intValue];
        
                // ref
                NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
                BMKGeoPoint ref;
                [dataValue getValue:&ref];
        
                ref.longitudeE6 = longitudeE6;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKAddressComponent::set_country_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* country = (NSString*) args[@"country"];
        
                // ref
                BMKAddressComponent* ref = (BMKAddressComponent*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.country = country;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKAddressComponent::set_province_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* province = (NSString*) args[@"province"];
        
                // ref
                BMKAddressComponent* ref = (BMKAddressComponent*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.province = province;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKAddressComponent::set_city_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* city = (NSString*) args[@"city"];
        
                // ref
                BMKAddressComponent* ref = (BMKAddressComponent*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.city = city;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKAddressComponent::set_district_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* district = (NSString*) args[@"district"];
        
                // ref
                BMKAddressComponent* ref = (BMKAddressComponent*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.district = district;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKAddressComponent::set_town_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* town = (NSString*) args[@"town"];
        
                // ref
                BMKAddressComponent* ref = (BMKAddressComponent*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.town = town;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKAddressComponent::set_streetName_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* streetName = (NSString*) args[@"streetName"];
        
                // ref
                BMKAddressComponent* ref = (BMKAddressComponent*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.streetName = streetName;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKAddressComponent::set_streetNumber_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* streetNumber = (NSString*) args[@"streetNumber"];
        
                // ref
                BMKAddressComponent* ref = (BMKAddressComponent*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.streetNumber = streetNumber;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKAddressComponent::set_adCode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* adCode = (NSString*) args[@"adCode"];
        
                // ref
                BMKAddressComponent* ref = (BMKAddressComponent*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.adCode = adCode;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKAddressComponent::set_countryCode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* countryCode = (NSString*) args[@"countryCode"];
        
                // ref
                BMKAddressComponent* ref = (BMKAddressComponent*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.countryCode = countryCode;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKAddressComponent::set_countryCodeISO_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* countryCodeISO = (NSString*) args[@"countryCodeISO"];
        
                // ref
                BMKAddressComponent* ref = (BMKAddressComponent*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.countryCodeISO = countryCodeISO;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKAddressComponent::set_countryCodeISO2_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* countryCodeISO2 = (NSString*) args[@"countryCodeISO2"];
        
                // ref
                BMKAddressComponent* ref = (BMKAddressComponent*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.countryCodeISO2 = countryCodeISO2;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKAddressComponent::set_townCode_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* townCode = (NSString*) args[@"townCode"];
        
                // ref
                BMKAddressComponent* ref = (BMKAddressComponent*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.townCode = townCode;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKAddressComponent::set_cityLevel_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* cityLevel = (NSString*) args[@"cityLevel"];
        
                // ref
                BMKAddressComponent* ref = (BMKAddressComponent*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.cityLevel = cityLevel;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKAddressComponent::set_direction_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* direction = (NSString*) args[@"direction"];
        
                // ref
                BMKAddressComponent* ref = (BMKAddressComponent*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.direction = direction;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKAddressComponent::set_distance_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* distance = (NSString*) args[@"distance"];
        
                // ref
                BMKAddressComponent* ref = (BMKAddressComponent*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.distance = distance;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOpenTransitRouteOption::set_openTransitPolicy_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                BMKOpenTransitPolicy openTransitPolicy = (BMKOpenTransitPolicy) [args[@"openTransitPolicy"] integerValue];
        
                // ref
                BMKOpenTransitRouteOption* ref = (BMKOpenTransitRouteOption*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.openTransitPolicy = openTransitPolicy;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKPlanNode::set_cityName_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* cityName = (NSString*) args[@"cityName"];
        
                // ref
                BMKPlanNode* ref = (BMKPlanNode*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.cityName = cityName;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKPlanNode::set_cityID_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSInteger cityID = [args[@"cityID"] longValue];
        
                // ref
                BMKPlanNode* ref = (BMKPlanNode*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.cityID = cityID;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKPlanNode::set_name_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* name = (NSString*) args[@"name"];
        
                // ref
                BMKPlanNode* ref = (BMKPlanNode*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.name = name;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKPlanNode::set_pt_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* ptValue = (NSValue*) args[@"pt"];
                CLLocationCoordinate2D pt;
                if (ptValue != nil && (NSNull*) ptValue != [NSNull null]) {
                  [ptValue getValue:&pt];
                } else {
                  methodResult([FlutterError errorWithCode:@"参数非法"
                                                   message:@"参数非法"
                                                   details:@"pt不能为null"]);
                  return;
                }
        
        
                // ref
                BMKPlanNode* ref = (BMKPlanNode*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.pt = pt;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"RefClass::isKindOfBMKBaseLog": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[BMKBaseLog class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKOpenPanorama": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[BMKOpenPanorama class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKOpenPoiDetailOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[BMKOpenPoiDetailOption class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKOpenOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[BMKOpenOption class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKOpenDrivingRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[BMKOpenDrivingRouteOption class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKNavigation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[BMKNavigation class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKFavPoiInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[BMKFavPoiInfo class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKUserLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[BMKUserLocation class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKOpenPanoramaOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[BMKOpenPanoramaOption class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKFavPoiManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[BMKFavPoiManager class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKIndoorPlanNode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[BMKIndoorPlanNode class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKOpenRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[BMKOpenRouteOption class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKOpenPoiNearbyOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[BMKOpenPoiNearbyOption class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKMapManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[BMKMapManager class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKOpenWalkingRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[BMKOpenWalkingRouteOption class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKNaviPara": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[BMKNaviPara class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKOpenPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[BMKOpenPoi class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKOpenRoute": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[BMKOpenRoute class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKBuildInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[BMKBuildInfo class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKAddressComponent": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[BMKAddressComponent class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKOpenTransitRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[BMKOpenTransitRouteOption class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKPlanNode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[BMKPlanNode class]];
            methodResult(@(isTargetType));
        },
        
        @"ObjectFactory::createBMKBaseLog": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKBaseLog");
            }
        
            BMKBaseLog* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[BMKBaseLog alloc] init];
            } else {
                __this__ = [BMKBaseLog alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKOpenPanorama": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOpenPanorama");
            }
        
            BMKOpenPanorama* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[BMKOpenPanorama alloc] init];
            } else {
                __this__ = [BMKOpenPanorama alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKOpenPoiDetailOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOpenPoiDetailOption");
            }
        
            BMKOpenPoiDetailOption* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[BMKOpenPoiDetailOption alloc] init];
            } else {
                __this__ = [BMKOpenPoiDetailOption alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKOpenOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOpenOption");
            }
        
            BMKOpenOption* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[BMKOpenOption alloc] init];
            } else {
                __this__ = [BMKOpenOption alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKOpenDrivingRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOpenDrivingRouteOption");
            }
        
            BMKOpenDrivingRouteOption* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[BMKOpenDrivingRouteOption alloc] init];
            } else {
                __this__ = [BMKOpenDrivingRouteOption alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKNavigation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKNavigation");
            }
        
            BMKNavigation* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[BMKNavigation alloc] init];
            } else {
                __this__ = [BMKNavigation alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKFavPoiInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKFavPoiInfo");
            }
        
            BMKFavPoiInfo* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[BMKFavPoiInfo alloc] init];
            } else {
                __this__ = [BMKFavPoiInfo alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKUserLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKUserLocation");
            }
        
            BMKUserLocation* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[BMKUserLocation alloc] init];
            } else {
                __this__ = [BMKUserLocation alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKOpenPanoramaOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOpenPanoramaOption");
            }
        
            BMKOpenPanoramaOption* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[BMKOpenPanoramaOption alloc] init];
            } else {
                __this__ = [BMKOpenPanoramaOption alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKMapPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKMapPoint");
            }
        
            BMKMapPoint data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(BMKMapPoint)];
        
            methodResult(dataValue);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKMapRect");
            }
        
            BMKMapRect data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(BMKMapRect)];
        
            methodResult(dataValue);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKFavPoiManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKFavPoiManager");
            }
        
            BMKFavPoiManager* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[BMKFavPoiManager alloc] init];
            } else {
                __this__ = [BMKFavPoiManager alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKCoordinateSpan": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKCoordinateSpan");
            }
        
            BMKCoordinateSpan data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(BMKCoordinateSpan)];
        
            methodResult(dataValue);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKIndoorPlanNode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKIndoorPlanNode");
            }
        
            BMKIndoorPlanNode* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[BMKIndoorPlanNode alloc] init];
            } else {
                __this__ = [BMKIndoorPlanNode alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKOpenRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOpenRouteOption");
            }
        
            BMKOpenRouteOption* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[BMKOpenRouteOption alloc] init];
            } else {
                __this__ = [BMKOpenRouteOption alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKOpenPoiNearbyOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOpenPoiNearbyOption");
            }
        
            BMKOpenPoiNearbyOption* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[BMKOpenPoiNearbyOption alloc] init];
            } else {
                __this__ = [BMKOpenPoiNearbyOption alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKMapManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKMapManager");
            }
        
            BMKMapManager* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[BMKMapManager alloc] init];
            } else {
                __this__ = [BMKMapManager alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKOpenWalkingRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOpenWalkingRouteOption");
            }
        
            BMKOpenWalkingRouteOption* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[BMKOpenWalkingRouteOption alloc] init];
            } else {
                __this__ = [BMKOpenWalkingRouteOption alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKNaviPara": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKNaviPara");
            }
        
            BMKNaviPara* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[BMKNaviPara alloc] init];
            } else {
                __this__ = [BMKNaviPara alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKCoordinateBounds": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKCoordinateBounds");
            }
        
            BMKCoordinateBounds data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(BMKCoordinateBounds)];
        
            methodResult(dataValue);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKMapSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKMapSize");
            }
        
            BMKMapSize data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(BMKMapSize)];
        
            methodResult(dataValue);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKOpenPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOpenPoi");
            }
        
            BMKOpenPoi* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[BMKOpenPoi alloc] init];
            } else {
                __this__ = [BMKOpenPoi alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKCoordinateRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKCoordinateRegion");
            }
        
            BMKCoordinateRegion data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(BMKCoordinateRegion)];
        
            methodResult(dataValue);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKGeoPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKGeoPoint");
            }
        
            BMKGeoPoint data;
        
            NSValue* dataValue = [NSValue value:&data withObjCType:@encode(BMKGeoPoint)];
        
            methodResult(dataValue);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKOpenRoute": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOpenRoute");
            }
        
            BMKOpenRoute* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[BMKOpenRoute alloc] init];
            } else {
                __this__ = [BMKOpenRoute alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKBuildInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKBuildInfo");
            }
        
            BMKBuildInfo* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[BMKBuildInfo alloc] init];
            } else {
                __this__ = [BMKBuildInfo alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKAddressComponent": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKAddressComponent");
            }
        
            BMKAddressComponent* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[BMKAddressComponent alloc] init];
            } else {
                __this__ = [BMKAddressComponent alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKOpenTransitRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOpenTransitRouteOption");
            }
        
            BMKOpenTransitRouteOption* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[BMKOpenTransitRouteOption alloc] init];
            } else {
                __this__ = [BMKOpenTransitRouteOption alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKPlanNode": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKPlanNode");
            }
        
            BMKPlanNode* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[BMKPlanNode alloc] init];
            } else {
                __this__ = [BMKPlanNode alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKBaseLog": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                BMKBaseLog* __this__;
                if ([init boolValue]) {
                    __this__ = [[BMKBaseLog alloc] init];
                } else {
                    __this__ = [BMKBaseLog alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKOpenPanorama": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                BMKOpenPanorama* __this__;
                if ([init boolValue]) {
                    __this__ = [[BMKOpenPanorama alloc] init];
                } else {
                    __this__ = [BMKOpenPanorama alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKOpenPoiDetailOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                BMKOpenPoiDetailOption* __this__;
                if ([init boolValue]) {
                    __this__ = [[BMKOpenPoiDetailOption alloc] init];
                } else {
                    __this__ = [BMKOpenPoiDetailOption alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKOpenOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                BMKOpenOption* __this__;
                if ([init boolValue]) {
                    __this__ = [[BMKOpenOption alloc] init];
                } else {
                    __this__ = [BMKOpenOption alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKOpenDrivingRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                BMKOpenDrivingRouteOption* __this__;
                if ([init boolValue]) {
                    __this__ = [[BMKOpenDrivingRouteOption alloc] init];
                } else {
                    __this__ = [BMKOpenDrivingRouteOption alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKNavigation": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                BMKNavigation* __this__;
                if ([init boolValue]) {
                    __this__ = [[BMKNavigation alloc] init];
                } else {
                    __this__ = [BMKNavigation alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKFavPoiInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                BMKFavPoiInfo* __this__;
                if ([init boolValue]) {
                    __this__ = [[BMKFavPoiInfo alloc] init];
                } else {
                    __this__ = [BMKFavPoiInfo alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKUserLocation": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                BMKUserLocation* __this__;
                if ([init boolValue]) {
                    __this__ = [[BMKUserLocation alloc] init];
                } else {
                    __this__ = [BMKUserLocation alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKOpenPanoramaOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                BMKOpenPanoramaOption* __this__;
                if ([init boolValue]) {
                    __this__ = [[BMKOpenPanoramaOption alloc] init];
                } else {
                    __this__ = [BMKOpenPanoramaOption alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKMapPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSValue*>* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKMapPoint data;
        
                NSValue* dataValue = [NSValue value:&data withObjCType:@encode(BMKMapPoint)];
        
                [resultList addObject:dataValue];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSValue*>* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKMapRect data;
        
                NSValue* dataValue = [NSValue value:&data withObjCType:@encode(BMKMapRect)];
        
                [resultList addObject:dataValue];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKFavPoiManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                BMKFavPoiManager* __this__;
                if ([init boolValue]) {
                    __this__ = [[BMKFavPoiManager alloc] init];
                } else {
                    __this__ = [BMKFavPoiManager alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKCoordinateSpan": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSValue*>* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKCoordinateSpan data;
        
                NSValue* dataValue = [NSValue value:&data withObjCType:@encode(BMKCoordinateSpan)];
        
                [resultList addObject:dataValue];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKIndoorPlanNode": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                BMKIndoorPlanNode* __this__;
                if ([init boolValue]) {
                    __this__ = [[BMKIndoorPlanNode alloc] init];
                } else {
                    __this__ = [BMKIndoorPlanNode alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKOpenRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                BMKOpenRouteOption* __this__;
                if ([init boolValue]) {
                    __this__ = [[BMKOpenRouteOption alloc] init];
                } else {
                    __this__ = [BMKOpenRouteOption alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKOpenPoiNearbyOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                BMKOpenPoiNearbyOption* __this__;
                if ([init boolValue]) {
                    __this__ = [[BMKOpenPoiNearbyOption alloc] init];
                } else {
                    __this__ = [BMKOpenPoiNearbyOption alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKMapManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                BMKMapManager* __this__;
                if ([init boolValue]) {
                    __this__ = [[BMKMapManager alloc] init];
                } else {
                    __this__ = [BMKMapManager alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKOpenWalkingRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                BMKOpenWalkingRouteOption* __this__;
                if ([init boolValue]) {
                    __this__ = [[BMKOpenWalkingRouteOption alloc] init];
                } else {
                    __this__ = [BMKOpenWalkingRouteOption alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKNaviPara": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                BMKNaviPara* __this__;
                if ([init boolValue]) {
                    __this__ = [[BMKNaviPara alloc] init];
                } else {
                    __this__ = [BMKNaviPara alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKCoordinateBounds": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSValue*>* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKCoordinateBounds data;
        
                NSValue* dataValue = [NSValue value:&data withObjCType:@encode(BMKCoordinateBounds)];
        
                [resultList addObject:dataValue];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKMapSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSValue*>* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKMapSize data;
        
                NSValue* dataValue = [NSValue value:&data withObjCType:@encode(BMKMapSize)];
        
                [resultList addObject:dataValue];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKOpenPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                BMKOpenPoi* __this__;
                if ([init boolValue]) {
                    __this__ = [[BMKOpenPoi alloc] init];
                } else {
                    __this__ = [BMKOpenPoi alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKCoordinateRegion": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSValue*>* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKCoordinateRegion data;
        
                NSValue* dataValue = [NSValue value:&data withObjCType:@encode(BMKCoordinateRegion)];
        
                [resultList addObject:dataValue];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKGeoPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSValue*>* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKGeoPoint data;
        
                NSValue* dataValue = [NSValue value:&data withObjCType:@encode(BMKGeoPoint)];
        
                [resultList addObject:dataValue];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKOpenRoute": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                BMKOpenRoute* __this__;
                if ([init boolValue]) {
                    __this__ = [[BMKOpenRoute alloc] init];
                } else {
                    __this__ = [BMKOpenRoute alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKBuildInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                BMKBuildInfo* __this__;
                if ([init boolValue]) {
                    __this__ = [[BMKBuildInfo alloc] init];
                } else {
                    __this__ = [BMKBuildInfo alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
    };
}

@end
