//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "SubHandler0.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation BmapUtilsFluttifyPlugin (SubHandler0)
- (NSDictionary<NSString*, Handler>*) getSubHandler0 {
    return @{
        @"BMKOpenRoute::openBaiduMapWalkingRoute": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            BMKOpenWalkingRouteOption* option = (BMKOpenWalkingRouteOption*) HEAP[@([args[@"option"] integerValue])];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOpenRoute::openBaiduMapWalkingRoute(%@)", args[@"option"]);
            }
        
            // invoke native method
            BMKOpenErrorCode result = [BMKOpenRoute openBaiduMapWalkingRoute: option];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"BMKOpenRoute::openBaiduMapTransitRoute": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            BMKOpenTransitRouteOption* option = (BMKOpenTransitRouteOption*) HEAP[@([args[@"option"] integerValue])];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOpenRoute::openBaiduMapTransitRoute(%@)", args[@"option"]);
            }
        
            // invoke native method
            BMKOpenErrorCode result = [BMKOpenRoute openBaiduMapTransitRoute: option];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"BMKOpenRoute::openBaiduMapDrivingRoute": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            BMKOpenDrivingRouteOption* option = (BMKOpenDrivingRouteOption*) HEAP[@([args[@"option"] integerValue])];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOpenRoute::openBaiduMapDrivingRoute(%@)", args[@"option"]);
            }
        
            // invoke native method
            BMKOpenErrorCode result = [BMKOpenRoute openBaiduMapDrivingRoute: option];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"BMKOpenPoi::openBaiduMapPoiDetailPage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            BMKOpenPoiDetailOption* option = (BMKOpenPoiDetailOption*) HEAP[@([args[@"option"] integerValue])];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOpenPoi::openBaiduMapPoiDetailPage(%@)", args[@"option"]);
            }
        
            // invoke native method
            BMKOpenErrorCode result = [BMKOpenPoi openBaiduMapPoiDetailPage: option];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"BMKOpenPoi::openBaiduMapPoiNearbySearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            BMKOpenPoiNearbyOption* option = (BMKOpenPoiNearbyOption*) HEAP[@([args[@"option"] integerValue])];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOpenPoi::openBaiduMapPoiNearbySearch(%@)", args[@"option"]);
            }
        
            // invoke native method
            BMKOpenErrorCode result = [BMKOpenPoi openBaiduMapPoiNearbySearch: option];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"BMKOpenPanorama::openBaiduMapPanorama": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            BMKOpenPanoramaOption* option = (BMKOpenPanoramaOption*) HEAP[@([args[@"option"] integerValue])];
        
            // ref
            BMKOpenPanorama* ref = (BMKOpenPanorama*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOpenPanorama@%@::openBaiduMapPanorama(%@)", args[@"refId"], args[@"option"]);
            }
        
            // invoke native method
            [ref openBaiduMapPanorama : option];
        
            // result
            // 无返回值
            NSString* jsonableResult = @"success";
        
            methodResult(jsonableResult);
        },
        @"BMKFavPoiManager::addFavPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            BMKFavPoiInfo* favPoiInfo = (BMKFavPoiInfo*) HEAP[@([args[@"favPoiInfo"] integerValue])];
        
            // ref
            BMKFavPoiManager* ref = (BMKFavPoiManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKFavPoiManager@%@::addFavPoi(%@)", args[@"refId"], args[@"favPoiInfo"]);
            }
        
            // invoke native method
            NSInteger result = [ref addFavPoi: favPoiInfo];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"BMKFavPoiManager::getFavPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSString* favId = (NSString*) args[@"favId"];
        
            // ref
            BMKFavPoiManager* ref = (BMKFavPoiManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKFavPoiManager@%@::getFavPoi(%@)", args[@"refId"], args[@"favId"]);
            }
        
            // invoke native method
            BMKFavPoiInfo* result = [ref getFavPoi: favId];
        
            // result
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        @"BMKFavPoiManager::getAllFavPois": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            BMKFavPoiManager* ref = (BMKFavPoiManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKFavPoiManager@%@::getAllFavPois()", args[@"refId"]);
            }
        
            // invoke native method
            NSArray* result = [ref getAllFavPois];
        
            // result
            // 返回值: 列表
            NSMutableArray* jsonableResult = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [jsonableResult addObject: @(object.hash)];
                HEAP[@([object hash])] = object;
            }
        
            methodResult(jsonableResult);
        },
        @"BMKFavPoiManager::updateFavPoi_favPoiInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSString* favId = (NSString*) args[@"favId"];
            // ref arg
            BMKFavPoiInfo* favPoiInfo = (BMKFavPoiInfo*) HEAP[@([args[@"favPoiInfo"] integerValue])];
        
            // ref
            BMKFavPoiManager* ref = (BMKFavPoiManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKFavPoiManager@%@::updateFavPoi(%@, %@)", args[@"refId"], args[@"favId"], args[@"favPoiInfo"]);
            }
        
            // invoke native method
            BOOL result = [ref updateFavPoi: favId favPoiInfo: favPoiInfo];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"BMKFavPoiManager::deleteFavPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSString* favId = (NSString*) args[@"favId"];
        
            // ref
            BMKFavPoiManager* ref = (BMKFavPoiManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKFavPoiManager@%@::deleteFavPoi(%@)", args[@"refId"], args[@"favId"]);
            }
        
            // invoke native method
            BOOL result = [ref deleteFavPoi: favId];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"BMKFavPoiManager::clearAllFavPois": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            BMKFavPoiManager* ref = (BMKFavPoiManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKFavPoiManager@%@::clearAllFavPois()", args[@"refId"]);
            }
        
            // invoke native method
            BOOL result = [ref clearAllFavPois];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"BMKNavigation::openBaiduMapNavigation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            BMKNaviPara* para = (BMKNaviPara*) HEAP[@([args[@"para"] integerValue])];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKNavigation::openBaiduMapNavigation(%@)", args[@"para"]);
            }
        
            // invoke native method
            BMKOpenErrorCode result = [BMKNavigation openBaiduMapNavigation: para];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"BMKNavigation::openBaiduMapWalkNavigation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            BMKNaviPara* para = (BMKNaviPara*) HEAP[@([args[@"para"] integerValue])];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKNavigation::openBaiduMapWalkNavigation(%@)", args[@"para"]);
            }
        
            // invoke native method
            BMKOpenErrorCode result = [BMKNavigation openBaiduMapWalkNavigation: para];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"BMKNavigation::openBaiduMapRideNavigation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            BMKNaviPara* para = (BMKNaviPara*) HEAP[@([args[@"para"] integerValue])];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKNavigation::openBaiduMapRideNavigation(%@)", args[@"para"]);
            }
        
            // invoke native method
            BMKOpenErrorCode result = [BMKNavigation openBaiduMapRideNavigation: para];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"BMKNavigation::openBaiduMapwalkARNavigation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            BMKNaviPara* para = (BMKNaviPara*) HEAP[@([args[@"para"] integerValue])];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKNavigation::openBaiduMapwalkARNavigation(%@)", args[@"para"]);
            }
        
            // invoke native method
            BMKOpenErrorCode result = [BMKNavigation openBaiduMapwalkARNavigation: para];
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"BMKOpenRoute::openBaiduMapWalkingRoute_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKOpenWalkingRouteOption* option = (BMKOpenWalkingRouteOption*) HEAP[@([args[@"option"] integerValue])];
        
                // ref
        
        
                // invoke native method
                BMKOpenErrorCode result = [BMKOpenRoute openBaiduMapWalkingRoute: option];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"BMKOpenRoute::openBaiduMapTransitRoute_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKOpenTransitRouteOption* option = (BMKOpenTransitRouteOption*) HEAP[@([args[@"option"] integerValue])];
        
                // ref
        
        
                // invoke native method
                BMKOpenErrorCode result = [BMKOpenRoute openBaiduMapTransitRoute: option];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"BMKOpenRoute::openBaiduMapDrivingRoute_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKOpenDrivingRouteOption* option = (BMKOpenDrivingRouteOption*) HEAP[@([args[@"option"] integerValue])];
        
                // ref
        
        
                // invoke native method
                BMKOpenErrorCode result = [BMKOpenRoute openBaiduMapDrivingRoute: option];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"BMKOpenPoi::openBaiduMapPoiDetailPage_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKOpenPoiDetailOption* option = (BMKOpenPoiDetailOption*) HEAP[@([args[@"option"] integerValue])];
        
                // ref
        
        
                // invoke native method
                BMKOpenErrorCode result = [BMKOpenPoi openBaiduMapPoiDetailPage: option];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"BMKOpenPoi::openBaiduMapPoiNearbySearch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKOpenPoiNearbyOption* option = (BMKOpenPoiNearbyOption*) HEAP[@([args[@"option"] integerValue])];
        
                // ref
        
        
                // invoke native method
                BMKOpenErrorCode result = [BMKOpenPoi openBaiduMapPoiNearbySearch: option];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"BMKOpenPanorama::openBaiduMapPanorama_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKOpenPanoramaOption* option = (BMKOpenPanoramaOption*) HEAP[@([args[@"option"] integerValue])];
        
                // ref
                BMKOpenPanorama* ref = (BMKOpenPanorama*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                [ref openBaiduMapPanorama : option];
        
                // result
                // 无返回值
                NSString* jsonableResult = @"success";
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"BMKFavPoiManager::addFavPoi_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKFavPoiInfo* favPoiInfo = (BMKFavPoiInfo*) HEAP[@([args[@"favPoiInfo"] integerValue])];
        
                // ref
                BMKFavPoiManager* ref = (BMKFavPoiManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                NSInteger result = [ref addFavPoi: favPoiInfo];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"BMKFavPoiManager::getFavPoi_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* favId = (NSString*) args[@"favId"];
        
                // ref
                BMKFavPoiManager* ref = (BMKFavPoiManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                BMKFavPoiInfo* result = [ref getFavPoi: favId];
        
                // result
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"BMKFavPoiManager::getAllFavPois_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                BMKFavPoiManager* ref = (BMKFavPoiManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                NSArray* result = [ref getAllFavPois];
        
                // result
                // 返回值: 列表
                NSMutableArray* jsonableResult = [NSMutableArray array];
                for (int __i__ = 0; __i__ < result.count; __i__++) {
                    NSObject* object = [result objectAtIndex:__i__];
                    [jsonableResult addObject: @(object.hash)];
                    HEAP[@([object hash])] = object;
                }
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"BMKFavPoiManager::updateFavPoi_favPoiInfo_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* favId = (NSString*) args[@"favId"];
                // ref arg
                BMKFavPoiInfo* favPoiInfo = (BMKFavPoiInfo*) HEAP[@([args[@"favPoiInfo"] integerValue])];
        
                // ref
                BMKFavPoiManager* ref = (BMKFavPoiManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                BOOL result = [ref updateFavPoi: favId favPoiInfo: favPoiInfo];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"BMKFavPoiManager::deleteFavPoi_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* favId = (NSString*) args[@"favId"];
        
                // ref
                BMKFavPoiManager* ref = (BMKFavPoiManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                BOOL result = [ref deleteFavPoi: favId];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"BMKFavPoiManager::clearAllFavPois_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                BMKFavPoiManager* ref = (BMKFavPoiManager*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                // invoke native method
                BOOL result = [ref clearAllFavPois];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"BMKNavigation::openBaiduMapNavigation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKNaviPara* para = (BMKNaviPara*) HEAP[@([args[@"para"] integerValue])];
        
                // ref
        
        
                // invoke native method
                BMKOpenErrorCode result = [BMKNavigation openBaiduMapNavigation: para];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"BMKNavigation::openBaiduMapWalkNavigation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKNaviPara* para = (BMKNaviPara*) HEAP[@([args[@"para"] integerValue])];
        
                // ref
        
        
                // invoke native method
                BMKOpenErrorCode result = [BMKNavigation openBaiduMapWalkNavigation: para];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"BMKNavigation::openBaiduMapRideNavigation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKNaviPara* para = (BMKNaviPara*) HEAP[@([args[@"para"] integerValue])];
        
                // ref
        
        
                // invoke native method
                BMKOpenErrorCode result = [BMKNavigation openBaiduMapRideNavigation: para];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"BMKNavigation::openBaiduMapwalkARNavigation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKNaviPara* para = (BMKNaviPara*) HEAP[@([args[@"para"] integerValue])];
        
                // ref
        
        
                // invoke native method
                BMKOpenErrorCode result = [BMKNavigation openBaiduMapwalkARNavigation: para];
        
                // result
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        @"BMKOpenPoiDetailOption::get_poiUid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenPoiDetailOption::get_poiUid");
            }
        
            // ref object
            BMKOpenPoiDetailOption* ref = (BMKOpenPoiDetailOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.poiUid;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"BMKOpenPoiNearbyOption::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenPoiNearbyOption::get_location");
            }
        
            // ref object
            BMKOpenPoiNearbyOption* ref = (BMKOpenPoiNearbyOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CLLocationCoordinate2D result = ref.location;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        
        @"BMKOpenPoiNearbyOption::get_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenPoiNearbyOption::get_radius");
            }
        
            // ref object
            BMKOpenPoiNearbyOption* ref = (BMKOpenPoiNearbyOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSUInteger result = ref.radius;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"BMKOpenPoiNearbyOption::get_keyword": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenPoiNearbyOption::get_keyword");
            }
        
            // ref object
            BMKOpenPoiNearbyOption* ref = (BMKOpenPoiNearbyOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.keyword;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"BMKFavPoiInfo::get_favId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKFavPoiInfo::get_favId");
            }
        
            // ref object
            BMKFavPoiInfo* ref = (BMKFavPoiInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.favId;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"BMKFavPoiInfo::get_poiName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKFavPoiInfo::get_poiName");
            }
        
            // ref object
            BMKFavPoiInfo* ref = (BMKFavPoiInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.poiName;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"BMKFavPoiInfo::get_poiUid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKFavPoiInfo::get_poiUid");
            }
        
            // ref object
            BMKFavPoiInfo* ref = (BMKFavPoiInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.poiUid;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"BMKFavPoiInfo::get_pt": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKFavPoiInfo::get_pt");
            }
        
            // ref object
            BMKFavPoiInfo* ref = (BMKFavPoiInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            CLLocationCoordinate2D result = ref.pt;
        
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        
        @"BMKFavPoiInfo::get_address": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKFavPoiInfo::get_address");
            }
        
            // ref object
            BMKFavPoiInfo* ref = (BMKFavPoiInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.address;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"BMKFavPoiInfo::get_cityName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKFavPoiInfo::get_cityName");
            }
        
            // ref object
            BMKFavPoiInfo* ref = (BMKFavPoiInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.cityName;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"BMKFavPoiInfo::get_timeStamp": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKFavPoiInfo::get_timeStamp");
            }
        
            // ref object
            BMKFavPoiInfo* ref = (BMKFavPoiInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSUInteger result = ref.timeStamp;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"BMKOpenRouteOption::get_startPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenRouteOption::get_startPoint");
            }
        
            // ref object
            BMKOpenRouteOption* ref = (BMKOpenRouteOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BMKPlanNode* result = ref.startPoint;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"BMKOpenRouteOption::get_endPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenRouteOption::get_endPoint");
            }
        
            // ref object
            BMKOpenRouteOption* ref = (BMKOpenRouteOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BMKPlanNode* result = ref.endPoint;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"BMKOpenTransitRouteOption::get_openTransitPolicy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenTransitRouteOption::get_openTransitPolicy");
            }
        
            // ref object
            BMKOpenTransitRouteOption* ref = (BMKOpenTransitRouteOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BMKOpenTransitPolicy result = ref.openTransitPolicy;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"BMKOpenOption::get_appScheme": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenOption::get_appScheme");
            }
        
            // ref object
            BMKOpenOption* ref = (BMKOpenOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.appScheme;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"BMKOpenOption::get_isSupportWeb": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenOption::get_isSupportWeb");
            }
        
            // ref object
            BMKOpenOption* ref = (BMKOpenOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.isSupportWeb;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"BMKOpenPanoramaOption::get_poiUid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenPanoramaOption::get_poiUid");
            }
        
            // ref object
            BMKOpenPanoramaOption* ref = (BMKOpenPanoramaOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.poiUid;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"BMKNaviPara::get_startPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKNaviPara::get_startPoint");
            }
        
            // ref object
            BMKNaviPara* ref = (BMKNaviPara*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BMKPlanNode* result = ref.startPoint;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"BMKNaviPara::get_endPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKNaviPara::get_endPoint");
            }
        
            // ref object
            BMKNaviPara* ref = (BMKNaviPara*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BMKPlanNode* result = ref.endPoint;
        
            // return a ref
            HEAP[@((result).hash)] = result;
            NSNumber* jsonableResult = @((result).hash);
        
            methodResult(jsonableResult);
        },
        
        @"BMKNaviPara::get_naviType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKNaviPara::get_naviType");
            }
        
            // ref object
            BMKNaviPara* ref = (BMKNaviPara*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BMK_NAVI_TYPE result = ref.naviType;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"BMKNaviPara::get_appScheme": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKNaviPara::get_appScheme");
            }
        
            // ref object
            BMKNaviPara* ref = (BMKNaviPara*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.appScheme;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"BMKNaviPara::get_appName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKNaviPara::get_appName");
            }
        
            // ref object
            BMKNaviPara* ref = (BMKNaviPara*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            NSString* result = ref.appName;
        
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        
        @"BMKNaviPara::get_isSupportWeb": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKNaviPara::get_isSupportWeb");
            }
        
            // ref object
            BMKNaviPara* ref = (BMKNaviPara*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            // invoke native method
            BOOL result = ref.isSupportWeb;
        
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        
        @"BMKOpenPoiDetailOption::get_poiUid_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKOpenPoiDetailOption* ref = (BMKOpenPoiDetailOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.poiUid;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"BMKOpenPoiNearbyOption::get_location_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKOpenPoiNearbyOption* ref = (BMKOpenPoiNearbyOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                CLLocationCoordinate2D result = ref.location;
        
                // 返回值: 结构体
                NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
                HEAP[@(resultValue.hash)] = resultValue;
                NSNumber* jsonableResult = @(resultValue.hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"BMKOpenPoiNearbyOption::get_radius_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKOpenPoiNearbyOption* ref = (BMKOpenPoiNearbyOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSUInteger result = ref.radius;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"BMKOpenPoiNearbyOption::get_keyword_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKOpenPoiNearbyOption* ref = (BMKOpenPoiNearbyOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.keyword;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"BMKFavPoiInfo::get_favId_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKFavPoiInfo* ref = (BMKFavPoiInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.favId;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"BMKFavPoiInfo::get_poiName_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKFavPoiInfo* ref = (BMKFavPoiInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.poiName;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"BMKFavPoiInfo::get_poiUid_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKFavPoiInfo* ref = (BMKFavPoiInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.poiUid;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"BMKFavPoiInfo::get_pt_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKFavPoiInfo* ref = (BMKFavPoiInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                CLLocationCoordinate2D result = ref.pt;
        
                // 返回值: 结构体
                NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
                HEAP[@(resultValue.hash)] = resultValue;
                NSNumber* jsonableResult = @(resultValue.hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"BMKFavPoiInfo::get_address_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKFavPoiInfo* ref = (BMKFavPoiInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.address;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"BMKFavPoiInfo::get_cityName_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKFavPoiInfo* ref = (BMKFavPoiInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.cityName;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"BMKFavPoiInfo::get_timeStamp_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKFavPoiInfo* ref = (BMKFavPoiInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSUInteger result = ref.timeStamp;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"BMKOpenRouteOption::get_startPoint_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKOpenRouteOption* ref = (BMKOpenRouteOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                BMKPlanNode* result = ref.startPoint;
        
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"BMKOpenRouteOption::get_endPoint_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKOpenRouteOption* ref = (BMKOpenRouteOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                BMKPlanNode* result = ref.endPoint;
        
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"BMKOpenTransitRouteOption::get_openTransitPolicy_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKOpenTransitRouteOption* ref = (BMKOpenTransitRouteOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                BMKOpenTransitPolicy result = ref.openTransitPolicy;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"BMKOpenOption::get_appScheme_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKOpenOption* ref = (BMKOpenOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.appScheme;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"BMKOpenOption::get_isSupportWeb_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKOpenOption* ref = (BMKOpenOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                BOOL result = ref.isSupportWeb;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"BMKOpenPanoramaOption::get_poiUid_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKOpenPanoramaOption* ref = (BMKOpenPanoramaOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.poiUid;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"BMKNaviPara::get_startPoint_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKNaviPara* ref = (BMKNaviPara*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                BMKPlanNode* result = ref.startPoint;
        
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"BMKNaviPara::get_endPoint_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKNaviPara* ref = (BMKNaviPara*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                BMKPlanNode* result = ref.endPoint;
        
                // return a ref
                HEAP[@((result).hash)] = result;
                NSNumber* jsonableResult = @((result).hash);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"BMKNaviPara::get_naviType_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKNaviPara* ref = (BMKNaviPara*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                BMK_NAVI_TYPE result = ref.naviType;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"BMKNaviPara::get_appScheme_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKNaviPara* ref = (BMKNaviPara*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.appScheme;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"BMKNaviPara::get_appName_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKNaviPara* ref = (BMKNaviPara*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                NSString* result = ref.appName;
        
                // 返回值: jsonable
                id jsonableResult = result;
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"BMKNaviPara::get_isSupportWeb_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKNaviPara* ref = (BMKNaviPara*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                BOOL result = ref.isSupportWeb;
        
                // 返回值: Value
                id jsonableResult = @(result);
        
                [resultList addObject:jsonableResult];
            }
        
            methodResult(resultList);
        },
        
        @"BMKOpenPoiDetailOption::set_poiUid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenPoiDetailOption::set_poiUid");
            }
        
            // args
            // jsonable arg
            NSString* poiUid = (NSString*) args[@"poiUid"];
        
            // ref
            BMKOpenPoiDetailOption* ref = (BMKOpenPoiDetailOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.poiUid = poiUid;
            methodResult(@"success");
        },
        
        @"BMKOpenPoiNearbyOption::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenPoiNearbyOption::set_location");
            }
        
            // args
            // struct arg
            NSValue* locationValue = (NSValue*) HEAP[@([args[@"location"] integerValue])];
            CLLocationCoordinate2D location;
            [locationValue getValue:&location];
        
            // ref
            BMKOpenPoiNearbyOption* ref = (BMKOpenPoiNearbyOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.location = location;
            methodResult(@"success");
        },
        
        @"BMKOpenPoiNearbyOption::set_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenPoiNearbyOption::set_radius");
            }
        
            // args
            // jsonable arg
            NSUInteger radius = [args[@"radius"] unsignedIntegerValue];
        
            // ref
            BMKOpenPoiNearbyOption* ref = (BMKOpenPoiNearbyOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.radius = radius;
            methodResult(@"success");
        },
        
        @"BMKOpenPoiNearbyOption::set_keyword": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenPoiNearbyOption::set_keyword");
            }
        
            // args
            // jsonable arg
            NSString* keyword = (NSString*) args[@"keyword"];
        
            // ref
            BMKOpenPoiNearbyOption* ref = (BMKOpenPoiNearbyOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.keyword = keyword;
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_favId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKFavPoiInfo::set_favId");
            }
        
            // args
            // jsonable arg
            NSString* favId = (NSString*) args[@"favId"];
        
            // ref
            BMKFavPoiInfo* ref = (BMKFavPoiInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.favId = favId;
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_poiName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKFavPoiInfo::set_poiName");
            }
        
            // args
            // jsonable arg
            NSString* poiName = (NSString*) args[@"poiName"];
        
            // ref
            BMKFavPoiInfo* ref = (BMKFavPoiInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.poiName = poiName;
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_poiUid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKFavPoiInfo::set_poiUid");
            }
        
            // args
            // jsonable arg
            NSString* poiUid = (NSString*) args[@"poiUid"];
        
            // ref
            BMKFavPoiInfo* ref = (BMKFavPoiInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.poiUid = poiUid;
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_pt": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKFavPoiInfo::set_pt");
            }
        
            // args
            // struct arg
            NSValue* ptValue = (NSValue*) HEAP[@([args[@"pt"] integerValue])];
            CLLocationCoordinate2D pt;
            [ptValue getValue:&pt];
        
            // ref
            BMKFavPoiInfo* ref = (BMKFavPoiInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.pt = pt;
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_address": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKFavPoiInfo::set_address");
            }
        
            // args
            // jsonable arg
            NSString* address = (NSString*) args[@"address"];
        
            // ref
            BMKFavPoiInfo* ref = (BMKFavPoiInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.address = address;
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_cityName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKFavPoiInfo::set_cityName");
            }
        
            // args
            // jsonable arg
            NSString* cityName = (NSString*) args[@"cityName"];
        
            // ref
            BMKFavPoiInfo* ref = (BMKFavPoiInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.cityName = cityName;
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_timeStamp": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKFavPoiInfo::set_timeStamp");
            }
        
            // args
            // jsonable arg
            NSUInteger timeStamp = [args[@"timeStamp"] unsignedIntegerValue];
        
            // ref
            BMKFavPoiInfo* ref = (BMKFavPoiInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.timeStamp = timeStamp;
            methodResult(@"success");
        },
        
        @"BMKOpenRouteOption::set_startPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenRouteOption::set_startPoint");
            }
        
            // args
            // ref arg
            BMKPlanNode* startPoint = (BMKPlanNode*) HEAP[@([args[@"startPoint"] integerValue])];
        
            // ref
            BMKOpenRouteOption* ref = (BMKOpenRouteOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.startPoint = startPoint;
            methodResult(@"success");
        },
        
        @"BMKOpenRouteOption::set_endPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenRouteOption::set_endPoint");
            }
        
            // args
            // ref arg
            BMKPlanNode* endPoint = (BMKPlanNode*) HEAP[@([args[@"endPoint"] integerValue])];
        
            // ref
            BMKOpenRouteOption* ref = (BMKOpenRouteOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.endPoint = endPoint;
            methodResult(@"success");
        },
        
        @"BMKOpenTransitRouteOption::set_openTransitPolicy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenTransitRouteOption::set_openTransitPolicy");
            }
        
            // args
            // enum arg
            BMKOpenTransitPolicy openTransitPolicy = (BMKOpenTransitPolicy) [args[@"openTransitPolicy"] integerValue];
        
            // ref
            BMKOpenTransitRouteOption* ref = (BMKOpenTransitRouteOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.openTransitPolicy = openTransitPolicy;
            methodResult(@"success");
        },
        
        @"BMKOpenOption::set_appScheme": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenOption::set_appScheme");
            }
        
            // args
            // jsonable arg
            NSString* appScheme = (NSString*) args[@"appScheme"];
        
            // ref
            BMKOpenOption* ref = (BMKOpenOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.appScheme = appScheme;
            methodResult(@"success");
        },
        
        @"BMKOpenOption::set_isSupportWeb": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenOption::set_isSupportWeb");
            }
        
            // args
            // jsonable arg
            BOOL isSupportWeb = [args[@"isSupportWeb"] boolValue];
        
            // ref
            BMKOpenOption* ref = (BMKOpenOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.isSupportWeb = isSupportWeb;
            methodResult(@"success");
        },
        
        @"BMKOpenPanoramaOption::set_poiUid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenPanoramaOption::set_poiUid");
            }
        
            // args
            // jsonable arg
            NSString* poiUid = (NSString*) args[@"poiUid"];
        
            // ref
            BMKOpenPanoramaOption* ref = (BMKOpenPanoramaOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.poiUid = poiUid;
            methodResult(@"success");
        },
        
        @"BMKOpenPanorama::set_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenPanorama::set_delegate");
            }
        
            // args
        
        
            // ref
            BMKOpenPanorama* ref = (BMKOpenPanorama*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.delegate = self;
            methodResult(@"success");
        },
        
        @"BMKNaviPara::set_startPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKNaviPara::set_startPoint");
            }
        
            // args
            // ref arg
            BMKPlanNode* startPoint = (BMKPlanNode*) HEAP[@([args[@"startPoint"] integerValue])];
        
            // ref
            BMKNaviPara* ref = (BMKNaviPara*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.startPoint = startPoint;
            methodResult(@"success");
        },
        
        @"BMKNaviPara::set_endPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKNaviPara::set_endPoint");
            }
        
            // args
            // ref arg
            BMKPlanNode* endPoint = (BMKPlanNode*) HEAP[@([args[@"endPoint"] integerValue])];
        
            // ref
            BMKNaviPara* ref = (BMKNaviPara*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.endPoint = endPoint;
            methodResult(@"success");
        },
        
        @"BMKNaviPara::set_naviType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKNaviPara::set_naviType");
            }
        
            // args
            // enum arg
            BMK_NAVI_TYPE naviType = (BMK_NAVI_TYPE) [args[@"naviType"] integerValue];
        
            // ref
            BMKNaviPara* ref = (BMKNaviPara*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.naviType = naviType;
            methodResult(@"success");
        },
        
        @"BMKNaviPara::set_appScheme": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKNaviPara::set_appScheme");
            }
        
            // args
            // jsonable arg
            NSString* appScheme = (NSString*) args[@"appScheme"];
        
            // ref
            BMKNaviPara* ref = (BMKNaviPara*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.appScheme = appScheme;
            methodResult(@"success");
        },
        
        @"BMKNaviPara::set_appName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKNaviPara::set_appName");
            }
        
            // args
            // jsonable arg
            NSString* appName = (NSString*) args[@"appName"];
        
            // ref
            BMKNaviPara* ref = (BMKNaviPara*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.appName = appName;
            methodResult(@"success");
        },
        
        @"BMKNaviPara::set_isSupportWeb": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKNaviPara::set_isSupportWeb");
            }
        
            // args
            // jsonable arg
            BOOL isSupportWeb = [args[@"isSupportWeb"] boolValue];
        
            // ref
            BMKNaviPara* ref = (BMKNaviPara*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
            ref.isSupportWeb = isSupportWeb;
            methodResult(@"success");
        },
        
        @"BMKOpenPoiDetailOption::set_poiUid_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* poiUid = (NSString*) args[@"poiUid"];
        
                // ref
                BMKOpenPoiDetailOption* ref = (BMKOpenPoiDetailOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.poiUid = poiUid;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOpenPoiNearbyOption::set_location_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* locationValue = (NSValue*) HEAP[@([args[@"location"] integerValue])];
                CLLocationCoordinate2D location;
                [locationValue getValue:&location];
        
                // ref
                BMKOpenPoiNearbyOption* ref = (BMKOpenPoiNearbyOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.location = location;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOpenPoiNearbyOption::set_radius_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSUInteger radius = [args[@"radius"] unsignedIntegerValue];
        
                // ref
                BMKOpenPoiNearbyOption* ref = (BMKOpenPoiNearbyOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.radius = radius;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOpenPoiNearbyOption::set_keyword_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* keyword = (NSString*) args[@"keyword"];
        
                // ref
                BMKOpenPoiNearbyOption* ref = (BMKOpenPoiNearbyOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.keyword = keyword;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_favId_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* favId = (NSString*) args[@"favId"];
        
                // ref
                BMKFavPoiInfo* ref = (BMKFavPoiInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.favId = favId;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_poiName_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* poiName = (NSString*) args[@"poiName"];
        
                // ref
                BMKFavPoiInfo* ref = (BMKFavPoiInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.poiName = poiName;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_poiUid_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* poiUid = (NSString*) args[@"poiUid"];
        
                // ref
                BMKFavPoiInfo* ref = (BMKFavPoiInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.poiUid = poiUid;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_pt_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* ptValue = (NSValue*) HEAP[@([args[@"pt"] integerValue])];
                CLLocationCoordinate2D pt;
                [ptValue getValue:&pt];
        
                // ref
                BMKFavPoiInfo* ref = (BMKFavPoiInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.pt = pt;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_address_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* address = (NSString*) args[@"address"];
        
                // ref
                BMKFavPoiInfo* ref = (BMKFavPoiInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.address = address;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_cityName_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* cityName = (NSString*) args[@"cityName"];
        
                // ref
                BMKFavPoiInfo* ref = (BMKFavPoiInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.cityName = cityName;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_timeStamp_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSUInteger timeStamp = [args[@"timeStamp"] unsignedIntegerValue];
        
                // ref
                BMKFavPoiInfo* ref = (BMKFavPoiInfo*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.timeStamp = timeStamp;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOpenRouteOption::set_startPoint_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKPlanNode* startPoint = (BMKPlanNode*) HEAP[@([args[@"startPoint"] integerValue])];
        
                // ref
                BMKOpenRouteOption* ref = (BMKOpenRouteOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.startPoint = startPoint;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOpenRouteOption::set_endPoint_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKPlanNode* endPoint = (BMKPlanNode*) HEAP[@([args[@"endPoint"] integerValue])];
        
                // ref
                BMKOpenRouteOption* ref = (BMKOpenRouteOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.endPoint = endPoint;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOpenTransitRouteOption::set_openTransitPolicy_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                BMKOpenTransitPolicy openTransitPolicy = (BMKOpenTransitPolicy) [args[@"openTransitPolicy"] integerValue];
        
                // ref
                BMKOpenTransitRouteOption* ref = (BMKOpenTransitRouteOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.openTransitPolicy = openTransitPolicy;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOpenOption::set_appScheme_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* appScheme = (NSString*) args[@"appScheme"];
        
                // ref
                BMKOpenOption* ref = (BMKOpenOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.appScheme = appScheme;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOpenOption::set_isSupportWeb_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL isSupportWeb = [args[@"isSupportWeb"] boolValue];
        
                // ref
                BMKOpenOption* ref = (BMKOpenOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.isSupportWeb = isSupportWeb;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOpenPanoramaOption::set_poiUid_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* poiUid = (NSString*) args[@"poiUid"];
        
                // ref
                BMKOpenPanoramaOption* ref = (BMKOpenPanoramaOption*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.poiUid = poiUid;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKNaviPara::set_startPoint_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKPlanNode* startPoint = (BMKPlanNode*) HEAP[@([args[@"startPoint"] integerValue])];
        
                // ref
                BMKNaviPara* ref = (BMKNaviPara*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.startPoint = startPoint;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKNaviPara::set_endPoint_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKPlanNode* endPoint = (BMKPlanNode*) HEAP[@([args[@"endPoint"] integerValue])];
        
                // ref
                BMKNaviPara* ref = (BMKNaviPara*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.endPoint = endPoint;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKNaviPara::set_naviType_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                BMK_NAVI_TYPE naviType = (BMK_NAVI_TYPE) [args[@"naviType"] integerValue];
        
                // ref
                BMKNaviPara* ref = (BMKNaviPara*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.naviType = naviType;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKNaviPara::set_appScheme_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* appScheme = (NSString*) args[@"appScheme"];
        
                // ref
                BMKNaviPara* ref = (BMKNaviPara*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.appScheme = appScheme;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKNaviPara::set_appName_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* appName = (NSString*) args[@"appName"];
        
                // ref
                BMKNaviPara* ref = (BMKNaviPara*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.appName = appName;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKNaviPara::set_isSupportWeb_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL isSupportWeb = [args[@"isSupportWeb"] boolValue];
        
                // ref
                BMKNaviPara* ref = (BMKNaviPara*) HEAP[(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) args)[@"refId"]];
        
                ref.isSupportWeb = isSupportWeb;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"RefClass::isKindOfBMKOpenRoute": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKOpenRoute class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKOpenPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKOpenPoi class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKOpenPoiDetailOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKOpenPoiDetailOption class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKOpenPoiNearbyOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKOpenPoiNearbyOption class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKFavPoiInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKFavPoiInfo class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKOpenRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKOpenRouteOption class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKOpenWalkingRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKOpenWalkingRouteOption class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKOpenDrivingRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKOpenDrivingRouteOption class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKOpenTransitRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKOpenTransitRouteOption class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKOpenOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKOpenOption class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKOpenPanoramaOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKOpenPanoramaOption class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKOpenPanorama": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKOpenPanorama class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKFavPoiManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKFavPoiManager class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKNaviPara": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKNaviPara class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKNavigation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            BOOL isTargetType = [ref isKindOfClass:[BMKNavigation class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::asBMKOpenRoute": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKOpenRoute *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKOpenPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKOpenPoi *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKOpenPoiDetailOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKOpenPoiDetailOption *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKOpenPoiNearbyOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKOpenPoiNearbyOption *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKFavPoiInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKFavPoiInfo *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKOpenRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKOpenRouteOption *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKOpenWalkingRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKOpenWalkingRouteOption *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKOpenDrivingRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKOpenDrivingRouteOption *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKOpenTransitRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKOpenTransitRouteOption *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKOpenOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKOpenOption *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKOpenPanoramaOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKOpenPanoramaOption *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKOpenPanorama": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKOpenPanorama *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKFavPoiManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKFavPoiManager *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKNaviPara": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKNaviPara *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"RefClass::asBMKNavigation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSNumber* refId = ((NSDictionary<NSString*, NSNumber*>*) args)[@"refId"];
            id ref = HEAP[refId];
        
            // 转型
            ref = (BMKNavigation *) ref;
            // 放回HEAP
            HEAP[refId] = ref;
        
            methodResult(refId);
        },
        
        @"ObjectFactory::createBMKOpenRoute": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOpenRoute");
            }
        
            BMKOpenRoute* ref = [[BMKOpenRoute alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKOpenPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOpenPoi");
            }
        
            BMKOpenPoi* ref = [[BMKOpenPoi alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKOpenPoiDetailOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOpenPoiDetailOption");
            }
        
            BMKOpenPoiDetailOption* ref = [[BMKOpenPoiDetailOption alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKOpenPoiNearbyOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOpenPoiNearbyOption");
            }
        
            BMKOpenPoiNearbyOption* ref = [[BMKOpenPoiNearbyOption alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKFavPoiInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKFavPoiInfo");
            }
        
            BMKFavPoiInfo* ref = [[BMKFavPoiInfo alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKOpenRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOpenRouteOption");
            }
        
            BMKOpenRouteOption* ref = [[BMKOpenRouteOption alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKOpenWalkingRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOpenWalkingRouteOption");
            }
        
            BMKOpenWalkingRouteOption* ref = [[BMKOpenWalkingRouteOption alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKOpenDrivingRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOpenDrivingRouteOption");
            }
        
            BMKOpenDrivingRouteOption* ref = [[BMKOpenDrivingRouteOption alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKOpenTransitRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOpenTransitRouteOption");
            }
        
            BMKOpenTransitRouteOption* ref = [[BMKOpenTransitRouteOption alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKOpenOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOpenOption");
            }
        
            BMKOpenOption* ref = [[BMKOpenOption alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKOpenPanoramaOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOpenPanoramaOption");
            }
        
            BMKOpenPanoramaOption* ref = [[BMKOpenPanoramaOption alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKOpenPanorama": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOpenPanorama");
            }
        
            BMKOpenPanorama* ref = [[BMKOpenPanorama alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKFavPoiManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKFavPoiManager");
            }
        
            BMKFavPoiManager* ref = [[BMKFavPoiManager alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKNaviPara": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKNaviPara");
            }
        
            BMKNaviPara* ref = [[BMKNaviPara alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKNavigation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKNavigation");
            }
        
            BMKNavigation* ref = [[BMKNavigation alloc] init];
            HEAP[@(ref.hash)] = ref;
        
            methodResult(@(ref.hash));
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKOpenRoute": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKOpenRoute* ref = [[BMKOpenRoute alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKOpenPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKOpenPoi* ref = [[BMKOpenPoi alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKOpenPoiDetailOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKOpenPoiDetailOption* ref = [[BMKOpenPoiDetailOption alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKOpenPoiNearbyOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKOpenPoiNearbyOption* ref = [[BMKOpenPoiNearbyOption alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKFavPoiInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKFavPoiInfo* ref = [[BMKFavPoiInfo alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKOpenRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKOpenRouteOption* ref = [[BMKOpenRouteOption alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKOpenWalkingRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKOpenWalkingRouteOption* ref = [[BMKOpenWalkingRouteOption alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKOpenDrivingRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKOpenDrivingRouteOption* ref = [[BMKOpenDrivingRouteOption alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKOpenTransitRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKOpenTransitRouteOption* ref = [[BMKOpenTransitRouteOption alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKOpenOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKOpenOption* ref = [[BMKOpenOption alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKOpenPanoramaOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKOpenPanoramaOption* ref = [[BMKOpenPanoramaOption alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKOpenPanorama": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKOpenPanorama* ref = [[BMKOpenPanorama alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKFavPoiManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKFavPoiManager* ref = [[BMKFavPoiManager alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKNaviPara": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKNaviPara* ref = [[BMKNaviPara alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKNavigation": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSNumber*>* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < [(NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"] integerValue]; __i__++) {
                BMKNavigation* ref = [[BMKNavigation alloc] init];
                HEAP[@(ref.hash)] = ref;
        
                [resultList addObject:@(ref.hash)];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"BMKMapPointForCoordinate::BMKMapPointForCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapPointForCoordinate::BMKMapPointForCoordinate(%@)", args[@"coordinate"]);
            }
        
            // invoke native method
            BMKMapPoint result = BMKMapPointForCoordinate(coordinate);
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(BMKMapPoint)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        @"BMKCoordinateForMapPoint::BMKCoordinateForMapPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* mapPointValue = (NSValue*) HEAP[@([args[@"mapPoint"] integerValue])];
            BMKMapPoint mapPoint;
            [mapPointValue getValue:&mapPoint];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKCoordinateForMapPoint::BMKCoordinateForMapPoint(%@)", args[@"mapPoint"]);
            }
        
            // invoke native method
            CLLocationCoordinate2D result = BMKCoordinateForMapPoint(mapPoint);
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        @"BMKConvertToBaiduMercatorFromBD09LL::BMKConvertToBaiduMercatorFromBD09LL": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* bd09llCoordinateValue = (NSValue*) HEAP[@([args[@"bd09llCoordinate"] integerValue])];
            CLLocationCoordinate2D bd09llCoordinate;
            [bd09llCoordinateValue getValue:&bd09llCoordinate];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKConvertToBaiduMercatorFromBD09LL::BMKConvertToBaiduMercatorFromBD09LL(%@)", args[@"bd09llCoordinate"]);
            }
        
            // invoke native method
            CGPoint result = BMKConvertToBaiduMercatorFromBD09LL(bd09llCoordinate);
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CGPoint)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        @"BMKConvertToBD09LLFromBaiduMercator::BMKConvertToBD09LLFromBaiduMercator": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* bdMCTCoordinateValue = (NSValue*) HEAP[@([args[@"bdMCTCoordinate"] integerValue])];
            CGPoint bdMCTCoordinate;
            [bdMCTCoordinateValue getValue:&bdMCTCoordinate];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKConvertToBD09LLFromBaiduMercator::BMKConvertToBD09LLFromBaiduMercator(%@)", args[@"bdMCTCoordinate"]);
            }
        
            // invoke native method
            CLLocationCoordinate2D result = BMKConvertToBD09LLFromBaiduMercator(bdMCTCoordinate);
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        @"BMKCoordTrans::BMKCoordTrans": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
            // enum arg
            BMK_COORD_TYPE fromType = (BMK_COORD_TYPE) [args[@"fromType"] integerValue];
            // enum arg
            BMK_COORD_TYPE toType = (BMK_COORD_TYPE) [args[@"toType"] integerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKCoordTrans::BMKCoordTrans(%@, %@, %@)", args[@"coordinate"], args[@"fromType"], args[@"toType"]);
            }
        
            // invoke native method
            CLLocationCoordinate2D result = BMKCoordTrans(coordinate, fromType, toType);
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        @"BMKConvertBaiduCoorFrom::BMKConvertBaiduCoorFrom": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) HEAP[@([args[@"coordinate"] integerValue])];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
            // enum arg
            BMK_COORD_TYPE type = (BMK_COORD_TYPE) [args[@"type"] integerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKConvertBaiduCoorFrom::BMKConvertBaiduCoorFrom(%@, %@)", args[@"coordinate"], args[@"type"]);
            }
        
            // invoke native method
            NSDictionary* result = BMKConvertBaiduCoorFrom(coordinate, type);
        
            // result
            // 返回值: jsonable
            id jsonableResult = result;
        
            methodResult(jsonableResult);
        },
        @"BMKMetersPerMapPointAtLatitude::BMKMetersPerMapPointAtLatitude": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            CLLocationDegrees latitude = [args[@"latitude"] doubleValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMetersPerMapPointAtLatitude::BMKMetersPerMapPointAtLatitude(%@)", args[@"latitude"]);
            }
        
            // invoke native method
            CLLocationDistance result = BMKMetersPerMapPointAtLatitude(latitude);
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"BMKMapPointsPerMeterAtLatitude::BMKMapPointsPerMeterAtLatitude": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            CLLocationDegrees latitude = [args[@"latitude"] doubleValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapPointsPerMeterAtLatitude::BMKMapPointsPerMeterAtLatitude(%@)", args[@"latitude"]);
            }
        
            // invoke native method
            double result = BMKMapPointsPerMeterAtLatitude(latitude);
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"BMKMetersBetweenMapPoints::BMKMetersBetweenMapPoints": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* aValue = (NSValue*) HEAP[@([args[@"a"] integerValue])];
            BMKMapPoint a;
            [aValue getValue:&a];
            // struct arg
            NSValue* bValue = (NSValue*) HEAP[@([args[@"b"] integerValue])];
            BMKMapPoint b;
            [bValue getValue:&b];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMetersBetweenMapPoints::BMKMetersBetweenMapPoints(%@, %@)", args[@"a"], args[@"b"]);
            }
        
            // invoke native method
            CLLocationDistance result = BMKMetersBetweenMapPoints(a, b);
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"BMKGetNearestMapPointFromPolyline::BMKGetNearestMapPointFromPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* pointValue = (NSValue*) HEAP[@([args[@"point"] integerValue])];
            BMKMapPoint point;
            [pointValue getValue:&point];
            // list arg struct
            NSArray* polylineRefIdArray = (NSArray*) args[@"polyline"];
            BMKMapPoint polyline[polylineRefIdArray.count];
        
            for (int __i__ = 0; __i__ < polylineRefIdArray.count; __i__++) {
                NSValue* polylineValue = (NSValue*) HEAP[[polylineRefIdArray objectAtIndex:__i__]];
                BMKMapPoint polylineItem;
                [polylineValue getValue:&polylineItem];
                polyline[__i__] = polylineItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKGetNearestMapPointFromPolyline::BMKGetNearestMapPointFromPolyline(%@, %@, %@)", args[@"point"], args[@"polyline"], args[@"count"]);
            }
        
            // invoke native method
            BMKMapPoint result = BMKGetNearestMapPointFromPolyline(point, polyline, count);
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(BMKMapPoint)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        @"BMKGetPointToTheVerticalFootOfLine::BMKGetPointToTheVerticalFootOfLine": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* pointValue = (NSValue*) HEAP[@([args[@"point"] integerValue])];
            BMKMapPoint point;
            [pointValue getValue:&point];
            // struct arg
            NSValue* lineStartPtValue = (NSValue*) HEAP[@([args[@"lineStartPt"] integerValue])];
            BMKMapPoint lineStartPt;
            [lineStartPtValue getValue:&lineStartPt];
            // struct arg
            NSValue* lineEndPtValue = (NSValue*) HEAP[@([args[@"lineEndPt"] integerValue])];
            BMKMapPoint lineEndPt;
            [lineEndPtValue getValue:&lineEndPt];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKGetPointToTheVerticalFootOfLine::BMKGetPointToTheVerticalFootOfLine(%@, %@, %@)", args[@"point"], args[@"lineStartPt"], args[@"lineEndPt"]);
            }
        
            // invoke native method
            BMKMapPoint result = BMKGetPointToTheVerticalFootOfLine(point, lineStartPt, lineEndPt);
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(BMKMapPoint)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        @"BMKGetDistanceFromPointToLine::BMKGetDistanceFromPointToLine": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* pointValue = (NSValue*) HEAP[@([args[@"point"] integerValue])];
            BMKMapPoint point;
            [pointValue getValue:&point];
            // struct arg
            NSValue* lineStartPtValue = (NSValue*) HEAP[@([args[@"lineStartPt"] integerValue])];
            BMKMapPoint lineStartPt;
            [lineStartPtValue getValue:&lineStartPt];
            // struct arg
            NSValue* lineEndPtValue = (NSValue*) HEAP[@([args[@"lineEndPt"] integerValue])];
            BMKMapPoint lineEndPt;
            [lineEndPtValue getValue:&lineEndPt];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKGetDistanceFromPointToLine::BMKGetDistanceFromPointToLine(%@, %@, %@)", args[@"point"], args[@"lineStartPt"], args[@"lineEndPt"]);
            }
        
            // invoke native method
            CLLocationDistance result = BMKGetDistanceFromPointToLine(point, lineStartPt, lineEndPt);
        
            // result
            // 返回值: Value
            id jsonableResult = @(result);
        
            methodResult(jsonableResult);
        },
        @"BMKCoordinateRegionMakeWithDistance::BMKCoordinateRegionMakeWithDistance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* centerCoordinateValue = (NSValue*) HEAP[@([args[@"centerCoordinate"] integerValue])];
            CLLocationCoordinate2D centerCoordinate;
            [centerCoordinateValue getValue:&centerCoordinate];
            // jsonable arg
            CLLocationDistance latitudinalMeters = [args[@"latitudinalMeters"] doubleValue];
            // jsonable arg
            CLLocationDistance longitudinalMeters = [args[@"longitudinalMeters"] doubleValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKCoordinateRegionMakeWithDistance::BMKCoordinateRegionMakeWithDistance(%@, %@, %@)", args[@"centerCoordinate"], args[@"latitudinalMeters"], args[@"longitudinalMeters"]);
            }
        
            // invoke native method
            BMKCoordinateRegion result = BMKCoordinateRegionMakeWithDistance(centerCoordinate, latitudinalMeters, longitudinalMeters);
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(BMKCoordinateRegion)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        @"BMKMapRectUnion::BMKMapRectUnion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rect1Value = (NSValue*) HEAP[@([args[@"rect1"] integerValue])];
            BMKMapRect rect1;
            [rect1Value getValue:&rect1];
            // struct arg
            NSValue* rect2Value = (NSValue*) HEAP[@([args[@"rect2"] integerValue])];
            BMKMapRect rect2;
            [rect2Value getValue:&rect2];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectUnion::BMKMapRectUnion(%@, %@)", args[@"rect1"], args[@"rect2"]);
            }
        
            // invoke native method
            BMKMapRect result = BMKMapRectUnion(rect1, rect2);
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(BMKMapRect)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
        @"BMKMapRectIntersection::BMKMapRectIntersection": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rect1Value = (NSValue*) HEAP[@([args[@"rect1"] integerValue])];
            BMKMapRect rect1;
            [rect1Value getValue:&rect1];
            // struct arg
            NSValue* rect2Value = (NSValue*) HEAP[@([args[@"rect2"] integerValue])];
            BMKMapRect rect2;
            [rect2Value getValue:&rect2];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectIntersection::BMKMapRectIntersection(%@, %@)", args[@"rect1"], args[@"rect2"]);
            }
        
            // invoke native method
            BMKMapRect result = BMKMapRectIntersection(rect1, rect2);
        
            // result
            // 返回值: 结构体
            NSValue* resultValue = [NSValue value:&result withObjCType:@encode(BMKMapRect)];
            HEAP[@(resultValue.hash)] = resultValue;
            NSNumber* jsonableResult = @(resultValue.hash);
        
            methodResult(jsonableResult);
        },
    };
}

@end
