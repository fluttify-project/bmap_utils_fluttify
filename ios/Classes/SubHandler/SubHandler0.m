//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "SubHandler0.h"
#import "FluttifyMessageCodec.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation BmapUtilsFluttifyPlugin (SubHandler0)
- (NSDictionary<NSString*, Handler>*) getSubHandler0 {
    __weak __typeof(self)weakSelf = self;
    return @{
        @"BMKOpenRoute::openBaiduMapWalkingRoute": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            BMKOpenWalkingRouteOption* option = (BMKOpenWalkingRouteOption*) args[@"option"];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOpenRoute::openBaiduMapWalkingRoute(%@)", args[@"option"]);
            }
        
            // invoke native method
            BMKOpenErrorCode result = [BMKOpenRoute openBaiduMapWalkingRoute: option];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKOpenRoute::openBaiduMapTransitRoute": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            BMKOpenTransitRouteOption* option = (BMKOpenTransitRouteOption*) args[@"option"];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOpenRoute::openBaiduMapTransitRoute(%@)", args[@"option"]);
            }
        
            // invoke native method
            BMKOpenErrorCode result = [BMKOpenRoute openBaiduMapTransitRoute: option];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKOpenRoute::openBaiduMapDrivingRoute": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            BMKOpenDrivingRouteOption* option = (BMKOpenDrivingRouteOption*) args[@"option"];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOpenRoute::openBaiduMapDrivingRoute(%@)", args[@"option"]);
            }
        
            // invoke native method
            BMKOpenErrorCode result = [BMKOpenRoute openBaiduMapDrivingRoute: option];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKOpenPoi::openBaiduMapPoiDetailPage": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            BMKOpenPoiDetailOption* option = (BMKOpenPoiDetailOption*) args[@"option"];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOpenPoi::openBaiduMapPoiDetailPage(%@)", args[@"option"]);
            }
        
            // invoke native method
            BMKOpenErrorCode result = [BMKOpenPoi openBaiduMapPoiDetailPage: option];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKOpenPoi::openBaiduMapPoiNearbySearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            BMKOpenPoiNearbyOption* option = (BMKOpenPoiNearbyOption*) args[@"option"];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOpenPoi::openBaiduMapPoiNearbySearch(%@)", args[@"option"]);
            }
        
            // invoke native method
            BMKOpenErrorCode result = [BMKOpenPoi openBaiduMapPoiNearbySearch: option];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKOpenPanorama::openBaiduMapPanorama": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            BMKOpenPanoramaOption* option = (BMKOpenPanoramaOption*) args[@"option"];
        
            // ref
            BMKOpenPanorama* ref = (BMKOpenPanorama*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKOpenPanorama@%@::openBaiduMapPanorama(%@)", args[@"refId"], args[@"option"]);
            }
        
            // invoke native method
            [ref openBaiduMapPanorama : option];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"BMKFavPoiManager::addFavPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            BMKFavPoiInfo* favPoiInfo = (BMKFavPoiInfo*) args[@"favPoiInfo"];
        
            // ref
            BMKFavPoiManager* ref = (BMKFavPoiManager*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKFavPoiManager@%@::addFavPoi(%@)", args[@"refId"], args[@"favPoiInfo"]);
            }
        
            // invoke native method
            NSInteger result = [ref addFavPoi: favPoiInfo];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKFavPoiManager::getFavPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSString* favId = (NSString*) args[@"favId"];
        
            // ref
            BMKFavPoiManager* ref = (BMKFavPoiManager*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKFavPoiManager@%@::getFavPoi(%@)", args[@"refId"], args[@"favId"]);
            }
        
            // invoke native method
            BMKFavPoiInfo* result = [ref getFavPoi: favId];
        
            // result
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKFavPoiManager::getAllFavPois": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            BMKFavPoiManager* ref = (BMKFavPoiManager*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKFavPoiManager@%@::getAllFavPois()", args[@"refId"]);
            }
        
            // invoke native method
            NSArray* result = [ref getAllFavPois];
        
            // result
            // 返回值: 列表
            NSMutableArray<NSObject*>* __result__ = [NSMutableArray array];
            for (int __i__ = 0; __i__ < result.count; __i__++) {
                NSObject* object = [result objectAtIndex:__i__];
                [__result__ addObject: object];
            }
        
            methodResult(__result__);
        },
        @"BMKFavPoiManager::updateFavPoi_favPoiInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSString* favId = (NSString*) args[@"favId"];
            // ref arg
            BMKFavPoiInfo* favPoiInfo = (BMKFavPoiInfo*) args[@"favPoiInfo"];
        
            // ref
            BMKFavPoiManager* ref = (BMKFavPoiManager*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKFavPoiManager@%@::updateFavPoi(%@, %@)", args[@"refId"], args[@"favId"], args[@"favPoiInfo"]);
            }
        
            // invoke native method
            BOOL result = [ref updateFavPoi: favId favPoiInfo: favPoiInfo];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKFavPoiManager::deleteFavPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            NSString* favId = (NSString*) args[@"favId"];
        
            // ref
            BMKFavPoiManager* ref = (BMKFavPoiManager*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKFavPoiManager@%@::deleteFavPoi(%@)", args[@"refId"], args[@"favId"]);
            }
        
            // invoke native method
            BOOL result = [ref deleteFavPoi: favId];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKFavPoiManager::clearAllFavPois": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
        
        
            // ref
            BMKFavPoiManager* ref = (BMKFavPoiManager*) args[@"__this__"];
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKFavPoiManager@%@::clearAllFavPois()", args[@"refId"]);
            }
        
            // invoke native method
            BOOL result = [ref clearAllFavPois];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKNavigation::openBaiduMapNavigation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            BMKNaviPara* para = (BMKNaviPara*) args[@"para"];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKNavigation::openBaiduMapNavigation(%@)", args[@"para"]);
            }
        
            // invoke native method
            BMKOpenErrorCode result = [BMKNavigation openBaiduMapNavigation: para];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKNavigation::openBaiduMapWalkNavigation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            BMKNaviPara* para = (BMKNaviPara*) args[@"para"];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKNavigation::openBaiduMapWalkNavigation(%@)", args[@"para"]);
            }
        
            // invoke native method
            BMKOpenErrorCode result = [BMKNavigation openBaiduMapWalkNavigation: para];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKNavigation::openBaiduMapRideNavigation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            BMKNaviPara* para = (BMKNaviPara*) args[@"para"];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKNavigation::openBaiduMapRideNavigation(%@)", args[@"para"]);
            }
        
            // invoke native method
            BMKOpenErrorCode result = [BMKNavigation openBaiduMapRideNavigation: para];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKNavigation::openBaiduMapwalkARNavigation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // ref arg
            BMKNaviPara* para = (BMKNaviPara*) args[@"para"];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKNavigation::openBaiduMapwalkARNavigation(%@)", args[@"para"]);
            }
        
            // invoke native method
            BMKOpenErrorCode result = [BMKNavigation openBaiduMapwalkARNavigation: para];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKOpenRoute::openBaiduMapWalkingRoute_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKOpenWalkingRouteOption* option = (BMKOpenWalkingRouteOption*) args[@"option"];
        
                // ref
        
        
                // invoke native method
                BMKOpenErrorCode result = [BMKOpenRoute openBaiduMapWalkingRoute: option];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOpenRoute::openBaiduMapTransitRoute_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKOpenTransitRouteOption* option = (BMKOpenTransitRouteOption*) args[@"option"];
        
                // ref
        
        
                // invoke native method
                BMKOpenErrorCode result = [BMKOpenRoute openBaiduMapTransitRoute: option];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOpenRoute::openBaiduMapDrivingRoute_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKOpenDrivingRouteOption* option = (BMKOpenDrivingRouteOption*) args[@"option"];
        
                // ref
        
        
                // invoke native method
                BMKOpenErrorCode result = [BMKOpenRoute openBaiduMapDrivingRoute: option];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOpenPoi::openBaiduMapPoiDetailPage_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKOpenPoiDetailOption* option = (BMKOpenPoiDetailOption*) args[@"option"];
        
                // ref
        
        
                // invoke native method
                BMKOpenErrorCode result = [BMKOpenPoi openBaiduMapPoiDetailPage: option];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOpenPoi::openBaiduMapPoiNearbySearch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKOpenPoiNearbyOption* option = (BMKOpenPoiNearbyOption*) args[@"option"];
        
                // ref
        
        
                // invoke native method
                BMKOpenErrorCode result = [BMKOpenPoi openBaiduMapPoiNearbySearch: option];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOpenPanorama::openBaiduMapPanorama_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKOpenPanoramaOption* option = (BMKOpenPanoramaOption*) args[@"option"];
        
                // ref
                BMKOpenPanorama* ref = (BMKOpenPanorama*) args[@"__this__"];
        
                // invoke native method
                [ref openBaiduMapPanorama : option];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKFavPoiManager::addFavPoi_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKFavPoiInfo* favPoiInfo = (BMKFavPoiInfo*) args[@"favPoiInfo"];
        
                // ref
                BMKFavPoiManager* ref = (BMKFavPoiManager*) args[@"__this__"];
        
                // invoke native method
                NSInteger result = [ref addFavPoi: favPoiInfo];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKFavPoiManager::getFavPoi_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* favId = (NSString*) args[@"favId"];
        
                // ref
                BMKFavPoiManager* ref = (BMKFavPoiManager*) args[@"__this__"];
        
                // invoke native method
                BMKFavPoiInfo* result = [ref getFavPoi: favId];
        
                // result
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKFavPoiManager::getAllFavPois_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                BMKFavPoiManager* ref = (BMKFavPoiManager*) args[@"__this__"];
        
                // invoke native method
                NSArray* result = [ref getAllFavPois];
        
                // result
                // 返回值: 列表
                NSMutableArray<NSObject*>* __result__ = [NSMutableArray array];
                for (int __i__ = 0; __i__ < result.count; __i__++) {
                    NSObject* object = [result objectAtIndex:__i__];
                    [__result__ addObject: object];
                }
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKFavPoiManager::updateFavPoi_favPoiInfo_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* favId = (NSString*) args[@"favId"];
                // ref arg
                BMKFavPoiInfo* favPoiInfo = (BMKFavPoiInfo*) args[@"favPoiInfo"];
        
                // ref
                BMKFavPoiManager* ref = (BMKFavPoiManager*) args[@"__this__"];
        
                // invoke native method
                BOOL result = [ref updateFavPoi: favId favPoiInfo: favPoiInfo];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKFavPoiManager::deleteFavPoi_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* favId = (NSString*) args[@"favId"];
        
                // ref
                BMKFavPoiManager* ref = (BMKFavPoiManager*) args[@"__this__"];
        
                // invoke native method
                BOOL result = [ref deleteFavPoi: favId];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKFavPoiManager::clearAllFavPois_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
                BMKFavPoiManager* ref = (BMKFavPoiManager*) args[@"__this__"];
        
                // invoke native method
                BOOL result = [ref clearAllFavPois];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKNavigation::openBaiduMapNavigation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKNaviPara* para = (BMKNaviPara*) args[@"para"];
        
                // ref
        
        
                // invoke native method
                BMKOpenErrorCode result = [BMKNavigation openBaiduMapNavigation: para];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKNavigation::openBaiduMapWalkNavigation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKNaviPara* para = (BMKNaviPara*) args[@"para"];
        
                // ref
        
        
                // invoke native method
                BMKOpenErrorCode result = [BMKNavigation openBaiduMapWalkNavigation: para];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKNavigation::openBaiduMapRideNavigation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKNaviPara* para = (BMKNaviPara*) args[@"para"];
        
                // ref
        
        
                // invoke native method
                BMKOpenErrorCode result = [BMKNavigation openBaiduMapRideNavigation: para];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKNavigation::openBaiduMapwalkARNavigation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKNaviPara* para = (BMKNaviPara*) args[@"para"];
        
                // ref
        
        
                // invoke native method
                BMKOpenErrorCode result = [BMKNavigation openBaiduMapwalkARNavigation: para];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        @"BMKOpenPoiDetailOption::get_poiUid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenPoiDetailOption::get_poiUid");
            }
        
            // ref object
            BMKOpenPoiDetailOption* ref = (BMKOpenPoiDetailOption*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.poiUid;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"BMKOpenPoiNearbyOption::get_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenPoiNearbyOption::get_location");
            }
        
            // ref object
            BMKOpenPoiNearbyOption* ref = (BMKOpenPoiNearbyOption*) args[@"__this__"];
        
            // invoke native method
            CLLocationCoordinate2D result = ref.location;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
            methodResult(__result__);
        },
        
        @"BMKOpenPoiNearbyOption::get_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenPoiNearbyOption::get_radius");
            }
        
            // ref object
            BMKOpenPoiNearbyOption* ref = (BMKOpenPoiNearbyOption*) args[@"__this__"];
        
            // invoke native method
            NSUInteger result = ref.radius;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"BMKOpenPoiNearbyOption::get_keyword": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenPoiNearbyOption::get_keyword");
            }
        
            // ref object
            BMKOpenPoiNearbyOption* ref = (BMKOpenPoiNearbyOption*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.keyword;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"BMKFavPoiInfo::get_favId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKFavPoiInfo::get_favId");
            }
        
            // ref object
            BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.favId;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"BMKFavPoiInfo::get_poiName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKFavPoiInfo::get_poiName");
            }
        
            // ref object
            BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.poiName;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"BMKFavPoiInfo::get_poiUid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKFavPoiInfo::get_poiUid");
            }
        
            // ref object
            BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.poiUid;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"BMKFavPoiInfo::get_pt": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKFavPoiInfo::get_pt");
            }
        
            // ref object
            BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
        
            // invoke native method
            CLLocationCoordinate2D result = ref.pt;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
            methodResult(__result__);
        },
        
        @"BMKFavPoiInfo::get_address": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKFavPoiInfo::get_address");
            }
        
            // ref object
            BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.address;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"BMKFavPoiInfo::get_cityName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKFavPoiInfo::get_cityName");
            }
        
            // ref object
            BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.cityName;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"BMKFavPoiInfo::get_timeStamp": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKFavPoiInfo::get_timeStamp");
            }
        
            // ref object
            BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
        
            // invoke native method
            NSUInteger result = ref.timeStamp;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"BMKOpenRouteOption::get_startPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenRouteOption::get_startPoint");
            }
        
            // ref object
            BMKOpenRouteOption* ref = (BMKOpenRouteOption*) args[@"__this__"];
        
            // invoke native method
            BMKPlanNode* result = ref.startPoint;
        
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"BMKOpenRouteOption::get_endPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenRouteOption::get_endPoint");
            }
        
            // ref object
            BMKOpenRouteOption* ref = (BMKOpenRouteOption*) args[@"__this__"];
        
            // invoke native method
            BMKPlanNode* result = ref.endPoint;
        
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"BMKOpenTransitRouteOption::get_openTransitPolicy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenTransitRouteOption::get_openTransitPolicy");
            }
        
            // ref object
            BMKOpenTransitRouteOption* ref = (BMKOpenTransitRouteOption*) args[@"__this__"];
        
            // invoke native method
            BMKOpenTransitPolicy result = ref.openTransitPolicy;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"BMKOpenOption::get_appScheme": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenOption::get_appScheme");
            }
        
            // ref object
            BMKOpenOption* ref = (BMKOpenOption*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.appScheme;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"BMKOpenOption::get_isSupportWeb": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenOption::get_isSupportWeb");
            }
        
            // ref object
            BMKOpenOption* ref = (BMKOpenOption*) args[@"__this__"];
        
            // invoke native method
            BOOL result = ref.isSupportWeb;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"BMKOpenPanoramaOption::get_poiUid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenPanoramaOption::get_poiUid");
            }
        
            // ref object
            BMKOpenPanoramaOption* ref = (BMKOpenPanoramaOption*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.poiUid;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"BMKNaviPara::get_startPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKNaviPara::get_startPoint");
            }
        
            // ref object
            BMKNaviPara* ref = (BMKNaviPara*) args[@"__this__"];
        
            // invoke native method
            BMKPlanNode* result = ref.startPoint;
        
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"BMKNaviPara::get_endPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKNaviPara::get_endPoint");
            }
        
            // ref object
            BMKNaviPara* ref = (BMKNaviPara*) args[@"__this__"];
        
            // invoke native method
            BMKPlanNode* result = ref.endPoint;
        
            // return a ref
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"BMKNaviPara::get_naviType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKNaviPara::get_naviType");
            }
        
            // ref object
            BMKNaviPara* ref = (BMKNaviPara*) args[@"__this__"];
        
            // invoke native method
            BMK_NAVI_TYPE result = ref.naviType;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"BMKNaviPara::get_appScheme": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKNaviPara::get_appScheme");
            }
        
            // ref object
            BMKNaviPara* ref = (BMKNaviPara*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.appScheme;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"BMKNaviPara::get_appName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKNaviPara::get_appName");
            }
        
            // ref object
            BMKNaviPara* ref = (BMKNaviPara*) args[@"__this__"];
        
            // invoke native method
            NSString* result = ref.appName;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"BMKNaviPara::get_isSupportWeb": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKNaviPara::get_isSupportWeb");
            }
        
            // ref object
            BMKNaviPara* ref = (BMKNaviPara*) args[@"__this__"];
        
            // invoke native method
            BOOL result = ref.isSupportWeb;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"BMKOpenPoiDetailOption::get_poiUid_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKOpenPoiDetailOption* ref = (BMKOpenPoiDetailOption*) args[@"__this__"];
        
                NSString* result = ref.poiUid;
        
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"BMKOpenPoiNearbyOption::get_location_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKOpenPoiNearbyOption* ref = (BMKOpenPoiNearbyOption*) args[@"__this__"];
        
                CLLocationCoordinate2D result = ref.location;
        
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"BMKOpenPoiNearbyOption::get_radius_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKOpenPoiNearbyOption* ref = (BMKOpenPoiNearbyOption*) args[@"__this__"];
        
                NSUInteger result = ref.radius;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"BMKOpenPoiNearbyOption::get_keyword_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKOpenPoiNearbyOption* ref = (BMKOpenPoiNearbyOption*) args[@"__this__"];
        
                NSString* result = ref.keyword;
        
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"BMKFavPoiInfo::get_favId_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
        
                NSString* result = ref.favId;
        
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"BMKFavPoiInfo::get_poiName_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
        
                NSString* result = ref.poiName;
        
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"BMKFavPoiInfo::get_poiUid_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
        
                NSString* result = ref.poiUid;
        
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"BMKFavPoiInfo::get_pt_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
        
                CLLocationCoordinate2D result = ref.pt;
        
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"BMKFavPoiInfo::get_address_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
        
                NSString* result = ref.address;
        
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"BMKFavPoiInfo::get_cityName_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
        
                NSString* result = ref.cityName;
        
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"BMKFavPoiInfo::get_timeStamp_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
        
                NSUInteger result = ref.timeStamp;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"BMKOpenRouteOption::get_startPoint_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKOpenRouteOption* ref = (BMKOpenRouteOption*) args[@"__this__"];
        
                BMKPlanNode* result = ref.startPoint;
        
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"BMKOpenRouteOption::get_endPoint_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKOpenRouteOption* ref = (BMKOpenRouteOption*) args[@"__this__"];
        
                BMKPlanNode* result = ref.endPoint;
        
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"BMKOpenTransitRouteOption::get_openTransitPolicy_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKOpenTransitRouteOption* ref = (BMKOpenTransitRouteOption*) args[@"__this__"];
        
                BMKOpenTransitPolicy result = ref.openTransitPolicy;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"BMKOpenOption::get_appScheme_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKOpenOption* ref = (BMKOpenOption*) args[@"__this__"];
        
                NSString* result = ref.appScheme;
        
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"BMKOpenOption::get_isSupportWeb_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKOpenOption* ref = (BMKOpenOption*) args[@"__this__"];
        
                BOOL result = ref.isSupportWeb;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"BMKOpenPanoramaOption::get_poiUid_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKOpenPanoramaOption* ref = (BMKOpenPanoramaOption*) args[@"__this__"];
        
                NSString* result = ref.poiUid;
        
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"BMKNaviPara::get_startPoint_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKNaviPara* ref = (BMKNaviPara*) args[@"__this__"];
        
                BMKPlanNode* result = ref.startPoint;
        
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"BMKNaviPara::get_endPoint_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKNaviPara* ref = (BMKNaviPara*) args[@"__this__"];
        
                BMKPlanNode* result = ref.endPoint;
        
                // return a ref
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"BMKNaviPara::get_naviType_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKNaviPara* ref = (BMKNaviPara*) args[@"__this__"];
        
                BMK_NAVI_TYPE result = ref.naviType;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"BMKNaviPara::get_appScheme_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKNaviPara* ref = (BMKNaviPara*) args[@"__this__"];
        
                NSString* result = ref.appScheme;
        
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"BMKNaviPara::get_appName_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKNaviPara* ref = (BMKNaviPara*) args[@"__this__"];
        
                NSString* result = ref.appName;
        
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"BMKNaviPara::get_isSupportWeb_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                BMKNaviPara* ref = (BMKNaviPara*) args[@"__this__"];
        
                BOOL result = ref.isSupportWeb;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"BMKOpenPoiDetailOption::set_poiUid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenPoiDetailOption::set_poiUid");
            }
        
            // args
            // jsonable arg
            NSString* poiUid = (NSString*) args[@"poiUid"];
        
            // ref
            BMKOpenPoiDetailOption* ref = (BMKOpenPoiDetailOption*) args[@"__this__"];
        
            ref.poiUid = poiUid;
            methodResult(@"success");
        },
        
        @"BMKOpenPoiNearbyOption::set_location": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenPoiNearbyOption::set_location");
            }
        
            // args
            // struct arg
            NSValue* locationValue = (NSValue*) args[@"location"];
            CLLocationCoordinate2D location;
            [locationValue getValue:&location];
        
            // ref
            BMKOpenPoiNearbyOption* ref = (BMKOpenPoiNearbyOption*) args[@"__this__"];
        
            ref.location = location;
            methodResult(@"success");
        },
        
        @"BMKOpenPoiNearbyOption::set_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenPoiNearbyOption::set_radius");
            }
        
            // args
            // jsonable arg
            NSUInteger radius = [args[@"radius"] unsignedIntegerValue];
        
            // ref
            BMKOpenPoiNearbyOption* ref = (BMKOpenPoiNearbyOption*) args[@"__this__"];
        
            ref.radius = radius;
            methodResult(@"success");
        },
        
        @"BMKOpenPoiNearbyOption::set_keyword": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenPoiNearbyOption::set_keyword");
            }
        
            // args
            // jsonable arg
            NSString* keyword = (NSString*) args[@"keyword"];
        
            // ref
            BMKOpenPoiNearbyOption* ref = (BMKOpenPoiNearbyOption*) args[@"__this__"];
        
            ref.keyword = keyword;
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_favId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKFavPoiInfo::set_favId");
            }
        
            // args
            // jsonable arg
            NSString* favId = (NSString*) args[@"favId"];
        
            // ref
            BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
        
            ref.favId = favId;
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_poiName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKFavPoiInfo::set_poiName");
            }
        
            // args
            // jsonable arg
            NSString* poiName = (NSString*) args[@"poiName"];
        
            // ref
            BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
        
            ref.poiName = poiName;
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_poiUid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKFavPoiInfo::set_poiUid");
            }
        
            // args
            // jsonable arg
            NSString* poiUid = (NSString*) args[@"poiUid"];
        
            // ref
            BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
        
            ref.poiUid = poiUid;
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_pt": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKFavPoiInfo::set_pt");
            }
        
            // args
            // struct arg
            NSValue* ptValue = (NSValue*) args[@"pt"];
            CLLocationCoordinate2D pt;
            [ptValue getValue:&pt];
        
            // ref
            BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
        
            ref.pt = pt;
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_address": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKFavPoiInfo::set_address");
            }
        
            // args
            // jsonable arg
            NSString* address = (NSString*) args[@"address"];
        
            // ref
            BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
        
            ref.address = address;
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_cityName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKFavPoiInfo::set_cityName");
            }
        
            // args
            // jsonable arg
            NSString* cityName = (NSString*) args[@"cityName"];
        
            // ref
            BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
        
            ref.cityName = cityName;
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_timeStamp": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKFavPoiInfo::set_timeStamp");
            }
        
            // args
            // jsonable arg
            NSUInteger timeStamp = [args[@"timeStamp"] unsignedIntegerValue];
        
            // ref
            BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
        
            ref.timeStamp = timeStamp;
            methodResult(@"success");
        },
        
        @"BMKOpenRouteOption::set_startPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenRouteOption::set_startPoint");
            }
        
            // args
            // ref arg
            BMKPlanNode* startPoint = (BMKPlanNode*) args[@"startPoint"];
        
            // ref
            BMKOpenRouteOption* ref = (BMKOpenRouteOption*) args[@"__this__"];
        
            ref.startPoint = startPoint;
            methodResult(@"success");
        },
        
        @"BMKOpenRouteOption::set_endPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenRouteOption::set_endPoint");
            }
        
            // args
            // ref arg
            BMKPlanNode* endPoint = (BMKPlanNode*) args[@"endPoint"];
        
            // ref
            BMKOpenRouteOption* ref = (BMKOpenRouteOption*) args[@"__this__"];
        
            ref.endPoint = endPoint;
            methodResult(@"success");
        },
        
        @"BMKOpenTransitRouteOption::set_openTransitPolicy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenTransitRouteOption::set_openTransitPolicy");
            }
        
            // args
            // enum arg
            BMKOpenTransitPolicy openTransitPolicy = (BMKOpenTransitPolicy) [args[@"openTransitPolicy"] integerValue];
        
            // ref
            BMKOpenTransitRouteOption* ref = (BMKOpenTransitRouteOption*) args[@"__this__"];
        
            ref.openTransitPolicy = openTransitPolicy;
            methodResult(@"success");
        },
        
        @"BMKOpenOption::set_appScheme": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenOption::set_appScheme");
            }
        
            // args
            // jsonable arg
            NSString* appScheme = (NSString*) args[@"appScheme"];
        
            // ref
            BMKOpenOption* ref = (BMKOpenOption*) args[@"__this__"];
        
            ref.appScheme = appScheme;
            methodResult(@"success");
        },
        
        @"BMKOpenOption::set_isSupportWeb": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenOption::set_isSupportWeb");
            }
        
            // args
            // jsonable arg
            BOOL isSupportWeb = [args[@"isSupportWeb"] boolValue];
        
            // ref
            BMKOpenOption* ref = (BMKOpenOption*) args[@"__this__"];
        
            ref.isSupportWeb = isSupportWeb;
            methodResult(@"success");
        },
        
        @"BMKOpenPanoramaOption::set_poiUid": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenPanoramaOption::set_poiUid");
            }
        
            // args
            // jsonable arg
            NSString* poiUid = (NSString*) args[@"poiUid"];
        
            // ref
            BMKOpenPanoramaOption* ref = (BMKOpenPanoramaOption*) args[@"__this__"];
        
            ref.poiUid = poiUid;
            methodResult(@"success");
        },
        
        @"BMKOpenPanorama::set_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKOpenPanorama::set_delegate");
            }
        
            // args
        
        
            // ref
            BMKOpenPanorama* ref = (BMKOpenPanorama*) args[@"__this__"];
        
            ref.delegate = weakSelf;
            methodResult(@"success");
        },
        
        @"BMKNaviPara::set_startPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKNaviPara::set_startPoint");
            }
        
            // args
            // ref arg
            BMKPlanNode* startPoint = (BMKPlanNode*) args[@"startPoint"];
        
            // ref
            BMKNaviPara* ref = (BMKNaviPara*) args[@"__this__"];
        
            ref.startPoint = startPoint;
            methodResult(@"success");
        },
        
        @"BMKNaviPara::set_endPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKNaviPara::set_endPoint");
            }
        
            // args
            // ref arg
            BMKPlanNode* endPoint = (BMKPlanNode*) args[@"endPoint"];
        
            // ref
            BMKNaviPara* ref = (BMKNaviPara*) args[@"__this__"];
        
            ref.endPoint = endPoint;
            methodResult(@"success");
        },
        
        @"BMKNaviPara::set_naviType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKNaviPara::set_naviType");
            }
        
            // args
            // enum arg
            BMK_NAVI_TYPE naviType = (BMK_NAVI_TYPE) [args[@"naviType"] integerValue];
        
            // ref
            BMKNaviPara* ref = (BMKNaviPara*) args[@"__this__"];
        
            ref.naviType = naviType;
            methodResult(@"success");
        },
        
        @"BMKNaviPara::set_appScheme": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKNaviPara::set_appScheme");
            }
        
            // args
            // jsonable arg
            NSString* appScheme = (NSString*) args[@"appScheme"];
        
            // ref
            BMKNaviPara* ref = (BMKNaviPara*) args[@"__this__"];
        
            ref.appScheme = appScheme;
            methodResult(@"success");
        },
        
        @"BMKNaviPara::set_appName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKNaviPara::set_appName");
            }
        
            // args
            // jsonable arg
            NSString* appName = (NSString*) args[@"appName"];
        
            // ref
            BMKNaviPara* ref = (BMKNaviPara*) args[@"__this__"];
        
            ref.appName = appName;
            methodResult(@"success");
        },
        
        @"BMKNaviPara::set_isSupportWeb": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"BMKNaviPara::set_isSupportWeb");
            }
        
            // args
            // jsonable arg
            BOOL isSupportWeb = [args[@"isSupportWeb"] boolValue];
        
            // ref
            BMKNaviPara* ref = (BMKNaviPara*) args[@"__this__"];
        
            ref.isSupportWeb = isSupportWeb;
            methodResult(@"success");
        },
        
        @"BMKOpenPoiDetailOption::set_poiUid_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* poiUid = (NSString*) args[@"poiUid"];
        
                // ref
                BMKOpenPoiDetailOption* ref = (BMKOpenPoiDetailOption*) args[@"__this__"];
        
                ref.poiUid = poiUid;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOpenPoiNearbyOption::set_location_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* locationValue = (NSValue*) args[@"location"];
                CLLocationCoordinate2D location;
                [locationValue getValue:&location];
        
                // ref
                BMKOpenPoiNearbyOption* ref = (BMKOpenPoiNearbyOption*) args[@"__this__"];
        
                ref.location = location;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOpenPoiNearbyOption::set_radius_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSUInteger radius = [args[@"radius"] unsignedIntegerValue];
        
                // ref
                BMKOpenPoiNearbyOption* ref = (BMKOpenPoiNearbyOption*) args[@"__this__"];
        
                ref.radius = radius;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOpenPoiNearbyOption::set_keyword_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* keyword = (NSString*) args[@"keyword"];
        
                // ref
                BMKOpenPoiNearbyOption* ref = (BMKOpenPoiNearbyOption*) args[@"__this__"];
        
                ref.keyword = keyword;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_favId_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* favId = (NSString*) args[@"favId"];
        
                // ref
                BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
        
                ref.favId = favId;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_poiName_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* poiName = (NSString*) args[@"poiName"];
        
                // ref
                BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
        
                ref.poiName = poiName;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_poiUid_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* poiUid = (NSString*) args[@"poiUid"];
        
                // ref
                BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
        
                ref.poiUid = poiUid;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_pt_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* ptValue = (NSValue*) args[@"pt"];
                CLLocationCoordinate2D pt;
                [ptValue getValue:&pt];
        
                // ref
                BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
        
                ref.pt = pt;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_address_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* address = (NSString*) args[@"address"];
        
                // ref
                BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
        
                ref.address = address;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_cityName_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* cityName = (NSString*) args[@"cityName"];
        
                // ref
                BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
        
                ref.cityName = cityName;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKFavPoiInfo::set_timeStamp_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSUInteger timeStamp = [args[@"timeStamp"] unsignedIntegerValue];
        
                // ref
                BMKFavPoiInfo* ref = (BMKFavPoiInfo*) args[@"__this__"];
        
                ref.timeStamp = timeStamp;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOpenRouteOption::set_startPoint_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKPlanNode* startPoint = (BMKPlanNode*) args[@"startPoint"];
        
                // ref
                BMKOpenRouteOption* ref = (BMKOpenRouteOption*) args[@"__this__"];
        
                ref.startPoint = startPoint;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOpenRouteOption::set_endPoint_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKPlanNode* endPoint = (BMKPlanNode*) args[@"endPoint"];
        
                // ref
                BMKOpenRouteOption* ref = (BMKOpenRouteOption*) args[@"__this__"];
        
                ref.endPoint = endPoint;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOpenTransitRouteOption::set_openTransitPolicy_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                BMKOpenTransitPolicy openTransitPolicy = (BMKOpenTransitPolicy) [args[@"openTransitPolicy"] integerValue];
        
                // ref
                BMKOpenTransitRouteOption* ref = (BMKOpenTransitRouteOption*) args[@"__this__"];
        
                ref.openTransitPolicy = openTransitPolicy;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOpenOption::set_appScheme_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* appScheme = (NSString*) args[@"appScheme"];
        
                // ref
                BMKOpenOption* ref = (BMKOpenOption*) args[@"__this__"];
        
                ref.appScheme = appScheme;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOpenOption::set_isSupportWeb_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL isSupportWeb = [args[@"isSupportWeb"] boolValue];
        
                // ref
                BMKOpenOption* ref = (BMKOpenOption*) args[@"__this__"];
        
                ref.isSupportWeb = isSupportWeb;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKOpenPanoramaOption::set_poiUid_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* poiUid = (NSString*) args[@"poiUid"];
        
                // ref
                BMKOpenPanoramaOption* ref = (BMKOpenPanoramaOption*) args[@"__this__"];
        
                ref.poiUid = poiUid;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKNaviPara::set_startPoint_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKPlanNode* startPoint = (BMKPlanNode*) args[@"startPoint"];
        
                // ref
                BMKNaviPara* ref = (BMKNaviPara*) args[@"__this__"];
        
                ref.startPoint = startPoint;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKNaviPara::set_endPoint_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                BMKPlanNode* endPoint = (BMKPlanNode*) args[@"endPoint"];
        
                // ref
                BMKNaviPara* ref = (BMKNaviPara*) args[@"__this__"];
        
                ref.endPoint = endPoint;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKNaviPara::set_naviType_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                BMK_NAVI_TYPE naviType = (BMK_NAVI_TYPE) [args[@"naviType"] integerValue];
        
                // ref
                BMKNaviPara* ref = (BMKNaviPara*) args[@"__this__"];
        
                ref.naviType = naviType;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKNaviPara::set_appScheme_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* appScheme = (NSString*) args[@"appScheme"];
        
                // ref
                BMKNaviPara* ref = (BMKNaviPara*) args[@"__this__"];
        
                ref.appScheme = appScheme;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKNaviPara::set_appName_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* appName = (NSString*) args[@"appName"];
        
                // ref
                BMKNaviPara* ref = (BMKNaviPara*) args[@"__this__"];
        
                ref.appName = appName;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"BMKNaviPara::set_isSupportWeb_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL isSupportWeb = [args[@"isSupportWeb"] boolValue];
        
                // ref
                BMKNaviPara* ref = (BMKNaviPara*) args[@"__this__"];
        
                ref.isSupportWeb = isSupportWeb;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"RefClass::isKindOfBMKOpenRoute": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[BMKOpenRoute class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKOpenPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[BMKOpenPoi class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKOpenPoiDetailOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[BMKOpenPoiDetailOption class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKOpenPoiNearbyOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[BMKOpenPoiNearbyOption class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKFavPoiInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[BMKFavPoiInfo class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKOpenRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[BMKOpenRouteOption class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKOpenWalkingRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[BMKOpenWalkingRouteOption class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKOpenDrivingRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[BMKOpenDrivingRouteOption class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKOpenTransitRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[BMKOpenTransitRouteOption class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKOpenOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[BMKOpenOption class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKOpenPanoramaOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[BMKOpenPanoramaOption class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKOpenPanorama": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[BMKOpenPanorama class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKFavPoiManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[BMKFavPoiManager class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKNaviPara": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[BMKNaviPara class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfBMKNavigation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[BMKNavigation class]];
            methodResult(@(isTargetType));
        },
        
        @"ObjectFactory::createBMKOpenRoute": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOpenRoute");
            }
        
            BMKOpenRoute* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[BMKOpenRoute alloc] init];
            } else {
                __this__ = [BMKOpenRoute alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKOpenPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOpenPoi");
            }
        
            BMKOpenPoi* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[BMKOpenPoi alloc] init];
            } else {
                __this__ = [BMKOpenPoi alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKOpenPoiDetailOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOpenPoiDetailOption");
            }
        
            BMKOpenPoiDetailOption* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[BMKOpenPoiDetailOption alloc] init];
            } else {
                __this__ = [BMKOpenPoiDetailOption alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKOpenPoiNearbyOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOpenPoiNearbyOption");
            }
        
            BMKOpenPoiNearbyOption* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[BMKOpenPoiNearbyOption alloc] init];
            } else {
                __this__ = [BMKOpenPoiNearbyOption alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKFavPoiInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKFavPoiInfo");
            }
        
            BMKFavPoiInfo* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[BMKFavPoiInfo alloc] init];
            } else {
                __this__ = [BMKFavPoiInfo alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKOpenRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOpenRouteOption");
            }
        
            BMKOpenRouteOption* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[BMKOpenRouteOption alloc] init];
            } else {
                __this__ = [BMKOpenRouteOption alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKOpenWalkingRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOpenWalkingRouteOption");
            }
        
            BMKOpenWalkingRouteOption* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[BMKOpenWalkingRouteOption alloc] init];
            } else {
                __this__ = [BMKOpenWalkingRouteOption alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKOpenDrivingRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOpenDrivingRouteOption");
            }
        
            BMKOpenDrivingRouteOption* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[BMKOpenDrivingRouteOption alloc] init];
            } else {
                __this__ = [BMKOpenDrivingRouteOption alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKOpenTransitRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOpenTransitRouteOption");
            }
        
            BMKOpenTransitRouteOption* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[BMKOpenTransitRouteOption alloc] init];
            } else {
                __this__ = [BMKOpenTransitRouteOption alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKOpenOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOpenOption");
            }
        
            BMKOpenOption* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[BMKOpenOption alloc] init];
            } else {
                __this__ = [BMKOpenOption alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKOpenPanoramaOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOpenPanoramaOption");
            }
        
            BMKOpenPanoramaOption* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[BMKOpenPanoramaOption alloc] init];
            } else {
                __this__ = [BMKOpenPanoramaOption alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKOpenPanorama": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKOpenPanorama");
            }
        
            BMKOpenPanorama* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[BMKOpenPanorama alloc] init];
            } else {
                __this__ = [BMKOpenPanorama alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKFavPoiManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKFavPoiManager");
            }
        
            BMKFavPoiManager* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[BMKFavPoiManager alloc] init];
            } else {
                __this__ = [BMKFavPoiManager alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKNaviPara": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKNaviPara");
            }
        
            BMKNaviPara* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[BMKNaviPara alloc] init];
            } else {
                __this__ = [BMKNaviPara alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createBMKNavigation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createBMKNavigation");
            }
        
            BMKNavigation* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[BMKNavigation alloc] init];
            } else {
                __this__ = [BMKNavigation alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKOpenRoute": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                BMKOpenRoute* __this__;
                if ([init boolValue]) {
                    __this__ = [[BMKOpenRoute alloc] init];
                } else {
                    __this__ = [BMKOpenRoute alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKOpenPoi": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                BMKOpenPoi* __this__;
                if ([init boolValue]) {
                    __this__ = [[BMKOpenPoi alloc] init];
                } else {
                    __this__ = [BMKOpenPoi alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKOpenPoiDetailOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                BMKOpenPoiDetailOption* __this__;
                if ([init boolValue]) {
                    __this__ = [[BMKOpenPoiDetailOption alloc] init];
                } else {
                    __this__ = [BMKOpenPoiDetailOption alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKOpenPoiNearbyOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                BMKOpenPoiNearbyOption* __this__;
                if ([init boolValue]) {
                    __this__ = [[BMKOpenPoiNearbyOption alloc] init];
                } else {
                    __this__ = [BMKOpenPoiNearbyOption alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKFavPoiInfo": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                BMKFavPoiInfo* __this__;
                if ([init boolValue]) {
                    __this__ = [[BMKFavPoiInfo alloc] init];
                } else {
                    __this__ = [BMKFavPoiInfo alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKOpenRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                BMKOpenRouteOption* __this__;
                if ([init boolValue]) {
                    __this__ = [[BMKOpenRouteOption alloc] init];
                } else {
                    __this__ = [BMKOpenRouteOption alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKOpenWalkingRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                BMKOpenWalkingRouteOption* __this__;
                if ([init boolValue]) {
                    __this__ = [[BMKOpenWalkingRouteOption alloc] init];
                } else {
                    __this__ = [BMKOpenWalkingRouteOption alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKOpenDrivingRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                BMKOpenDrivingRouteOption* __this__;
                if ([init boolValue]) {
                    __this__ = [[BMKOpenDrivingRouteOption alloc] init];
                } else {
                    __this__ = [BMKOpenDrivingRouteOption alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKOpenTransitRouteOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                BMKOpenTransitRouteOption* __this__;
                if ([init boolValue]) {
                    __this__ = [[BMKOpenTransitRouteOption alloc] init];
                } else {
                    __this__ = [BMKOpenTransitRouteOption alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKOpenOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                BMKOpenOption* __this__;
                if ([init boolValue]) {
                    __this__ = [[BMKOpenOption alloc] init];
                } else {
                    __this__ = [BMKOpenOption alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKOpenPanoramaOption": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                BMKOpenPanoramaOption* __this__;
                if ([init boolValue]) {
                    __this__ = [[BMKOpenPanoramaOption alloc] init];
                } else {
                    __this__ = [BMKOpenPanoramaOption alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKOpenPanorama": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                BMKOpenPanorama* __this__;
                if ([init boolValue]) {
                    __this__ = [[BMKOpenPanorama alloc] init];
                } else {
                    __this__ = [BMKOpenPanorama alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKFavPoiManager": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                BMKFavPoiManager* __this__;
                if ([init boolValue]) {
                    __this__ = [[BMKFavPoiManager alloc] init];
                } else {
                    __this__ = [BMKFavPoiManager alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKNaviPara": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                BMKNaviPara* __this__;
                if ([init boolValue]) {
                    __this__ = [[BMKNaviPara alloc] init];
                } else {
                    __this__ = [BMKNaviPara alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchBMKNavigation": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (int __i__ = 0; __i__ < [length integerValue]; __i__++) {
                BMKNavigation* __this__;
                if ([init boolValue]) {
                    __this__ = [[BMKNavigation alloc] init];
                } else {
                    __this__ = [BMKNavigation alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"BMKMapPointForCoordinate::BMKMapPointForCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapPointForCoordinate::BMKMapPointForCoordinate(%@)", args[@"coordinate"]);
            }
        
            // invoke native method
            BMKMapPoint result = BMKMapPointForCoordinate(coordinate);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKMapPoint)];
        
            methodResult(__result__);
        },
        @"BMKCoordinateForMapPoint::BMKCoordinateForMapPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* mapPointValue = (NSValue*) args[@"mapPoint"];
            BMKMapPoint mapPoint;
            [mapPointValue getValue:&mapPoint];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKCoordinateForMapPoint::BMKCoordinateForMapPoint(%@)", args[@"mapPoint"]);
            }
        
            // invoke native method
            CLLocationCoordinate2D result = BMKCoordinateForMapPoint(mapPoint);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
            methodResult(__result__);
        },
        @"BMKConvertToBaiduMercatorFromBD09LL::BMKConvertToBaiduMercatorFromBD09LL": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* bd09llCoordinateValue = (NSValue*) args[@"bd09llCoordinate"];
            CLLocationCoordinate2D bd09llCoordinate;
            [bd09llCoordinateValue getValue:&bd09llCoordinate];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKConvertToBaiduMercatorFromBD09LL::BMKConvertToBaiduMercatorFromBD09LL(%@)", args[@"bd09llCoordinate"]);
            }
        
            // invoke native method
            CGPoint result = BMKConvertToBaiduMercatorFromBD09LL(bd09llCoordinate);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGPoint)];
        
            methodResult(__result__);
        },
        @"BMKConvertToBD09LLFromBaiduMercator::BMKConvertToBD09LLFromBaiduMercator": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* bdMCTCoordinateValue = (NSValue*) args[@"bdMCTCoordinate"];
            CGPoint bdMCTCoordinate;
            [bdMCTCoordinateValue getValue:&bdMCTCoordinate];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKConvertToBD09LLFromBaiduMercator::BMKConvertToBD09LLFromBaiduMercator(%@)", args[@"bdMCTCoordinate"]);
            }
        
            // invoke native method
            CLLocationCoordinate2D result = BMKConvertToBD09LLFromBaiduMercator(bdMCTCoordinate);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
            methodResult(__result__);
        },
        @"BMKCoordTrans::BMKCoordTrans": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
            // enum arg
            BMK_COORD_TYPE fromType = (BMK_COORD_TYPE) [args[@"fromType"] integerValue];
            // enum arg
            BMK_COORD_TYPE toType = (BMK_COORD_TYPE) [args[@"toType"] integerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKCoordTrans::BMKCoordTrans(%@, %@, %@)", args[@"coordinate"], args[@"fromType"], args[@"toType"]);
            }
        
            // invoke native method
            CLLocationCoordinate2D result = BMKCoordTrans(coordinate, fromType, toType);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
            methodResult(__result__);
        },
        @"BMKConvertBaiduCoorFrom::BMKConvertBaiduCoorFrom": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
            // enum arg
            BMK_COORD_TYPE type = (BMK_COORD_TYPE) [args[@"type"] integerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKConvertBaiduCoorFrom::BMKConvertBaiduCoorFrom(%@, %@)", args[@"coordinate"], args[@"type"]);
            }
        
            // invoke native method
            NSDictionary* result = BMKConvertBaiduCoorFrom(coordinate, type);
        
            // result
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"BMKMetersPerMapPointAtLatitude::BMKMetersPerMapPointAtLatitude": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            CLLocationDegrees latitude = [args[@"latitude"] doubleValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMetersPerMapPointAtLatitude::BMKMetersPerMapPointAtLatitude(%@)", args[@"latitude"]);
            }
        
            // invoke native method
            CLLocationDistance result = BMKMetersPerMapPointAtLatitude(latitude);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKMapPointsPerMeterAtLatitude::BMKMapPointsPerMeterAtLatitude": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // jsonable arg
            CLLocationDegrees latitude = [args[@"latitude"] doubleValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapPointsPerMeterAtLatitude::BMKMapPointsPerMeterAtLatitude(%@)", args[@"latitude"]);
            }
        
            // invoke native method
            double result = BMKMapPointsPerMeterAtLatitude(latitude);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKMetersBetweenMapPoints::BMKMetersBetweenMapPoints": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* aValue = (NSValue*) args[@"a"];
            BMKMapPoint a;
            [aValue getValue:&a];
            // struct arg
            NSValue* bValue = (NSValue*) args[@"b"];
            BMKMapPoint b;
            [bValue getValue:&b];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMetersBetweenMapPoints::BMKMetersBetweenMapPoints(%@, %@)", args[@"a"], args[@"b"]);
            }
        
            // invoke native method
            CLLocationDistance result = BMKMetersBetweenMapPoints(a, b);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKMapRectGetWidth::BMKMapRectGetWidth": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            BMKMapRect rect;
            [rectValue getValue:&rect];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectGetWidth::BMKMapRectGetWidth(%@)", args[@"rect"]);
            }
        
            // invoke native method
            double result = BMKMapRectGetWidth(rect);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKMapRectGetHeight::BMKMapRectGetHeight": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            BMKMapRect rect;
            [rectValue getValue:&rect];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectGetHeight::BMKMapRectGetHeight(%@)", args[@"rect"]);
            }
        
            // invoke native method
            double result = BMKMapRectGetHeight(rect);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKMapPointEqualToPoint::BMKMapPointEqualToPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* point1Value = (NSValue*) args[@"point1"];
            BMKMapPoint point1;
            [point1Value getValue:&point1];
            // struct arg
            NSValue* point2Value = (NSValue*) args[@"point2"];
            BMKMapPoint point2;
            [point2Value getValue:&point2];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapPointEqualToPoint::BMKMapPointEqualToPoint(%@, %@)", args[@"point1"], args[@"point2"]);
            }
        
            // invoke native method
            BOOL result = BMKMapPointEqualToPoint(point1, point2);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKGetNearestMapPointFromPolyline::BMKGetNearestMapPointFromPolyline": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* pointValue = (NSValue*) args[@"point"];
            BMKMapPoint point;
            [pointValue getValue:&point];
            // list arg struct
            NSArray<NSValue*>* polylineValueList = (NSArray<NSValue*>*) args[@"polyline"];
            BMKMapPoint polyline[polylineValueList.count];
            for (int __i__ = 0; __i__ < polylineValueList.count; __i__++) {
                NSValue* polylineValue = (NSValue*) [polylineValueList objectAtIndex:__i__];
                BMKMapPoint polylineItem;
                [polylineValue getValue:&polylineItem];
                polyline[__i__] = polylineItem;
            }
            // jsonable arg
            NSUInteger count = [args[@"count"] unsignedIntegerValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKGetNearestMapPointFromPolyline::BMKGetNearestMapPointFromPolyline(%@, %@, %@)", args[@"point"], args[@"polyline"], args[@"count"]);
            }
        
            // invoke native method
            BMKMapPoint result = BMKGetNearestMapPointFromPolyline(point, polyline, count);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKMapPoint)];
        
            methodResult(__result__);
        },
        @"BMKGetPointToTheVerticalFootOfLine::BMKGetPointToTheVerticalFootOfLine": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* pointValue = (NSValue*) args[@"point"];
            BMKMapPoint point;
            [pointValue getValue:&point];
            // struct arg
            NSValue* lineStartPtValue = (NSValue*) args[@"lineStartPt"];
            BMKMapPoint lineStartPt;
            [lineStartPtValue getValue:&lineStartPt];
            // struct arg
            NSValue* lineEndPtValue = (NSValue*) args[@"lineEndPt"];
            BMKMapPoint lineEndPt;
            [lineEndPtValue getValue:&lineEndPt];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKGetPointToTheVerticalFootOfLine::BMKGetPointToTheVerticalFootOfLine(%@, %@, %@)", args[@"point"], args[@"lineStartPt"], args[@"lineEndPt"]);
            }
        
            // invoke native method
            BMKMapPoint result = BMKGetPointToTheVerticalFootOfLine(point, lineStartPt, lineEndPt);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKMapPoint)];
        
            methodResult(__result__);
        },
        @"BMKGetDistanceFromPointToLine::BMKGetDistanceFromPointToLine": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* pointValue = (NSValue*) args[@"point"];
            BMKMapPoint point;
            [pointValue getValue:&point];
            // struct arg
            NSValue* lineStartPtValue = (NSValue*) args[@"lineStartPt"];
            BMKMapPoint lineStartPt;
            [lineStartPtValue getValue:&lineStartPt];
            // struct arg
            NSValue* lineEndPtValue = (NSValue*) args[@"lineEndPt"];
            BMKMapPoint lineEndPt;
            [lineEndPtValue getValue:&lineEndPt];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKGetDistanceFromPointToLine::BMKGetDistanceFromPointToLine(%@, %@, %@)", args[@"point"], args[@"lineStartPt"], args[@"lineEndPt"]);
            }
        
            // invoke native method
            CLLocationDistance result = BMKGetDistanceFromPointToLine(point, lineStartPt, lineEndPt);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKCoordinateRegionMakeWithDistance::BMKCoordinateRegionMakeWithDistance": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* centerCoordinateValue = (NSValue*) args[@"centerCoordinate"];
            CLLocationCoordinate2D centerCoordinate;
            [centerCoordinateValue getValue:&centerCoordinate];
            // jsonable arg
            CLLocationDistance latitudinalMeters = [args[@"latitudinalMeters"] doubleValue];
            // jsonable arg
            CLLocationDistance longitudinalMeters = [args[@"longitudinalMeters"] doubleValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKCoordinateRegionMakeWithDistance::BMKCoordinateRegionMakeWithDistance(%@, %@, %@)", args[@"centerCoordinate"], args[@"latitudinalMeters"], args[@"longitudinalMeters"]);
            }
        
            // invoke native method
            BMKCoordinateRegion result = BMKCoordinateRegionMakeWithDistance(centerCoordinate, latitudinalMeters, longitudinalMeters);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKCoordinateRegion)];
        
            methodResult(__result__);
        },
        @"BMKMapSizeEqualToSize::BMKMapSizeEqualToSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* size1Value = (NSValue*) args[@"size1"];
            BMKMapSize size1;
            [size1Value getValue:&size1];
            // struct arg
            NSValue* size2Value = (NSValue*) args[@"size2"];
            BMKMapSize size2;
            [size2Value getValue:&size2];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapSizeEqualToSize::BMKMapSizeEqualToSize(%@, %@)", args[@"size1"], args[@"size2"]);
            }
        
            // invoke native method
            BOOL result = BMKMapSizeEqualToSize(size1, size2);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKMapRectEqualToRect::BMKMapRectEqualToRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rect1Value = (NSValue*) args[@"rect1"];
            BMKMapRect rect1;
            [rect1Value getValue:&rect1];
            // struct arg
            NSValue* rect2Value = (NSValue*) args[@"rect2"];
            BMKMapRect rect2;
            [rect2Value getValue:&rect2];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectEqualToRect::BMKMapRectEqualToRect(%@, %@)", args[@"rect1"], args[@"rect2"]);
            }
        
            // invoke native method
            BOOL result = BMKMapRectEqualToRect(rect1, rect2);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKMapRectIsEmpty::BMKMapRectIsEmpty": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            BMKMapRect rect;
            [rectValue getValue:&rect];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectIsEmpty::BMKMapRectIsEmpty(%@)", args[@"rect"]);
            }
        
            // invoke native method
            BOOL result = BMKMapRectIsEmpty(rect);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKMapRectUnion::BMKMapRectUnion": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rect1Value = (NSValue*) args[@"rect1"];
            BMKMapRect rect1;
            [rect1Value getValue:&rect1];
            // struct arg
            NSValue* rect2Value = (NSValue*) args[@"rect2"];
            BMKMapRect rect2;
            [rect2Value getValue:&rect2];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectUnion::BMKMapRectUnion(%@, %@)", args[@"rect1"], args[@"rect2"]);
            }
        
            // invoke native method
            BMKMapRect result = BMKMapRectUnion(rect1, rect2);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKMapRect)];
        
            methodResult(__result__);
        },
        @"BMKMapRectIntersection::BMKMapRectIntersection": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rect1Value = (NSValue*) args[@"rect1"];
            BMKMapRect rect1;
            [rect1Value getValue:&rect1];
            // struct arg
            NSValue* rect2Value = (NSValue*) args[@"rect2"];
            BMKMapRect rect2;
            [rect2Value getValue:&rect2];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectIntersection::BMKMapRectIntersection(%@, %@)", args[@"rect1"], args[@"rect2"]);
            }
        
            // invoke native method
            BMKMapRect result = BMKMapRectIntersection(rect1, rect2);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKMapRect)];
        
            methodResult(__result__);
        },
        @"BMKMapRectInset::BMKMapRectInset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            BMKMapRect rect;
            [rectValue getValue:&rect];
            // jsonable arg
            double dx = [args[@"dx"] doubleValue];
            // jsonable arg
            double dy = [args[@"dy"] doubleValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectInset::BMKMapRectInset(%@, %@, %@)", args[@"rect"], args[@"dx"], args[@"dy"]);
            }
        
            // invoke native method
            BMKMapRect result = BMKMapRectInset(rect, dx, dy);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKMapRect)];
        
            methodResult(__result__);
        },
        @"BMKMapRectOffset::BMKMapRectOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            BMKMapRect rect;
            [rectValue getValue:&rect];
            // jsonable arg
            double dx = [args[@"dx"] doubleValue];
            // jsonable arg
            double dy = [args[@"dy"] doubleValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectOffset::BMKMapRectOffset(%@, %@, %@)", args[@"rect"], args[@"dx"], args[@"dy"]);
            }
        
            // invoke native method
            BMKMapRect result = BMKMapRectOffset(rect, dx, dy);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKMapRect)];
        
            methodResult(__result__);
        },
        @"BMKMapRectContainsPoint::BMKMapRectContainsPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            BMKMapRect rect;
            [rectValue getValue:&rect];
            // struct arg
            NSValue* pointValue = (NSValue*) args[@"point"];
            BMKMapPoint point;
            [pointValue getValue:&point];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectContainsPoint::BMKMapRectContainsPoint(%@, %@)", args[@"rect"], args[@"point"]);
            }
        
            // invoke native method
            BOOL result = BMKMapRectContainsPoint(rect, point);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKMapRectContainsRect::BMKMapRectContainsRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rect1Value = (NSValue*) args[@"rect1"];
            BMKMapRect rect1;
            [rect1Value getValue:&rect1];
            // struct arg
            NSValue* rect2Value = (NSValue*) args[@"rect2"];
            BMKMapRect rect2;
            [rect2Value getValue:&rect2];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectContainsRect::BMKMapRectContainsRect(%@, %@)", args[@"rect1"], args[@"rect2"]);
            }
        
            // invoke native method
            BOOL result = BMKMapRectContainsRect(rect1, rect2);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKMapRectIntersectsRect::BMKMapRectIntersectsRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rect1Value = (NSValue*) args[@"rect1"];
            BMKMapRect rect1;
            [rect1Value getValue:&rect1];
            // struct arg
            NSValue* rect2Value = (NSValue*) args[@"rect2"];
            BMKMapRect rect2;
            [rect2Value getValue:&rect2];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectIntersectsRect::BMKMapRectIntersectsRect(%@, %@)", args[@"rect1"], args[@"rect2"]);
            }
        
            // invoke native method
            BOOL result = BMKMapRectIntersectsRect(rect1, rect2);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKCoordinateRegionForMapRect::BMKCoordinateRegionForMapRect": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            BMKMapRect rect;
            [rectValue getValue:&rect];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKCoordinateRegionForMapRect::BMKCoordinateRegionForMapRect(%@)", args[@"rect"]);
            }
        
            // invoke native method
            BMKCoordinateRegion result = BMKCoordinateRegionForMapRect(rect);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKCoordinateRegion)];
        
            methodResult(__result__);
        },
        @"BMKMapRectSpans180thMeridian::BMKMapRectSpans180thMeridian": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            BMKMapRect rect;
            [rectValue getValue:&rect];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectSpans180thMeridian::BMKMapRectSpans180thMeridian(%@)", args[@"rect"]);
            }
        
            // invoke native method
            BOOL result = BMKMapRectSpans180thMeridian(rect);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"BMKMapRectRemainder::BMKMapRectRemainder": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* rectValue = (NSValue*) args[@"rect"];
            BMKMapRect rect;
            [rectValue getValue:&rect];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKMapRectRemainder::BMKMapRectRemainder(%@)", args[@"rect"]);
            }
        
            // invoke native method
            BMKMapRect result = BMKMapRectRemainder(rect);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(BMKMapRect)];
        
            methodResult(__result__);
        },
        @"BMKCircleContainsPoint::BMKCircleContainsPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // args
            // struct arg
            NSValue* pointValue = (NSValue*) args[@"point"];
            BMKMapPoint point;
            [pointValue getValue:&point];
            // struct arg
            NSValue* centerValue = (NSValue*) args[@"center"];
            BMKMapPoint center;
            [centerValue getValue:&center];
            // jsonable arg
            double radius = [args[@"radius"] doubleValue];
        
            // ref
        
        
            // print log
            if (enableLog) {
                NSLog(@"fluttify-objc: BMKCircleContainsPoint::BMKCircleContainsPoint(%@, %@, %@)", args[@"point"], args[@"center"], args[@"radius"]);
            }
        
            // invoke native method
            BOOL result = BMKCircleContainsPoint(point, center, radius);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
    };
}

@end
