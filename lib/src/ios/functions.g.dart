// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_utils_fluttify/src/ios/ios.export.g.dart';
import 'package:bmap_utils_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

Future<BMKCoordinateSpan?> BMKCoordinateSpanMake(double latitudeDelta, double longitudeDelta) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKCoordinateSpanMake::BMKCoordinateSpanMake([\'latitudeDelta\':$latitudeDelta, \'longitudeDelta\':$longitudeDelta])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKCoordinateSpanMake::BMKCoordinateSpanMake', {"latitudeDelta": latitudeDelta, "longitudeDelta": longitudeDelta});
  

  // handle native call
  

  return BmapUtilsFluttifyIOSAs<BMKCoordinateSpan>(__result__);
}

Future<BMKCoordinateRegion?> BMKCoordinateRegionMake(CLLocationCoordinate2D centerCoordinate, BMKCoordinateSpan span) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKCoordinateRegionMake::BMKCoordinateRegionMake([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKCoordinateRegionMake::BMKCoordinateRegionMake', {"centerCoordinate": centerCoordinate, "span": span});
  

  // handle native call
  

  return BmapUtilsFluttifyIOSAs<BMKCoordinateRegion>(__result__);
}

Future<BMKMapPoint?> BMKMapPointMake(double x, double y) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKMapPointMake::BMKMapPointMake([\'x\':$x, \'y\':$y])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapPointMake::BMKMapPointMake', {"x": x, "y": y});
  

  // handle native call
  

  return BmapUtilsFluttifyIOSAs<BMKMapPoint>(__result__);
}

Future<BMKMapSize?> BMKMapSizeMake(double width, double height) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKMapSizeMake::BMKMapSizeMake([\'width\':$width, \'height\':$height])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapSizeMake::BMKMapSizeMake', {"width": width, "height": height});
  

  // handle native call
  

  return BmapUtilsFluttifyIOSAs<BMKMapSize>(__result__);
}

Future<BMKMapRect?> BMKMapRectMake(double x, double y, double width, double height) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKMapRectMake::BMKMapRectMake([\'x\':$x, \'y\':$y, \'width\':$width, \'height\':$height])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapRectMake::BMKMapRectMake', {"x": x, "y": y, "width": width, "height": height});
  

  // handle native call
  

  return BmapUtilsFluttifyIOSAs<BMKMapRect>(__result__);
}

Future<bool?> BMKMapRectIsNull(BMKMapRect rect) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKMapRectIsNull::BMKMapRectIsNull([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapRectIsNull::BMKMapRectIsNull', {"rect": rect});
  

  // handle native call
  

  return __result__;
}

Future<double?> BMKMapRectGetMinX(BMKMapRect rect) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKMapRectGetMinX::BMKMapRectGetMinX([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapRectGetMinX::BMKMapRectGetMinX', {"rect": rect});
  

  // handle native call
  

  return __result__;
}

Future<double?> BMKMapRectGetMinY(BMKMapRect rect) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKMapRectGetMinY::BMKMapRectGetMinY([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapRectGetMinY::BMKMapRectGetMinY', {"rect": rect});
  

  // handle native call
  

  return __result__;
}

Future<double?> BMKMapRectGetMidX(BMKMapRect rect) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKMapRectGetMidX::BMKMapRectGetMidX([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapRectGetMidX::BMKMapRectGetMidX', {"rect": rect});
  

  // handle native call
  

  return __result__;
}

Future<double?> BMKMapRectGetMidY(BMKMapRect rect) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKMapRectGetMidY::BMKMapRectGetMidY([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapRectGetMidY::BMKMapRectGetMidY', {"rect": rect});
  

  // handle native call
  

  return __result__;
}

Future<double?> BMKMapRectGetMaxX(BMKMapRect rect) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKMapRectGetMaxX::BMKMapRectGetMaxX([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapRectGetMaxX::BMKMapRectGetMaxX', {"rect": rect});
  

  // handle native call
  

  return __result__;
}

Future<double?> BMKMapRectGetMaxY(BMKMapRect rect) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKMapRectGetMaxY::BMKMapRectGetMaxY([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapRectGetMaxY::BMKMapRectGetMaxY', {"rect": rect});
  

  // handle native call
  

  return __result__;
}

Future<BMKMapPoint?> BMKMapPointForCoordinate(CLLocationCoordinate2D coordinate) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKMapPointForCoordinate::BMKMapPointForCoordinate([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapPointForCoordinate::BMKMapPointForCoordinate', {"coordinate": coordinate});
  

  // handle native call
  

  return BmapUtilsFluttifyIOSAs<BMKMapPoint>(__result__);
}

Future<CLLocationCoordinate2D?> BMKCoordinateForMapPoint(BMKMapPoint mapPoint) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKCoordinateForMapPoint::BMKCoordinateForMapPoint([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKCoordinateForMapPoint::BMKCoordinateForMapPoint', {"mapPoint": mapPoint});
  

  // handle native call
  

  return BmapUtilsFluttifyIOSAs<CLLocationCoordinate2D>(__result__);
}

Future<CGPoint?> BMKConvertToBaiduMercatorFromBD09LL(CLLocationCoordinate2D bd09llCoordinate) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKConvertToBaiduMercatorFromBD09LL::BMKConvertToBaiduMercatorFromBD09LL([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKConvertToBaiduMercatorFromBD09LL::BMKConvertToBaiduMercatorFromBD09LL', {"bd09llCoordinate": bd09llCoordinate});
  

  // handle native call
  

  return BmapUtilsFluttifyIOSAs<CGPoint>(__result__);
}

Future<CLLocationCoordinate2D?> BMKConvertToBD09LLFromBaiduMercator(CGPoint bdMCTCoordinate) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKConvertToBD09LLFromBaiduMercator::BMKConvertToBD09LLFromBaiduMercator([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKConvertToBD09LLFromBaiduMercator::BMKConvertToBD09LLFromBaiduMercator', {"bdMCTCoordinate": bdMCTCoordinate});
  

  // handle native call
  

  return BmapUtilsFluttifyIOSAs<CLLocationCoordinate2D>(__result__);
}

Future<CLLocationCoordinate2D?> BMKCoordTrans(CLLocationCoordinate2D coordinate, BMK_COORD_TYPE fromType, BMK_COORD_TYPE toType) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKCoordTrans::BMKCoordTrans([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKCoordTrans::BMKCoordTrans', {"coordinate": coordinate, "fromType": fromType.toValue(), "toType": toType.toValue()});
  

  // handle native call
  

  return BmapUtilsFluttifyIOSAs<CLLocationCoordinate2D>(__result__);
}

Future<Map?> BMKConvertBaiduCoorFrom(CLLocationCoordinate2D coordinate, BMK_COORD_TYPE type) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKConvertBaiduCoorFrom::BMKConvertBaiduCoorFrom([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKConvertBaiduCoorFrom::BMKConvertBaiduCoorFrom', {"coordinate": coordinate, "type": type.toValue()});
  

  // handle native call
  

  return __result__;
}

Future<double?> BMKMetersPerMapPointAtLatitude(double latitude) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKMetersPerMapPointAtLatitude::BMKMetersPerMapPointAtLatitude([\'latitude\':$latitude])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMetersPerMapPointAtLatitude::BMKMetersPerMapPointAtLatitude', {"latitude": latitude});
  

  // handle native call
  

  return __result__;
}

Future<double?> BMKMapPointsPerMeterAtLatitude(double latitude) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKMapPointsPerMeterAtLatitude::BMKMapPointsPerMeterAtLatitude([\'latitude\':$latitude])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapPointsPerMeterAtLatitude::BMKMapPointsPerMeterAtLatitude', {"latitude": latitude});
  

  // handle native call
  

  return __result__;
}

Future<double?> BMKMetersBetweenMapPoints(BMKMapPoint a, BMKMapPoint b) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKMetersBetweenMapPoints::BMKMetersBetweenMapPoints([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMetersBetweenMapPoints::BMKMetersBetweenMapPoints', {"a": a, "b": b});
  

  // handle native call
  

  return __result__;
}

Future<double?> BMKMetersBetweenCoordinates(CLLocationCoordinate2D a, CLLocationCoordinate2D b) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKMetersBetweenCoordinates::BMKMetersBetweenCoordinates([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMetersBetweenCoordinates::BMKMetersBetweenCoordinates', {"a": a, "b": b});
  

  // handle native call
  

  return __result__;
}

Future<double?> BMKMapRectGetWidth(BMKMapRect rect) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKMapRectGetWidth::BMKMapRectGetWidth([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapRectGetWidth::BMKMapRectGetWidth', {"rect": rect});
  

  // handle native call
  

  return __result__;
}

Future<double?> BMKMapRectGetHeight(BMKMapRect rect) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKMapRectGetHeight::BMKMapRectGetHeight([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapRectGetHeight::BMKMapRectGetHeight', {"rect": rect});
  

  // handle native call
  

  return __result__;
}

Future<bool?> BMKMapPointEqualToPoint(BMKMapPoint point1, BMKMapPoint point2) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKMapPointEqualToPoint::BMKMapPointEqualToPoint([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapPointEqualToPoint::BMKMapPointEqualToPoint', {"point1": point1, "point2": point2});
  

  // handle native call
  

  return __result__;
}

Future<BMKMapPoint?> BMKGetNearestMapPointFromPolyline(BMKMapPoint point, List<BMKMapPoint> polyline, int count) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKGetNearestMapPointFromPolyline::BMKGetNearestMapPointFromPolyline([\'count\':$count])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKGetNearestMapPointFromPolyline::BMKGetNearestMapPointFromPolyline', {"point": point, "polyline": polyline, "count": count});
  

  // handle native call
  

  return BmapUtilsFluttifyIOSAs<BMKMapPoint>(__result__);
}

Future<BMKMapPoint?> BMKGetPointToTheVerticalFootOfLine(BMKMapPoint point, BMKMapPoint lineStartPt, BMKMapPoint lineEndPt) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKGetPointToTheVerticalFootOfLine::BMKGetPointToTheVerticalFootOfLine([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKGetPointToTheVerticalFootOfLine::BMKGetPointToTheVerticalFootOfLine', {"point": point, "lineStartPt": lineStartPt, "lineEndPt": lineEndPt});
  

  // handle native call
  

  return BmapUtilsFluttifyIOSAs<BMKMapPoint>(__result__);
}

Future<double?> BMKGetDistanceFromPointToLine(BMKMapPoint point, BMKMapPoint lineStartPt, BMKMapPoint lineEndPt) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKGetDistanceFromPointToLine::BMKGetDistanceFromPointToLine([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKGetDistanceFromPointToLine::BMKGetDistanceFromPointToLine', {"point": point, "lineStartPt": lineStartPt, "lineEndPt": lineEndPt});
  

  // handle native call
  

  return __result__;
}

Future<BMKCoordinateRegion?> BMKCoordinateRegionMakeWithDistance(CLLocationCoordinate2D centerCoordinate, double latitudinalMeters, double longitudinalMeters) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKCoordinateRegionMakeWithDistance::BMKCoordinateRegionMakeWithDistance([\'latitudinalMeters\':$latitudinalMeters, \'longitudinalMeters\':$longitudinalMeters])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKCoordinateRegionMakeWithDistance::BMKCoordinateRegionMakeWithDistance', {"centerCoordinate": centerCoordinate, "latitudinalMeters": latitudinalMeters, "longitudinalMeters": longitudinalMeters});
  

  // handle native call
  

  return BmapUtilsFluttifyIOSAs<BMKCoordinateRegion>(__result__);
}

Future<bool?> BMKMapSizeEqualToSize(BMKMapSize size1, BMKMapSize size2) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKMapSizeEqualToSize::BMKMapSizeEqualToSize([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapSizeEqualToSize::BMKMapSizeEqualToSize', {"size1": size1, "size2": size2});
  

  // handle native call
  

  return __result__;
}

Future<bool?> BMKMapRectEqualToRect(BMKMapRect rect1, BMKMapRect rect2) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKMapRectEqualToRect::BMKMapRectEqualToRect([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapRectEqualToRect::BMKMapRectEqualToRect', {"rect1": rect1, "rect2": rect2});
  

  // handle native call
  

  return __result__;
}

Future<bool?> BMKMapRectIsEmpty(BMKMapRect rect) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKMapRectIsEmpty::BMKMapRectIsEmpty([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapRectIsEmpty::BMKMapRectIsEmpty', {"rect": rect});
  

  // handle native call
  

  return __result__;
}

Future<BMKMapRect?> BMKMapRectUnion(BMKMapRect rect1, BMKMapRect rect2) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKMapRectUnion::BMKMapRectUnion([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapRectUnion::BMKMapRectUnion', {"rect1": rect1, "rect2": rect2});
  

  // handle native call
  

  return BmapUtilsFluttifyIOSAs<BMKMapRect>(__result__);
}

Future<BMKMapRect?> BMKMapRectIntersection(BMKMapRect rect1, BMKMapRect rect2) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKMapRectIntersection::BMKMapRectIntersection([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapRectIntersection::BMKMapRectIntersection', {"rect1": rect1, "rect2": rect2});
  

  // handle native call
  

  return BmapUtilsFluttifyIOSAs<BMKMapRect>(__result__);
}

Future<BMKMapRect?> BMKMapRectInset(BMKMapRect rect, double dx, double dy) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKMapRectInset::BMKMapRectInset([\'dx\':$dx, \'dy\':$dy])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapRectInset::BMKMapRectInset', {"rect": rect, "dx": dx, "dy": dy});
  

  // handle native call
  

  return BmapUtilsFluttifyIOSAs<BMKMapRect>(__result__);
}

Future<BMKMapRect?> BMKMapRectOffset(BMKMapRect rect, double dx, double dy) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKMapRectOffset::BMKMapRectOffset([\'dx\':$dx, \'dy\':$dy])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapRectOffset::BMKMapRectOffset', {"rect": rect, "dx": dx, "dy": dy});
  

  // handle native call
  

  return BmapUtilsFluttifyIOSAs<BMKMapRect>(__result__);
}

Future<bool?> BMKMapRectContainsPoint(BMKMapRect rect, BMKMapPoint point) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKMapRectContainsPoint::BMKMapRectContainsPoint([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapRectContainsPoint::BMKMapRectContainsPoint', {"rect": rect, "point": point});
  

  // handle native call
  

  return __result__;
}

Future<bool?> BMKMapRectContainsRect(BMKMapRect rect1, BMKMapRect rect2) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKMapRectContainsRect::BMKMapRectContainsRect([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapRectContainsRect::BMKMapRectContainsRect', {"rect1": rect1, "rect2": rect2});
  

  // handle native call
  

  return __result__;
}

Future<bool?> BMKMapRectIntersectsRect(BMKMapRect rect1, BMKMapRect rect2) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKMapRectIntersectsRect::BMKMapRectIntersectsRect([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapRectIntersectsRect::BMKMapRectIntersectsRect', {"rect1": rect1, "rect2": rect2});
  

  // handle native call
  

  return __result__;
}

Future<BMKCoordinateRegion?> BMKCoordinateRegionForMapRect(BMKMapRect rect) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKCoordinateRegionForMapRect::BMKCoordinateRegionForMapRect([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKCoordinateRegionForMapRect::BMKCoordinateRegionForMapRect', {"rect": rect});
  

  // handle native call
  

  return BmapUtilsFluttifyIOSAs<BMKCoordinateRegion>(__result__);
}

Future<bool?> BMKMapRectSpans180thMeridian(BMKMapRect rect) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKMapRectSpans180thMeridian::BMKMapRectSpans180thMeridian([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapRectSpans180thMeridian::BMKMapRectSpans180thMeridian', {"rect": rect});
  

  // handle native call
  

  return __result__;
}

Future<BMKMapRect?> BMKMapRectRemainder(BMKMapRect rect) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKMapRectRemainder::BMKMapRectRemainder([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapRectRemainder::BMKMapRectRemainder', {"rect": rect});
  

  // handle native call
  

  return BmapUtilsFluttifyIOSAs<BMKMapRect>(__result__);
}

Future<bool?> BMKCircleContainsPoint(BMKMapPoint point, BMKMapPoint center, double radius) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKCircleContainsPoint::BMKCircleContainsPoint([\'radius\':$radius])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKCircleContainsPoint::BMKCircleContainsPoint', {"point": point, "center": center, "radius": radius});
  

  // handle native call
  

  return __result__;
}

Future<bool?> BMKCircleContainsCoordinate(CLLocationCoordinate2D point, CLLocationCoordinate2D center, double radius) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKCircleContainsCoordinate::BMKCircleContainsCoordinate([\'radius\':$radius])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKCircleContainsCoordinate::BMKCircleContainsCoordinate', {"point": point, "center": center, "radius": radius});
  

  // handle native call
  

  return __result__;
}

Future<bool?> BMKPolygonContainsPoint(BMKMapPoint point, List<BMKMapPoint> polygon, int count) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKPolygonContainsPoint::BMKPolygonContainsPoint([\'count\':$count])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKPolygonContainsPoint::BMKPolygonContainsPoint', {"point": point, "polygon": polygon, "count": count});
  

  // handle native call
  

  return __result__;
}

Future<bool?> BMKPolygonContainsCoordinate(CLLocationCoordinate2D point, List<CLLocationCoordinate2D> polygon, int count) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKPolygonContainsCoordinate::BMKPolygonContainsCoordinate([\'count\':$count])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKPolygonContainsCoordinate::BMKPolygonContainsCoordinate', {"point": point, "polygon": polygon, "count": count});
  

  // handle native call
  

  return __result__;
}

Future<double?> BMKAreaBetweenCoordinates(CLLocationCoordinate2D leftTop, CLLocationCoordinate2D rightBottom) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKAreaBetweenCoordinates::BMKAreaBetweenCoordinates([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKAreaBetweenCoordinates::BMKAreaBetweenCoordinates', {"leftTop": leftTop, "rightBottom": rightBottom});
  

  // handle native call
  

  return __result__;
}

Future<double?> BMKAreaForPolygon(List<CLLocationCoordinate2D> coordinates, int count) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKAreaForPolygon::BMKAreaForPolygon([\'count\':$count])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKAreaForPolygon::BMKAreaForPolygon', {"coordinates": coordinates, "count": count});
  

  // handle native call
  

  return __result__;
}

Future<double?> BMKGetDirectionFromCoords(CLLocationCoordinate2D startCoord, CLLocationCoordinate2D endCoord) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKGetDirectionFromCoords::BMKGetDirectionFromCoords([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKGetDirectionFromCoords::BMKGetDirectionFromCoords', {"startCoord": startCoord, "endCoord": endCoord});
  

  // handle native call
  

  return __result__;
}

Future<double?> BMKGetDirectionFromPoints(BMKMapPoint startPt, BMKMapPoint endPt) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKGetDirectionFromPoints::BMKGetDirectionFromPoints([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKGetDirectionFromPoints::BMKGetDirectionFromPoints', {"startPt": startPt, "endPt": endPt});
  

  // handle native call
  

  return __result__;
}

Future<String?> BMKStringFromMapPoint(BMKMapPoint point) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKStringFromMapPoint::BMKStringFromMapPoint([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKStringFromMapPoint::BMKStringFromMapPoint', {"point": point});
  

  // handle native call
  

  return __result__;
}

Future<String?> BMKStringFromMapSize(BMKMapSize size) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKStringFromMapSize::BMKStringFromMapSize([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKStringFromMapSize::BMKStringFromMapSize', {"size": size});
  

  // handle native call
  

  return __result__;
}

Future<String?> BMKStringFromMapRect(BMKMapRect rect) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKStringFromMapRect::BMKStringFromMapRect([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKStringFromMapRect::BMKStringFromMapRect', {"rect": rect});
  

  // handle native call
  

  return __result__;
}

Future<CLLocationCoordinate2D?> BMKCoorDictionaryDecode(Map dictionary) async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKCoorDictionaryDecode::BMKCoorDictionaryDecode([\'dictionary\':$dictionary])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKCoorDictionaryDecode::BMKCoorDictionaryDecode', {"dictionary": dictionary});
  

  // handle native call
  

  return BmapUtilsFluttifyIOSAs<CLLocationCoordinate2D>(__result__);
}

Future<String?> BMKGetMapApiVersion() async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKGetMapApiVersion::BMKGetMapApiVersion([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKGetMapApiVersion::BMKGetMapApiVersion', );
  

  // handle native call
  

  return __result__;
}

Future<String?> BMKGetMapApiBaseComponentVersion() async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKGetMapApiBaseComponentVersion::BMKGetMapApiBaseComponentVersion([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKGetMapApiBaseComponentVersion::BMKGetMapApiBaseComponentVersion', );
  

  // handle native call
  

  return __result__;
}

Future<String?> BMKGetMapApiUtilsComponentVersion() async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKGetMapApiUtilsComponentVersion::BMKGetMapApiUtilsComponentVersion([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKGetMapApiUtilsComponentVersion::BMKGetMapApiUtilsComponentVersion', );
  

  // handle native call
  

  return __result__;
}

Future<bool?> BMKCheckUtilsComponentIsLegal() async {
  // print log
  if (fluttifyLogEnabled) {
    debugPrint('fluttify-dart: BMKCheckUtilsComponentIsLegal::BMKCheckUtilsComponentIsLegal([])');
  }

  // invoke native method
  final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKCheckUtilsComponentIsLegal::BMKCheckUtilsComponentIsLegal', );
  

  // handle native call
  

  return __result__;
}
