// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_utils_fluttify/src/ios/ios.export.g.dart';
import 'package:bmap_utils_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class BMKFavPoiManager extends NSObject  {
  //region constants
  static const String name__ = 'BMKFavPoiManager';

  
  //endregion

  //region creators
  static Future<BMKFavPoiManager> create__() async {
    final int refId = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('ObjectFactory::createBMKFavPoiManager');
    final object = BMKFavPoiManager()..refId = refId..tag__ = 'bmap_utils_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<BMKFavPoiManager>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('ObjectFactory::create_batchBMKFavPoiManager', {'length': length});
  
    final List<BMKFavPoiManager> typedResult = resultBatch.map((result) => BMKFavPoiManager()..refId = result..tag__ = 'bmap_utils_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<int> addFavPoi(BMKFavPoiInfo favPoiInfo) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKFavPoiManager@$refId::addFavPoi([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('BMKFavPoiManager::addFavPoi', {"favPoiInfo": favPoiInfo.refId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<BMKFavPoiInfo> getFavPoi(String favId) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKFavPoiManager@$refId::getFavPoi([\'favId\':$favId])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('BMKFavPoiManager::getFavPoi', {"favId": favId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = BMKFavPoiInfo()..refId = __result__..tag__ = 'bmap_utils_fluttify';
      kNativeObjectPool.add(__return__);
      return __return__;
    }
  }
  
  
  Future<List<NSObject>> getAllFavPois() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKFavPoiManager@$refId::getAllFavPois([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('BMKFavPoiManager::getAllFavPois', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = (__result__ as List).cast<int>().map((__it__) => NSObject()..refId = __it__..tag__ = 'bmap_utils_fluttify').toList();
      kNativeObjectPool.addAll(__return__);
      return __return__;
    }
  }
  
  
  Future<bool> updateFavPoi_favPoiInfo(String favId, BMKFavPoiInfo favPoiInfo) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKFavPoiManager@$refId::updateFavPoi([\'favId\':$favId])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('BMKFavPoiManager::updateFavPoi_favPoiInfo', {"favId": favId, "favPoiInfo": favPoiInfo.refId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<bool> deleteFavPoi(String favId) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKFavPoiManager@$refId::deleteFavPoi([\'favId\':$favId])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('BMKFavPoiManager::deleteFavPoi', {"favId": favId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  
  Future<bool> clearAllFavPois() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKFavPoiManager@$refId::clearAllFavPois([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('BMKFavPoiManager::clearAllFavPois', {"refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  //endregion
}

extension BMKFavPoiManager_Batch on List<BMKFavPoiManager> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<List<int>> addFavPoi_batch(List<BMKFavPoiInfo> favPoiInfo) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('BMKFavPoiManager::addFavPoi_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"favPoiInfo": favPoiInfo[__i__].refId, "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<BMKFavPoiInfo>> getFavPoi_batch(List<String> favId) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('BMKFavPoiManager::getFavPoi_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"favId": favId[__i__], "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => BMKFavPoiInfo()..refId = __result__..tag__ = 'bmap_utils_fluttify').toList();
      kNativeObjectPool.addAll(typedResult);
      return typedResult;
    }
  }
  
  
  Future<List<List<NSObject>>> getAllFavPois_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('BMKFavPoiManager::getAllFavPois_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => (__result__ as List).cast<int>().map((__it__) => NSObject()..refId = __it__..tag__ = 'bmap_utils_fluttify').toList()).toList();
      kNativeObjectPool.addAll(typedResult.expand((e) => e));
      return typedResult;
    }
  }
  
  
  Future<List<bool>> updateFavPoi_favPoiInfo_batch(List<String> favId, List<BMKFavPoiInfo> favPoiInfo) async {
    if (favId.length != favPoiInfo.length) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('BMKFavPoiManager::updateFavPoi_favPoiInfo_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"favId": favId[__i__], "favPoiInfo": favPoiInfo[__i__].refId, "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<bool>> deleteFavPoi_batch(List<String> favId) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('BMKFavPoiManager::deleteFavPoi_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"favId": favId[__i__], "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  
  Future<List<bool>> clearAllFavPois_batch() async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('BMKFavPoiManager::clearAllFavPois_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<bool>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  //endregion
}