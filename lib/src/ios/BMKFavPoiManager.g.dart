// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_utils_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class BMKFavPoiManager extends NSObject  {
  //region constants
  static const String name__ = 'BMKFavPoiManager';

  @override
  final String tag__ = 'bmap_utils_fluttify';

  
  //endregion

  //region creators
  static Future<BMKFavPoiManager?> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod(
      'ObjectFactory::createBMKFavPoiManager',
      {'init': init}
    );
    return BmapUtilsFluttifyIOSAs<BMKFavPoiManager?>(__result__);
  }
  
  static Future<List<BMKFavPoiManager>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kBmapUtilsFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchBMKFavPoiManager',
      {'length': length, 'init': init}
    );
    return __result_batch__
        ?.map((it) => BmapUtilsFluttifyIOSAs<BMKFavPoiManager>(it))
        .where((element) => element !=null)
        .cast<BMKFavPoiManager>()
        .toList() ?? <BMKFavPoiManager>[];
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<int?> addFavPoi(BMKFavPoiInfo favPoiInfo) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKFavPoiManager@$refId::addFavPoi([])');
    }
  
    // invoke native method
    final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKFavPoiManager::addFavPoi', {"favPoiInfo": favPoiInfo, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<BMKFavPoiInfo?> getFavPoi(String favId) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKFavPoiManager@$refId::getFavPoi([\'favId\':$favId])');
    }
  
    // invoke native method
    final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKFavPoiManager::getFavPoi', {"favId": favId, "__this__": this});
  
  
    // handle native call
  
  
    return BmapUtilsFluttifyIOSAs<BMKFavPoiInfo>(__result__);
  }
  
  
  Future<List<dynamic>?> getAllFavPois() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKFavPoiManager@$refId::getAllFavPois([])');
    }
  
    // invoke native method
    final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKFavPoiManager::getAllFavPois', {"__this__": this});
  
  
    // handle native call
  
  
    return (__result__ as List?)?.cast<dynamic>();
  }
  
  
  Future<bool?> updateFavPoi_favPoiInfo(String favId, BMKFavPoiInfo favPoiInfo) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKFavPoiManager@$refId::updateFavPoi([\'favId\':$favId])');
    }
  
    // invoke native method
    final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKFavPoiManager::updateFavPoi_favPoiInfo', {"favId": favId, "favPoiInfo": favPoiInfo, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<bool?> deleteFavPoi(String favId) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKFavPoiManager@$refId::deleteFavPoi([\'favId\':$favId])');
    }
  
    // invoke native method
    final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKFavPoiManager::deleteFavPoi', {"favId": favId, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<bool?> clearAllFavPois() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKFavPoiManager@$refId::clearAllFavPois([])');
    }
  
    // invoke native method
    final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKFavPoiManager::clearAllFavPois', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  //endregion

  @override
  String toString() {
    return 'BMKFavPoiManager{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension BMKFavPoiManager_Batch on List<BMKFavPoiManager> {
  String? get refId {
    if (isEmpty) return null;
    return first.refId;
  }

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<List<int?>> addFavPoi_batch(List<BMKFavPoiInfo> favPoiInfo) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapUtilsFluttifyChannel.invokeMethod('BMKFavPoiManager::addFavPoi_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"favPoiInfo": favPoiInfo[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  
  Future<List<BMKFavPoiInfo?>> getFavPoi_batch(List<String> favId) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapUtilsFluttifyChannel.invokeMethod('BMKFavPoiManager::getFavPoi_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"favId": favId[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => BmapUtilsFluttifyIOSAs<BMKFavPoiInfo>(__result__)).cast<BMKFavPoiInfo?>().toList();
  }
  
  
  Future<List<List<dynamic>?>> getAllFavPois_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapUtilsFluttifyChannel.invokeMethod('BMKFavPoiManager::getAllFavPois_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => (__result__ as List?)?.cast<dynamic>()).cast<List<dynamic>?>().toList();
  }
  
  
  Future<List<bool?>> updateFavPoi_favPoiInfo_batch(List<String> favId, List<BMKFavPoiInfo> favPoiInfo) async {
    assert(favId.length == favPoiInfo.length);
  
    // invoke native method
    final resultBatch = await kBmapUtilsFluttifyChannel.invokeMethod('BMKFavPoiManager::updateFavPoi_favPoiInfo_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"favId": favId[__i__], "favPoiInfo": favPoiInfo[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool?>().toList();
  }
  
  
  Future<List<bool?>> deleteFavPoi_batch(List<String> favId) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapUtilsFluttifyChannel.invokeMethod('BMKFavPoiManager::deleteFavPoi_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"favId": favId[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool?>().toList();
  }
  
  
  Future<List<bool?>> clearAllFavPois_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapUtilsFluttifyChannel.invokeMethod('BMKFavPoiManager::clearAllFavPois_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool?>().toList();
  }
  
  //endregion
}