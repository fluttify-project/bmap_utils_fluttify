// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_utils_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class BMKMapManager extends NSObject  {
  //region constants
  static const String name__ = 'BMKMapManager';

  @override
  final String tag__ = 'bmap_utils_fluttify';

  
  //endregion

  //region creators
  static Future<BMKMapManager?> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod(
      'ObjectFactory::createBMKMapManager',
      {'init': init}
    );
    return BmapUtilsFluttifyIOSAs<BMKMapManager?>(__result__);
  }
  
  static Future<List<BMKMapManager>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kBmapUtilsFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchBMKMapManager',
      {'length': length, 'init': init}
    );
    return __result_batch__
        ?.map((it) => BmapUtilsFluttifyIOSAs<BMKMapManager>(it))
        .where((element) => element !=null)
        .cast<BMKMapManager>()
        .toList() ?? <BMKMapManager>[];
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<BMKMapManager?> sharedInstance() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKMapManager::sharedInstance([])');
    }
  
    // invoke native method
    final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapManager::sharedInstance', );
  
  
    // handle native call
  
  
    return BmapUtilsFluttifyIOSAs<BMKMapManager>(__result__);
  }
  
  
  static Future<bool?> setCoordinateTypeUsedInBaiduMapSDK(BMK_COORD_TYPE coorType) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKMapManager::setCoordinateTypeUsedInBaiduMapSDK([])');
    }
  
    // invoke native method
    final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapManager::setCoordinateTypeUsedInBaiduMapSDK', {"coorType": coorType.toValue()});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<BMK_COORD_TYPE?> getCoordinateTypeUsedInBaiduMapSDK() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKMapManager::getCoordinateTypeUsedInBaiduMapSDK([])');
    }
  
    // invoke native method
    final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapManager::getCoordinateTypeUsedInBaiduMapSDK', );
  
  
    // handle native call
  
  
    return (__result__ as int).toBMK_COORD_TYPE();
  }
  
  
  static Future<void> logEnable_module(bool enable, BMKMapModule mapModule) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKMapManager::logEnable([\'enable\':$enable])');
    }
  
    // invoke native method
    final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapManager::logEnable_module', {"enable": enable, "mapModule": mapModule.toValue()});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<bool?> start_generalDelegate(String key, BMKGeneralDelegate delegate) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKMapManager@$refId::start([\'key\':$key])');
    }
  
    // invoke native method
    final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapManager::start_generalDelegate', {"key": key, "delegate": delegate, "__this__": this});
  
  
    // handle native call
    MethodChannel('BMKGeneralDelegate::Callback', kBmapUtilsFluttifyMethodCodec)
        .setMethodCallHandler((methodCall) async {
          try {
            final args = methodCall.arguments as Map;
            switch (methodCall.method) {
              case 'Callback::BMKGeneralDelegate::onGetNetworkState':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: onGetNetworkState([\'iError\':${args['iError']}])');
                }
          
                // handle the native call
                await delegate.onGetNetworkState(args['iError']);
                break;
              case 'Callback::BMKGeneralDelegate::onGetPermissionState':
                // print log
                if (fluttifyLogEnabled) {
                  debugPrint('fluttify-dart-callback: onGetPermissionState([\'iError\':${args['iError']}])');
                }
          
                // handle the native call
                await delegate.onGetPermissionState(args['iError']);
                break;
              default:
                throw MissingPluginException('方法${methodCall.method}未实现');
                break;
            }
          } catch (e) {
            debugPrint(e.toString());
            rethrow;
          }
        });
  
    return __result__;
  }
  
  
  Future<int?> getTotalSendFlaxLength() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKMapManager@$refId::getTotalSendFlaxLength([])');
    }
  
    // invoke native method
    final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapManager::getTotalSendFlaxLength', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<int?> getTotalRecvFlaxLength() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKMapManager@$refId::getTotalRecvFlaxLength([])');
    }
  
    // invoke native method
    final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapManager::getTotalRecvFlaxLength', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  Future<bool?> stop() async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKMapManager@$refId::stop([])');
    }
  
    // invoke native method
    final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapManager::stop', {"__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  //endregion

  @override
  String toString() {
    return 'BMKMapManager{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension BMKMapManager_Batch on List<BMKMapManager> {
  String? get refId {
    if (isEmpty) return null;
    return first.refId;
  }

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<List<BMKMapManager?>> sharedInstance_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapManager::sharedInstance_batch', );
  
  
    return (resultBatch as List).map((__result__) => BmapUtilsFluttifyIOSAs<BMKMapManager>(__result__)).cast<BMKMapManager?>().toList();
  }
  
  
  static Future<List<bool?>> setCoordinateTypeUsedInBaiduMapSDK_batch(List<BMK_COORD_TYPE> coorType) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapManager::setCoordinateTypeUsedInBaiduMapSDK_batch', [for (int __i__ = 0; __i__ < coorType.length; __i__++) {"coorType": coorType[__i__].toValue()}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool?>().toList();
  }
  
  
  static Future<List<BMK_COORD_TYPE?>> getCoordinateTypeUsedInBaiduMapSDK_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapManager::getCoordinateTypeUsedInBaiduMapSDK_batch', );
  
  
    return (resultBatch as List).map((__result__) => (__result__ as int).toBMK_COORD_TYPE()).cast<BMK_COORD_TYPE?>().toList();
  }
  
  
  static Future<List<void>> logEnable_module_batch(List<bool> enable, List<BMKMapModule> mapModule) async {
    assert(enable.length == mapModule.length);
  
    // invoke native method
    final resultBatch = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapManager::logEnable_module_batch', [for (int __i__ = 0; __i__ < enable.length; __i__++) {"enable": enable[__i__], "mapModule": mapModule[__i__].toValue()}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  Future<List<int?>> getTotalSendFlaxLength_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapManager::getTotalSendFlaxLength_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  
  Future<List<int?>> getTotalRecvFlaxLength_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapManager::getTotalRecvFlaxLength_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  
  Future<List<bool?>> stop_batch() async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapUtilsFluttifyChannel.invokeMethod('BMKMapManager::stop_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool?>().toList();
  }
  
  //endregion
}