// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_utils_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class BMKPlanNode extends NSObject  {
  //region constants
  static const String name__ = 'BMKPlanNode';

  @override
  final String tag__ = 'bmap_utils_fluttify';

  
  //endregion

  //region creators
  static Future<BMKPlanNode?> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod(
      'ObjectFactory::createBMKPlanNode',
      {'init': init}
    );
    return BmapUtilsFluttifyIOSAs<BMKPlanNode?>(__result__);
  }
  
  static Future<List<BMKPlanNode>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kBmapUtilsFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchBMKPlanNode',
      {'length': length, 'init': init}
    );
    return __result_batch__
        ?.map((it) => BmapUtilsFluttifyIOSAs<BMKPlanNode>(it))
        .where((element) => element !=null)
        .cast<BMKPlanNode>()
        .toList() ?? <BMKPlanNode>[];
  }
  
  //endregion

  //region getters
  Future<String?> get_cityName() async {
    final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod("BMKPlanNode::get_cityName", {'__this__': this});
    return __result__;
  }
  
  Future<int?> get_cityID() async {
    final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod("BMKPlanNode::get_cityID", {'__this__': this});
    return __result__;
  }
  
  Future<String?> get_name() async {
    final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod("BMKPlanNode::get_name", {'__this__': this});
    return __result__;
  }
  
  Future<CLLocationCoordinate2D?> get_pt() async {
    final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod("BMKPlanNode::get_pt", {'__this__': this});
    return BmapUtilsFluttifyIOSAs<CLLocationCoordinate2D>(__result__);
  }
  
  //endregion

  //region setters
  Future<void> set_cityName(String cityName) async {
    await kBmapUtilsFluttifyChannel.invokeMethod('BMKPlanNode::set_cityName', <String, dynamic>{'__this__': this, "cityName": cityName});
  
  
  }
  
  Future<void> set_cityID(int cityID) async {
    await kBmapUtilsFluttifyChannel.invokeMethod('BMKPlanNode::set_cityID', <String, dynamic>{'__this__': this, "cityID": cityID});
  
  
  }
  
  Future<void> set_name(String name) async {
    await kBmapUtilsFluttifyChannel.invokeMethod('BMKPlanNode::set_name', <String, dynamic>{'__this__': this, "name": name});
  
  
  }
  
  Future<void> set_pt(CLLocationCoordinate2D pt) async {
    await kBmapUtilsFluttifyChannel.invokeMethod('BMKPlanNode::set_pt', <String, dynamic>{'__this__': this, "pt": pt});
  
  
  }
  
  //endregion

  //region methods
  
  //endregion

  @override
  String toString() {
    return 'BMKPlanNode{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension BMKPlanNode_Batch on List<BMKPlanNode> {
  String? get refId {
    if (isEmpty) return null;
    return first.refId;
  }

  //region getters
  Future<List<String?>> get_cityName_batch() async {
    final resultBatch = await kBmapUtilsFluttifyChannel.invokeMethod("BMKPlanNode::get_cityName_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<String?>().toList();
  }
  
  Future<List<int?>> get_cityID_batch() async {
    final resultBatch = await kBmapUtilsFluttifyChannel.invokeMethod("BMKPlanNode::get_cityID_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<int?>().toList();
  }
  
  Future<List<String?>> get_name_batch() async {
    final resultBatch = await kBmapUtilsFluttifyChannel.invokeMethod("BMKPlanNode::get_name_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => __result__).cast<String?>().toList();
  }
  
  Future<List<CLLocationCoordinate2D?>> get_pt_batch() async {
    final resultBatch = await kBmapUtilsFluttifyChannel.invokeMethod("BMKPlanNode::get_pt_batch", [for (final __item__ in this) {'__this__': __item__}]);
    return (resultBatch as List).map((__result__) => BmapUtilsFluttifyIOSAs<CLLocationCoordinate2D>(__result__)).cast<CLLocationCoordinate2D?>().toList();
  }
  
  //endregion

  //region setters
  Future<void> set_cityName_batch(List<String> cityName) async {
    await kBmapUtilsFluttifyChannel.invokeMethod('BMKPlanNode::set_cityName_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "cityName": cityName[__i__]}]);
  
  
  }
  
  Future<void> set_cityID_batch(List<int> cityID) async {
    await kBmapUtilsFluttifyChannel.invokeMethod('BMKPlanNode::set_cityID_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "cityID": cityID[__i__]}]);
  
  
  }
  
  Future<void> set_name_batch(List<String> name) async {
    await kBmapUtilsFluttifyChannel.invokeMethod('BMKPlanNode::set_name_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "name": name[__i__]}]);
  
  
  }
  
  Future<void> set_pt_batch(List<CLLocationCoordinate2D> pt) async {
    await kBmapUtilsFluttifyChannel.invokeMethod('BMKPlanNode::set_pt_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {'__this__': this[__i__], "pt": pt[__i__]}]);
  
  
  }
  
  //endregion

  //region methods
  
  //endregion
}