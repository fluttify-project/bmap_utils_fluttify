// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

enum BMKWeatherDataType {
  BMKWeatherDataTypeNow /* 0 */,
  BMKWeatherDataTypeForecasts /* 1 */,
  BMKWeatherDataTypeForecastsForHour /* 2 */,
  BMKWeatherDataTypeLifeIndex /* 3 */,
  BMKWeatherDataTypeAlert /* 4 */,
  BMKWeatherDataTypeAll /* 5 */
}

extension BMKWeatherDataTypeToX on BMKWeatherDataType {
  int toValue() {
    switch (this) {
      case BMKWeatherDataType.BMKWeatherDataTypeNow: return 0;
      case BMKWeatherDataType.BMKWeatherDataTypeForecasts: return 1;
      case BMKWeatherDataType.BMKWeatherDataTypeForecastsForHour: return 2;
      case BMKWeatherDataType.BMKWeatherDataTypeLifeIndex: return 3;
      case BMKWeatherDataType.BMKWeatherDataTypeAlert: return 4;
      case BMKWeatherDataType.BMKWeatherDataTypeAll: return 5;
      default: return 0;
    }
  }
}

extension BMKWeatherDataTypeFromX on int {
  BMKWeatherDataType toBMKWeatherDataType() {
    switch (this) {
      case 0: return BMKWeatherDataType.BMKWeatherDataTypeNow;
      case 1: return BMKWeatherDataType.BMKWeatherDataTypeForecasts;
      case 2: return BMKWeatherDataType.BMKWeatherDataTypeForecastsForHour;
      case 3: return BMKWeatherDataType.BMKWeatherDataTypeLifeIndex;
      case 4: return BMKWeatherDataType.BMKWeatherDataTypeAlert;
      case 5: return BMKWeatherDataType.BMKWeatherDataTypeAll;
      default: return BMKWeatherDataType.values[this + 0];
    }
  }
}