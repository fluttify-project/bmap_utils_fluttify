// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:io';

import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'package:bmap_utils_fluttify/src/android/android.export.g.dart';
import 'package:bmap_utils_fluttify/src/ios/ios.export.g.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import
extension TypeOpBmapUtilsFluttifyIOS on Ref {
  Future<bool> isBMKOpenRoute() async {
    final result = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('RefClass::isKindOfBMKOpenRoute', {'refId': refId});
    return result;
  }
  
  Future<bool> isBMKOpenPoi() async {
    final result = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('RefClass::isKindOfBMKOpenPoi', {'refId': refId});
    return result;
  }
  
  Future<bool> isBMKOpenPoiDetailOption() async {
    final result = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('RefClass::isKindOfBMKOpenPoiDetailOption', {'refId': refId});
    return result;
  }
  
  Future<bool> isBMKOpenPoiNearbyOption() async {
    final result = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('RefClass::isKindOfBMKOpenPoiNearbyOption', {'refId': refId});
    return result;
  }
  
  Future<bool> isBMKFavPoiInfo() async {
    final result = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('RefClass::isKindOfBMKFavPoiInfo', {'refId': refId});
    return result;
  }
  
  Future<bool> isBMKOpenRouteOption() async {
    final result = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('RefClass::isKindOfBMKOpenRouteOption', {'refId': refId});
    return result;
  }
  
  Future<bool> isBMKOpenWalkingRouteOption() async {
    final result = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('RefClass::isKindOfBMKOpenWalkingRouteOption', {'refId': refId});
    return result;
  }
  
  Future<bool> isBMKOpenDrivingRouteOption() async {
    final result = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('RefClass::isKindOfBMKOpenDrivingRouteOption', {'refId': refId});
    return result;
  }
  
  Future<bool> isBMKOpenTransitRouteOption() async {
    final result = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('RefClass::isKindOfBMKOpenTransitRouteOption', {'refId': refId});
    return result;
  }
  
  Future<bool> isBMKOpenOption() async {
    final result = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('RefClass::isKindOfBMKOpenOption', {'refId': refId});
    return result;
  }
  
  Future<bool> isBMKOpenPanoramaOption() async {
    final result = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('RefClass::isKindOfBMKOpenPanoramaOption', {'refId': refId});
    return result;
  }
  
  Future<bool> isBMKOpenPanorama() async {
    final result = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('RefClass::isKindOfBMKOpenPanorama', {'refId': refId});
    return result;
  }
  
  Future<bool> isBMKFavPoiManager() async {
    final result = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('RefClass::isKindOfBMKFavPoiManager', {'refId': refId});
    return result;
  }
  
  Future<bool> isBMKNaviPara() async {
    final result = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('RefClass::isKindOfBMKNaviPara', {'refId': refId});
    return result;
  }
  
  Future<bool> isBMKNavigation() async {
    final result = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('RefClass::isKindOfBMKNavigation', {'refId': refId});
    return result;
  }
  

  Future<BMKOpenRoute> asBMKOpenRoute() async {
    final result = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('RefClass::asBMKOpenRoute', {'refId': refId});
    return BMKOpenRoute()..refId = result;
  }
  
  Future<BMKOpenPoi> asBMKOpenPoi() async {
    final result = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('RefClass::asBMKOpenPoi', {'refId': refId});
    return BMKOpenPoi()..refId = result;
  }
  
  Future<BMKOpenPoiDetailOption> asBMKOpenPoiDetailOption() async {
    final result = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('RefClass::asBMKOpenPoiDetailOption', {'refId': refId});
    return BMKOpenPoiDetailOption()..refId = result;
  }
  
  Future<BMKOpenPoiNearbyOption> asBMKOpenPoiNearbyOption() async {
    final result = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('RefClass::asBMKOpenPoiNearbyOption', {'refId': refId});
    return BMKOpenPoiNearbyOption()..refId = result;
  }
  
  Future<BMKFavPoiInfo> asBMKFavPoiInfo() async {
    final result = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('RefClass::asBMKFavPoiInfo', {'refId': refId});
    return BMKFavPoiInfo()..refId = result;
  }
  
  Future<BMKOpenRouteOption> asBMKOpenRouteOption() async {
    final result = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('RefClass::asBMKOpenRouteOption', {'refId': refId});
    return BMKOpenRouteOption()..refId = result;
  }
  
  Future<BMKOpenWalkingRouteOption> asBMKOpenWalkingRouteOption() async {
    final result = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('RefClass::asBMKOpenWalkingRouteOption', {'refId': refId});
    return BMKOpenWalkingRouteOption()..refId = result;
  }
  
  Future<BMKOpenDrivingRouteOption> asBMKOpenDrivingRouteOption() async {
    final result = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('RefClass::asBMKOpenDrivingRouteOption', {'refId': refId});
    return BMKOpenDrivingRouteOption()..refId = result;
  }
  
  Future<BMKOpenTransitRouteOption> asBMKOpenTransitRouteOption() async {
    final result = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('RefClass::asBMKOpenTransitRouteOption', {'refId': refId});
    return BMKOpenTransitRouteOption()..refId = result;
  }
  
  Future<BMKOpenOption> asBMKOpenOption() async {
    final result = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('RefClass::asBMKOpenOption', {'refId': refId});
    return BMKOpenOption()..refId = result;
  }
  
  Future<BMKOpenPanoramaOption> asBMKOpenPanoramaOption() async {
    final result = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('RefClass::asBMKOpenPanoramaOption', {'refId': refId});
    return BMKOpenPanoramaOption()..refId = result;
  }
  
  Future<BMKOpenPanorama> asBMKOpenPanorama() async {
    final result = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('RefClass::asBMKOpenPanorama', {'refId': refId});
    return BMKOpenPanorama()..refId = result;
  }
  
  Future<BMKFavPoiManager> asBMKFavPoiManager() async {
    final result = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('RefClass::asBMKFavPoiManager', {'refId': refId});
    return BMKFavPoiManager()..refId = result;
  }
  
  Future<BMKNaviPara> asBMKNaviPara() async {
    final result = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('RefClass::asBMKNaviPara', {'refId': refId});
    return BMKNaviPara()..refId = result;
  }
  
  Future<BMKNavigation> asBMKNavigation() async {
    final result = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('RefClass::asBMKNavigation', {'refId': refId});
    return BMKNavigation()..refId = result;
  }
  
}