// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_utils_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class BMKBaseLog extends NSObject  {
  //region constants
  static const String name__ = 'BMKBaseLog';

  @override
  final String tag__ = 'bmap_utils_fluttify';

  
  //endregion

  //region creators
  static Future<BMKBaseLog?> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod(
      'ObjectFactory::createBMKBaseLog',
      {'init': init}
    );
    return BmapUtilsFluttifyIOSAs<BMKBaseLog?>(__result__);
  }
  
  static Future<List<BMKBaseLog>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kBmapUtilsFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchBMKBaseLog',
      {'length': length, 'init': init}
    );
    return __result_batch__
        ?.map((it) => BmapUtilsFluttifyIOSAs<BMKBaseLog>(it))
        .where((element) => element !=null)
        .cast<BMKBaseLog>()
        .toList() ?? <BMKBaseLog>[];
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<bool?> getlogEnableWithModule(BMKMapModule mapModule) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKBaseLog::getlogEnableWithModule([])');
    }
  
    // invoke native method
    final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKBaseLog::getlogEnableWithModule', {"mapModule": mapModule.toValue()});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<String?> getLogFilePathWithModule(BMKMapModule mapModule) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKBaseLog::getLogFilePathWithModule([])');
    }
  
    // invoke native method
    final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKBaseLog::getLogFilePathWithModule', {"mapModule": mapModule.toValue()});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> setlogEnable_module(bool enable, BMKMapModule mapModule) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKBaseLog::setlogEnable([\'enable\':$enable])');
    }
  
    // invoke native method
    final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKBaseLog::setlogEnable_module', {"enable": enable, "mapModule": mapModule.toValue()});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  
  static Future<void> setlogFilePath_module(String logFilePath, BMKMapModule mapModule) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKBaseLog::setlogFilePath([\'logFilePath\':$logFilePath])');
    }
  
    // invoke native method
    final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKBaseLog::setlogFilePath_module', {"logFilePath": logFilePath, "mapModule": mapModule.toValue()});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  //endregion

  @override
  String toString() {
    return 'BMKBaseLog{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension BMKBaseLog_Batch on List<BMKBaseLog> {
  String? get refId {
    if (isEmpty) return null;
    return first.refId;
  }

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<List<bool?>> getlogEnableWithModule_batch(List<BMKMapModule> mapModule) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapUtilsFluttifyChannel.invokeMethod('BMKBaseLog::getlogEnableWithModule_batch', [for (int __i__ = 0; __i__ < mapModule.length; __i__++) {"mapModule": mapModule[__i__].toValue()}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<bool?>().toList();
  }
  
  
  static Future<List<String?>> getLogFilePathWithModule_batch(List<BMKMapModule> mapModule) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapUtilsFluttifyChannel.invokeMethod('BMKBaseLog::getLogFilePathWithModule_batch', [for (int __i__ = 0; __i__ < mapModule.length; __i__++) {"mapModule": mapModule[__i__].toValue()}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<String?>().toList();
  }
  
  
  static Future<List<void>> setlogEnable_module_batch(List<bool> enable, List<BMKMapModule> mapModule) async {
    assert(enable.length == mapModule.length);
  
    // invoke native method
    final resultBatch = await kBmapUtilsFluttifyChannel.invokeMethod('BMKBaseLog::setlogEnable_module_batch', [for (int __i__ = 0; __i__ < enable.length; __i__++) {"enable": enable[__i__], "mapModule": mapModule[__i__].toValue()}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  
  static Future<List<void>> setlogFilePath_module_batch(List<String> logFilePath, List<BMKMapModule> mapModule) async {
    assert(logFilePath.length == mapModule.length);
  
    // invoke native method
    final resultBatch = await kBmapUtilsFluttifyChannel.invokeMethod('BMKBaseLog::setlogFilePath_module_batch', [for (int __i__ = 0; __i__ < logFilePath.length; __i__++) {"logFilePath": logFilePath[__i__], "mapModule": mapModule[__i__].toValue()}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  //endregion
}