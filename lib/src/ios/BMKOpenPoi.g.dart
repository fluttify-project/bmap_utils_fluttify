// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_utils_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class BMKOpenPoi extends NSObject  {
  //region constants
  static const String name__ = 'BMKOpenPoi';

  @override
  final String tag__ = 'bmap_utils_fluttify';

  
  //endregion

  //region creators
  static Future<BMKOpenPoi?> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod(
      'ObjectFactory::createBMKOpenPoi',
      {'init': init}
    );
    return BmapUtilsFluttifyIOSAs<BMKOpenPoi?>(__result__);
  }
  
  static Future<List<BMKOpenPoi>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kBmapUtilsFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchBMKOpenPoi',
      {'length': length, 'init': init}
    );
    return __result_batch__
        ?.map((it) => BmapUtilsFluttifyIOSAs<BMKOpenPoi>(it))
        .where((element) => element !=null)
        .cast<BMKOpenPoi>()
        .toList() ?? <BMKOpenPoi>[];
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<BMKOpenErrorCode?> openBaiduMapPoiDetailPage(BMKOpenPoiDetailOption option) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKOpenPoi::openBaiduMapPoiDetailPage([])');
    }
  
    // invoke native method
    final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKOpenPoi::openBaiduMapPoiDetailPage', {"option": option});
  
  
    // handle native call
  
  
    return (__result__ as int).toBMKOpenErrorCode();
  }
  
  
  static Future<BMKOpenErrorCode?> openBaiduMapPoiNearbySearch(BMKOpenPoiNearbyOption option) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKOpenPoi::openBaiduMapPoiNearbySearch([])');
    }
  
    // invoke native method
    final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKOpenPoi::openBaiduMapPoiNearbySearch', {"option": option});
  
  
    // handle native call
  
  
    return (__result__ as int).toBMKOpenErrorCode();
  }
  
  //endregion

  @override
  String toString() {
    return 'BMKOpenPoi{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension BMKOpenPoi_Batch on List<BMKOpenPoi> {
  String? get refId {
    if (isEmpty) return null;
    return first.refId;
  }

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<List<BMKOpenErrorCode?>> openBaiduMapPoiDetailPage_batch(List<BMKOpenPoiDetailOption> option) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapUtilsFluttifyChannel.invokeMethod('BMKOpenPoi::openBaiduMapPoiDetailPage_batch', [for (int __i__ = 0; __i__ < option.length; __i__++) {"option": option[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => (__result__ as int).toBMKOpenErrorCode()).cast<BMKOpenErrorCode?>().toList();
  }
  
  
  static Future<List<BMKOpenErrorCode?>> openBaiduMapPoiNearbySearch_batch(List<BMKOpenPoiNearbyOption> option) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapUtilsFluttifyChannel.invokeMethod('BMKOpenPoi::openBaiduMapPoiNearbySearch_batch', [for (int __i__ = 0; __i__ < option.length; __i__++) {"option": option[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => (__result__ as int).toBMKOpenErrorCode()).cast<BMKOpenErrorCode?>().toList();
  }
  
  //endregion
}