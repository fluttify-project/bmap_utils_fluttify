// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_utils_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class BMKNavigation extends NSObject  {
  //region constants
  static const String name__ = 'BMKNavigation';

  
  //endregion

  //region creators
  static Future<BMKNavigation> create__() async {
    final int refId = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('ObjectFactory::createBMKNavigation');
    final object = BMKNavigation()..refId = refId..tag__ = 'bmap_utils_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<BMKNavigation>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('ObjectFactory::create_batchBMKNavigation', {'length': length});
  
    final List<BMKNavigation> typedResult = resultBatch.map((result) => BMKNavigation()..refId = result..tag__ = 'bmap_utils_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<BMKOpenErrorCode> openBaiduMapNavigation(BMKNaviPara para) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKNavigation::openBaiduMapNavigation([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('BMKNavigation::openBaiduMapNavigation', {"para": para?.refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = BMKOpenErrorCode.values[__result__];
    
      return __return__;
    }
  }
  
  
  static Future<BMKOpenErrorCode> openBaiduMapWalkNavigation(BMKNaviPara para) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKNavigation::openBaiduMapWalkNavigation([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('BMKNavigation::openBaiduMapWalkNavigation', {"para": para?.refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = BMKOpenErrorCode.values[__result__];
    
      return __return__;
    }
  }
  
  
  static Future<BMKOpenErrorCode> openBaiduMapRideNavigation(BMKNaviPara para) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKNavigation::openBaiduMapRideNavigation([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('BMKNavigation::openBaiduMapRideNavigation', {"para": para?.refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = BMKOpenErrorCode.values[__result__];
    
      return __return__;
    }
  }
  
  
  static Future<BMKOpenErrorCode> openBaiduMapwalkARNavigation(BMKNaviPara para) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKNavigation::openBaiduMapwalkARNavigation([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('BMKNavigation::openBaiduMapwalkARNavigation', {"para": para?.refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = BMKOpenErrorCode.values[__result__];
    
      return __return__;
    }
  }
  
  //endregion
}

extension BMKNavigation_Batch on List<BMKNavigation> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<List<BMKOpenErrorCode>> openBaiduMapNavigation_batch(List<BMKNaviPara> para) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('BMKNavigation::openBaiduMapNavigation_batch', [for (int __i__ = 0; __i__ < para.length; __i__++) {"para": para[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => BMKOpenErrorCode.values[__result__]).toList();
    
      return typedResult;
    }
  }
  
  
  static Future<List<BMKOpenErrorCode>> openBaiduMapWalkNavigation_batch(List<BMKNaviPara> para) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('BMKNavigation::openBaiduMapWalkNavigation_batch', [for (int __i__ = 0; __i__ < para.length; __i__++) {"para": para[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => BMKOpenErrorCode.values[__result__]).toList();
    
      return typedResult;
    }
  }
  
  
  static Future<List<BMKOpenErrorCode>> openBaiduMapRideNavigation_batch(List<BMKNaviPara> para) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('BMKNavigation::openBaiduMapRideNavigation_batch', [for (int __i__ = 0; __i__ < para.length; __i__++) {"para": para[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => BMKOpenErrorCode.values[__result__]).toList();
    
      return typedResult;
    }
  }
  
  
  static Future<List<BMKOpenErrorCode>> openBaiduMapwalkARNavigation_batch(List<BMKNaviPara> para) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('BMKNavigation::openBaiduMapwalkARNavigation_batch', [for (int __i__ = 0; __i__ < para.length; __i__++) {"para": para[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<int>().map((__result__) => BMKOpenErrorCode.values[__result__]).toList();
    
      return typedResult;
    }
  }
  
  //endregion
}