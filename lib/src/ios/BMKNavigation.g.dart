// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_utils_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class BMKNavigation extends NSObject  {
  //region constants
  static const String name__ = 'BMKNavigation';

  @override
  final String tag__ = 'bmap_utils_fluttify';

  
  //endregion

  //region creators
  static Future<BMKNavigation?> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod(
      'ObjectFactory::createBMKNavigation',
      {'init': init}
    );
    return BmapUtilsFluttifyIOSAs<BMKNavigation?>(__result__);
  }
  
  static Future<List<BMKNavigation>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kBmapUtilsFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchBMKNavigation',
      {'length': length, 'init': init}
    );
    return __result_batch__
        ?.map((it) => BmapUtilsFluttifyIOSAs<BMKNavigation>(it))
        .where((element) => element !=null)
        .cast<BMKNavigation>()
        .toList() ?? <BMKNavigation>[];
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<BMKOpenErrorCode?> openBaiduMapNavigation(BMKNaviPara para) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKNavigation::openBaiduMapNavigation([])');
    }
  
    // invoke native method
    final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKNavigation::openBaiduMapNavigation', {"para": para});
  
  
    // handle native call
  
  
    return (__result__ as int).toBMKOpenErrorCode();
  }
  
  
  static Future<BMKOpenErrorCode?> openBaiduMapWalkNavigation(BMKNaviPara para) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKNavigation::openBaiduMapWalkNavigation([])');
    }
  
    // invoke native method
    final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKNavigation::openBaiduMapWalkNavigation', {"para": para});
  
  
    // handle native call
  
  
    return (__result__ as int).toBMKOpenErrorCode();
  }
  
  
  static Future<BMKOpenErrorCode?> openBaiduMapRideNavigation(BMKNaviPara para) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKNavigation::openBaiduMapRideNavigation([])');
    }
  
    // invoke native method
    final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKNavigation::openBaiduMapRideNavigation', {"para": para});
  
  
    // handle native call
  
  
    return (__result__ as int).toBMKOpenErrorCode();
  }
  
  
  static Future<BMKOpenErrorCode?> openBaiduMapwalkARNavigation(BMKNaviPara para) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKNavigation::openBaiduMapwalkARNavigation([])');
    }
  
    // invoke native method
    final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKNavigation::openBaiduMapwalkARNavigation', {"para": para});
  
  
    // handle native call
  
  
    return (__result__ as int).toBMKOpenErrorCode();
  }
  
  //endregion

  @override
  String toString() {
    return 'BMKNavigation{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension BMKNavigation_Batch on List<BMKNavigation> {
  String? get refId {
    if (isEmpty) return null;
    return first.refId;
  }

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  static Future<List<BMKOpenErrorCode?>> openBaiduMapNavigation_batch(List<BMKNaviPara> para) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapUtilsFluttifyChannel.invokeMethod('BMKNavigation::openBaiduMapNavigation_batch', [for (int __i__ = 0; __i__ < para.length; __i__++) {"para": para[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => (__result__ as int).toBMKOpenErrorCode()).cast<BMKOpenErrorCode?>().toList();
  }
  
  
  static Future<List<BMKOpenErrorCode?>> openBaiduMapWalkNavigation_batch(List<BMKNaviPara> para) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapUtilsFluttifyChannel.invokeMethod('BMKNavigation::openBaiduMapWalkNavigation_batch', [for (int __i__ = 0; __i__ < para.length; __i__++) {"para": para[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => (__result__ as int).toBMKOpenErrorCode()).cast<BMKOpenErrorCode?>().toList();
  }
  
  
  static Future<List<BMKOpenErrorCode?>> openBaiduMapRideNavigation_batch(List<BMKNaviPara> para) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapUtilsFluttifyChannel.invokeMethod('BMKNavigation::openBaiduMapRideNavigation_batch', [for (int __i__ = 0; __i__ < para.length; __i__++) {"para": para[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => (__result__ as int).toBMKOpenErrorCode()).cast<BMKOpenErrorCode?>().toList();
  }
  
  
  static Future<List<BMKOpenErrorCode?>> openBaiduMapwalkARNavigation_batch(List<BMKNaviPara> para) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapUtilsFluttifyChannel.invokeMethod('BMKNavigation::openBaiduMapwalkARNavigation_batch', [for (int __i__ = 0; __i__ < para.length; __i__++) {"para": para[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => (__result__ as int).toBMKOpenErrorCode()).cast<BMKOpenErrorCode?>().toList();
  }
  
  //endregion
}