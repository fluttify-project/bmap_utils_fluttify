// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_utils_fluttify/src/ios/ios.export.g.dart';
import 'package:bmap_utils_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class BMKOpenPanorama extends NSObject  {
  //region constants
  static const String name__ = 'BMKOpenPanorama';

  
  //endregion

  //region creators
  static Future<BMKOpenPanorama> create__() async {
    final int refId = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('ObjectFactory::createBMKOpenPanorama');
    final object = BMKOpenPanorama()..refId = refId..tag__ = 'bmap_utils_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  static Future<List<BMKOpenPanorama>> create_batch__(int length) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
    final List resultBatch = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('ObjectFactory::create_batchBMKOpenPanorama', {'length': length});
  
    final List<BMKOpenPanorama> typedResult = resultBatch.map((result) => BMKOpenPanorama()..refId = result..tag__ = 'bmap_utils_fluttify').toList();
    kNativeObjectPool.addAll(typedResult);
    return typedResult;
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  Future<void> set_delegate(BMKOpenPanoramaDelegate delegate) async {
    await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('BMKOpenPanorama::set_delegate', {'refId': refId, "delegate": delegate.refId});
  
    MethodChannel('BMKOpenPanoramaDelegate::Callback')
      .setMethodCallHandler((methodCall) async {
        final args = methodCall.arguments as Map;
        // final refId = args['callerRefId'] as int;
        // if (refId != this.refId) return;
  
        switch (methodCall.method) {
          case 'Callback::BMKOpenPanoramaDelegate::onGetOpenPanoramaStatus':
            // print log
            if (fluttifyLogEnabled) {
              debugPrint('fluttify-dart-callback: onGetOpenPanoramaStatus([])');
            }
        
            // handle the native call
            delegate?.onGetOpenPanoramaStatus(BMKOpenErrorCode.values[(args['ecode'])]);
            break;
          default:
            break;
        }
      });
  }
  
  //endregion

  //region methods
  
  Future<void> openBaiduMapPanorama(BMKOpenPanoramaOption option) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKOpenPanorama@$refId::openBaiduMapPanorama([])');
    }
  
    // invoke native method
    final __result__ = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('BMKOpenPanorama::openBaiduMapPanorama', {"option": option.refId, "refId": refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (__result__ == null) {
      return null;
    } else {
      final __return__ = __result__;
    
      return __return__;
    }
  }
  
  //endregion
}

extension BMKOpenPanorama_Batch on List<BMKOpenPanorama> {
  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<List<void>> openBaiduMapPanorama_batch(List<BMKOpenPanoramaOption> option) async {
    if (false) {
      return Future.error('all args must have same length!');
    }
  
    // invoke native method
    final resultBatch = await MethodChannel('com.fluttify/bmap_utils_fluttify').invokeMethod('BMKOpenPanorama::openBaiduMapPanorama_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"option": option[__i__].refId, "refId": this[__i__].refId}]);
  
  
    // convert native result to dart side object
    if (resultBatch == null) {
      return null;
    } else {
      final typedResult = (resultBatch as List).cast<String>().map((__result__) => __result__).toList();
    
      return typedResult;
    }
  }
  
  //endregion
}