// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable, dead_code, unnecessary_cast
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:bmap_utils_fluttify/src/ios/ios.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

import 'package:foundation_fluttify/foundation_fluttify.dart';
import 'package:core_location_fluttify/core_location_fluttify.dart';

class BMKOpenPanorama extends NSObject  {
  //region constants
  static const String name__ = 'BMKOpenPanorama';

  @override
  final String tag__ = 'bmap_utils_fluttify';

  
  //endregion

  //region creators
  static Future<BMKOpenPanorama?> create__({ bool init = true /* ios only */ }) async {
    final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod(
      'ObjectFactory::createBMKOpenPanorama',
      {'init': init}
    );
    return BmapUtilsFluttifyIOSAs<BMKOpenPanorama?>(__result__);
  }
  
  static Future<List<BMKOpenPanorama>> create_batch__(int length, { bool init = true /* ios only */ }) async {
    assert(true);
    final __result_batch__ = await  kBmapUtilsFluttifyChannel.invokeListMethod(
      'ObjectFactory::create_batchBMKOpenPanorama',
      {'length': length, 'init': init}
    );
    return __result_batch__
        ?.map((it) => BmapUtilsFluttifyIOSAs<BMKOpenPanorama>(it))
        .where((element) => element !=null)
        .cast<BMKOpenPanorama>()
        .toList() ?? <BMKOpenPanorama>[];
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  Future<void> set_delegate(BMKOpenPanoramaDelegate delegate) async {
    await kBmapUtilsFluttifyChannel.invokeMethod('BMKOpenPanorama::set_delegate', <String, dynamic>{'__this__': this, });
  
    MethodChannel('BMKOpenPanoramaDelegate::Callback', kBmapUtilsFluttifyMethodCodec)
      .setMethodCallHandler((methodCall) async {
        try {
          final args = methodCall.arguments as Map;
          switch (methodCall.method) {
            case 'Callback::BMKOpenPanoramaDelegate::onGetOpenPanoramaStatus':
              // print log
              if (fluttifyLogEnabled) {
                debugPrint('fluttify-dart-callback: onGetOpenPanoramaStatus([\'ecode\':${args['ecode']}])');
              }
          
              // handle the native call
              await delegate.onGetOpenPanoramaStatus((args['ecode'] as int).toBMKOpenErrorCode());
              break;
            default:
              throw MissingPluginException('方法${methodCall.method}未实现');
              break;
          }
        } catch (e) {
          debugPrint(e.toString());
          rethrow;
        }
      });
  }
  
  //endregion

  //region methods
  
  Future<void> openBaiduMapPanorama(BMKOpenPanoramaOption option) async {
    // print log
    if (fluttifyLogEnabled) {
      debugPrint('fluttify-dart: BMKOpenPanorama@$refId::openBaiduMapPanorama([])');
    }
  
    // invoke native method
    final __result__ = await kBmapUtilsFluttifyChannel.invokeMethod('BMKOpenPanorama::openBaiduMapPanorama', {"option": option, "__this__": this});
  
  
    // handle native call
  
  
    return __result__;
  }
  
  //endregion

  @override
  String toString() {
    return 'BMKOpenPanorama{refId: $refId, runtimeType: $runtimeType, tag__: $tag__}';
  }
}

extension BMKOpenPanorama_Batch on List<BMKOpenPanorama> {
  String? get refId {
    if (isEmpty) return null;
    return first.refId;
  }

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  
  Future<List<void>> openBaiduMapPanorama_batch(List<BMKOpenPanoramaOption> option) async {
    assert(true);
  
    // invoke native method
    final resultBatch = await kBmapUtilsFluttifyChannel.invokeMethod('BMKOpenPanorama::openBaiduMapPanorama_batch', [for (int __i__ = 0; __i__ < this.length; __i__++) {"option": option[__i__], "__this__": this[__i__]}]);
  
  
    return (resultBatch as List).map((__result__) => __result__).cast<void>().toList();
  }
  
  //endregion
}